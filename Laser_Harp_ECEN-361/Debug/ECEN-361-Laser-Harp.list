
ECEN-361-Laser-Harp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004070  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001644  080041f8  080041f8  000141f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800583c  0800583c  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  0800583c  0800583c  0001583c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005844  08005844  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005848  08005848  00015848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  0800584c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000003c  08005888  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08005888  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001136d  00000000  00000000  000200af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000223d  00000000  00000000  0003141c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  00033660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c2e  00000000  00000000  000345f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000264ab  00000000  00000000  00035226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f63  00000000  00000000  0005b6d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0757  00000000  00000000  0006d634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041ec  00000000  00000000  0015dd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00161f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080041e0 	.word	0x080041e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	080041e0 	.word	0x080041e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fbf0 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f814 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f922 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f8f0 	bl	80006b8 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80004d8:	f000 f860 	bl	800059c <MX_DAC1_Init>
  MX_TIM15_Init();
 80004dc:	f000 f89a 	bl	8000614 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_Base_Start_IT(&htim15);
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <main+0x2c>)
 80004e2:	f002 fcf7 	bl	8002ed4 <HAL_TIM_Base_Start_IT>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 80004e6:	2110      	movs	r1, #16
 80004e8:	4802      	ldr	r0, [pc, #8]	; (80004f4 <main+0x30>)
 80004ea:	f000 fdb2 	bl	8001052 <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <main+0x2a>
 80004f0:	2000006c 	.word	0x2000006c
 80004f4:	20000058 	.word	0x20000058

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b096      	sub	sp, #88	; 0x58
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	2244      	movs	r2, #68	; 0x44
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f003 fe3d 	bl	8004186 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	463b      	mov	r3, r7
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800051a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800051e:	f001 f96f 	bl	8001800 <HAL_PWREx_ControlVoltageScaling>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000528:	f000 fa4c 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052c:	2302      	movs	r3, #2
 800052e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000534:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000536:	2310      	movs	r3, #16
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053e:	2302      	movs	r3, #2
 8000540:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000542:	2301      	movs	r3, #1
 8000544:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000546:	230a      	movs	r3, #10
 8000548:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800054a:	2307      	movs	r3, #7
 800054c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800054e:	2302      	movs	r3, #2
 8000550:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000552:	2302      	movs	r3, #2
 8000554:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4618      	mov	r0, r3
 800055c:	f001 f9a6 	bl	80018ac <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000566:	f000 fa2d 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2303      	movs	r3, #3
 8000570:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	2104      	movs	r1, #4
 8000582:	4618      	mov	r0, r3
 8000584:	f001 fd6e 	bl	8002064 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800058e:	f000 fa19 	bl	80009c4 <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3758      	adds	r7, #88	; 0x58
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2224      	movs	r2, #36	; 0x24
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fdec 	bl	8004186 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <MX_DAC1_Init+0x70>)
 80005b0:	4a17      	ldr	r2, [pc, #92]	; (8000610 <MX_DAC1_Init+0x74>)
 80005b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005b4:	4815      	ldr	r0, [pc, #84]	; (800060c <MX_DAC1_Init+0x70>)
 80005b6:	f000 fd2a 	bl	800100e <HAL_DAC_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005c0:	f000 fa00 	bl	80009c4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	4619      	mov	r1, r3
 80005de:	480b      	ldr	r0, [pc, #44]	; (800060c <MX_DAC1_Init+0x70>)
 80005e0:	f000 fe0d 	bl	80011fe <HAL_DAC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005ea:	f000 f9eb 	bl	80009c4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2210      	movs	r2, #16
 80005f2:	4619      	mov	r1, r3
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_DAC1_Init+0x70>)
 80005f6:	f000 fe02 	bl	80011fe <HAL_DAC_ConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000600:	f000 f9e0 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	; 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000058 	.word	0x20000058
 8000610:	40007400 	.word	0x40007400

08000614 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000632:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MX_TIM15_Init+0x9c>)
 8000634:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <MX_TIM15_Init+0xa0>)
 8000636:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 79;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <MX_TIM15_Init+0x9c>)
 800063a:	224f      	movs	r2, #79	; 0x4f
 800063c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063e:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <MX_TIM15_Init+0x9c>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000;
 8000644:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_TIM15_Init+0x9c>)
 8000646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800064a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_TIM15_Init+0x9c>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_TIM15_Init+0x9c>)
 8000654:	2200      	movs	r2, #0
 8000656:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_TIM15_Init+0x9c>)
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800065e:	4814      	ldr	r0, [pc, #80]	; (80006b0 <MX_TIM15_Init+0x9c>)
 8000660:	f002 fbe0 	bl	8002e24 <HAL_TIM_Base_Init>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800066a:	f000 f9ab 	bl	80009c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	4619      	mov	r1, r3
 800067a:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_TIM15_Init+0x9c>)
 800067c:	f002 fd9c 	bl	80031b8 <HAL_TIM_ConfigClockSource>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8000686:	f000 f99d 	bl	80009c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	; (80006b0 <MX_TIM15_Init+0x9c>)
 8000698:	f002 ffb4 	bl	8003604 <HAL_TIMEx_MasterConfigSynchronization>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80006a2:	f000 f98f 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	3720      	adds	r7, #32
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000006c 	.word	0x2000006c
 80006b4:	40014000 	.word	0x40014000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <MX_USART2_UART_Init+0x5c>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006fc:	f003 f828 	bl	8003750 <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000706:	f000 f95d 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000b8 	.word	0x200000b8
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b32      	ldr	r3, [pc, #200]	; (80007f8 <MX_GPIO_Init+0xe0>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a31      	ldr	r2, [pc, #196]	; (80007f8 <MX_GPIO_Init+0xe0>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <MX_GPIO_Init+0xe0>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000746:	4b2c      	ldr	r3, [pc, #176]	; (80007f8 <MX_GPIO_Init+0xe0>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a2b      	ldr	r2, [pc, #172]	; (80007f8 <MX_GPIO_Init+0xe0>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <MX_GPIO_Init+0xe0>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <MX_GPIO_Init+0xe0>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a25      	ldr	r2, [pc, #148]	; (80007f8 <MX_GPIO_Init+0xe0>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <MX_GPIO_Init+0xe0>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_GPIO_Init+0xe0>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a1f      	ldr	r2, [pc, #124]	; (80007f8 <MX_GPIO_Init+0xe0>)
 800077c:	f043 0302 	orr.w	r3, r3, #2
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_GPIO_Init+0xe0>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0302 	and.w	r3, r3, #2
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000794:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	4815      	ldr	r0, [pc, #84]	; (80007fc <MX_GPIO_Init+0xe4>)
 80007a6:	f000 fe5b 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pins : NOTE_1_Pin NOTE_2_Pin NOTE_3_Pin */
  GPIO_InitStruct.Pin = NOTE_1_Pin|NOTE_2_Pin|NOTE_3_Pin;
 80007aa:	2307      	movs	r3, #7
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	480f      	ldr	r0, [pc, #60]	; (80007fc <MX_GPIO_Init+0xe4>)
 80007c0:	f000 fe4e 	bl	8001460 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOTE_4_Pin */
  GPIO_InitStruct.Pin = NOTE_4_Pin;
 80007c4:	2308      	movs	r3, #8
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NOTE_4_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4808      	ldr	r0, [pc, #32]	; (80007fc <MX_GPIO_Init+0xe4>)
 80007da:	f000 fe41 	bl	8001460 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2028      	movs	r0, #40	; 0x28
 80007e4:	f000 fbdd 	bl	8000fa2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007e8:	2028      	movs	r0, #40	; 0x28
 80007ea:	f000 fbf6 	bl	8000fda <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	; 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000800 	.word	0x48000800

08000800 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == NOTE_1_Pin){
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d109      	bne.n	8000824 <HAL_GPIO_EXTI_Callback+0x24>
		active[NOTE_C] = active[NOTE_C]?0:1;
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <HAL_GPIO_EXTI_Callback+0x80>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	461a      	mov	r2, r3
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <HAL_GPIO_EXTI_Callback+0x80>)
 8000822:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == NOTE_2_Pin){
 8000824:	88fb      	ldrh	r3, [r7, #6]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d109      	bne.n	800083e <HAL_GPIO_EXTI_Callback+0x3e>
			active[NOTE_Cs] = active[NOTE_Cs]?0:1;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <HAL_GPIO_EXTI_Callback+0x80>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	bf0c      	ite	eq
 8000832:	2301      	moveq	r3, #1
 8000834:	2300      	movne	r3, #0
 8000836:	b2db      	uxtb	r3, r3
 8000838:	461a      	mov	r2, r3
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <HAL_GPIO_EXTI_Callback+0x80>)
 800083c:	605a      	str	r2, [r3, #4]
		}
	if(GPIO_Pin == NOTE_3_Pin){
 800083e:	88fb      	ldrh	r3, [r7, #6]
 8000840:	2b04      	cmp	r3, #4
 8000842:	d109      	bne.n	8000858 <HAL_GPIO_EXTI_Callback+0x58>
			active[NOTE_D] = active[NOTE_D]?0:1;
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <HAL_GPIO_EXTI_Callback+0x80>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	2b00      	cmp	r3, #0
 800084a:	bf0c      	ite	eq
 800084c:	2301      	moveq	r3, #1
 800084e:	2300      	movne	r3, #0
 8000850:	b2db      	uxtb	r3, r3
 8000852:	461a      	mov	r2, r3
 8000854:	4b0a      	ldr	r3, [pc, #40]	; (8000880 <HAL_GPIO_EXTI_Callback+0x80>)
 8000856:	609a      	str	r2, [r3, #8]
		}
	if(GPIO_Pin == NOTE_4_Pin){
 8000858:	88fb      	ldrh	r3, [r7, #6]
 800085a:	2b08      	cmp	r3, #8
 800085c:	d109      	bne.n	8000872 <HAL_GPIO_EXTI_Callback+0x72>
			active[NOTE_Ds] = active[NOTE_Ds]?0:1;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_GPIO_EXTI_Callback+0x80>)
 8000860:	68db      	ldr	r3, [r3, #12]
 8000862:	2b00      	cmp	r3, #0
 8000864:	bf0c      	ite	eq
 8000866:	2301      	moveq	r3, #1
 8000868:	2300      	movne	r3, #0
 800086a:	b2db      	uxtb	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <HAL_GPIO_EXTI_Callback+0x80>)
 8000870:	60da      	str	r2, [r3, #12]
		}
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	20000000 	.word	0x20000000

08000884 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim15 )
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a44      	ldr	r2, [pc, #272]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000890:	4293      	cmp	r3, r2
 8000892:	f040 8081 	bne.w	8000998 <HAL_TIM_PeriodElapsedCallback+0x114>
  {
	  int C_val = 	active[NOTE_C]?C_TABLE[index[NOTE_C]]:0;
 8000896:	4b43      	ldr	r3, [pc, #268]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d005      	beq.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x26>
 800089e:	4b42      	ldr	r3, [pc, #264]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a42      	ldr	r2, [pc, #264]	; (80009ac <HAL_TIM_PeriodElapsedCallback+0x128>)
 80008a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a8:	e000      	b.n	80008ac <HAL_TIM_PeriodElapsedCallback+0x28>
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
	  int Cs_val = 	active[NOTE_Cs]?C_SHARP_TABLE[index[NOTE_Cs]]:0;
 80008ae:	4b3d      	ldr	r3, [pc, #244]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d005      	beq.n	80008c2 <HAL_TIM_PeriodElapsedCallback+0x3e>
 80008b6:	4b3c      	ldr	r3, [pc, #240]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	4a3d      	ldr	r2, [pc, #244]	; (80009b0 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80008bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008c0:	e000      	b.n	80008c4 <HAL_TIM_PeriodElapsedCallback+0x40>
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
	  int D_val = 	active[NOTE_D]?D_TABLE[index[NOTE_D]]:0;
 80008c6:	4b37      	ldr	r3, [pc, #220]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d005      	beq.n	80008da <HAL_TIM_PeriodElapsedCallback+0x56>
 80008ce:	4b36      	ldr	r3, [pc, #216]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	4a38      	ldr	r2, [pc, #224]	; (80009b4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80008d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d8:	e000      	b.n	80008dc <HAL_TIM_PeriodElapsedCallback+0x58>
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
	  int Ds_val = 	active[NOTE_Ds]?D_SHARP_TABLE[index[NOTE_Ds]]:0;
 80008de:	4b31      	ldr	r3, [pc, #196]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d005      	beq.n	80008f2 <HAL_TIM_PeriodElapsedCallback+0x6e>
 80008e6:	4b30      	ldr	r3, [pc, #192]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	4a33      	ldr	r2, [pc, #204]	; (80009b8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80008ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f0:	e000      	b.n	80008f4 <HAL_TIM_PeriodElapsedCallback+0x70>
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
	  index[NOTE_C] += 	active[NOTE_C];
 80008f6:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4413      	add	r3, r2
 8000900:	4a29      	ldr	r2, [pc, #164]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000902:	6013      	str	r3, [r2, #0]
	  index[NOTE_Cs] += 	active[NOTE_Cs];
 8000904:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	4b26      	ldr	r3, [pc, #152]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	4413      	add	r3, r2
 800090e:	4a26      	ldr	r2, [pc, #152]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000910:	6053      	str	r3, [r2, #4]
	  index[NOTE_D]	+= 	active[NOTE_D];
 8000912:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000914:	689a      	ldr	r2, [r3, #8]
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	4413      	add	r3, r2
 800091c:	4a22      	ldr	r2, [pc, #136]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800091e:	6093      	str	r3, [r2, #8]
	  index[NOTE_Ds] += 	active[NOTE_Ds];
 8000920:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000922:	68da      	ldr	r2, [r3, #12]
 8000924:	4b1f      	ldr	r3, [pc, #124]	; (80009a4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	4413      	add	r3, r2
 800092a:	4a1f      	ldr	r2, [pc, #124]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800092c:	60d3      	str	r3, [r2, #12]
	  wave_out = C_val+Cs_val+Ds_val+D_val;
 800092e:	69fa      	ldr	r2, [r7, #28]
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	441a      	add	r2, r3
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	441a      	add	r2, r3
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	4413      	add	r3, r2
 800093c:	4a1f      	ldr	r2, [pc, #124]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x138>)
 800093e:	6013      	str	r3, [r2, #0]
	  int temp_wave = wave_out*12/4;
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4613      	mov	r3, r2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	4413      	add	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_L , temp_wave);
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2204      	movs	r2, #4
 8000950:	2110      	movs	r1, #16
 8000952:	481b      	ldr	r0, [pc, #108]	; (80009c0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000954:	f000 fc24 	bl	80011a0 <HAL_DAC_SetValue>
	  if(index[NOTE_C] > C_SAMPLES) index[NOTE_C] =0;
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000960:	db02      	blt.n	8000968 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
	  if(index[NOTE_Cs] > Cs_SAMPLES) index[NOTE_Cs] =0;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f5b3 7fb5 	cmp.w	r3, #362	; 0x16a
 8000970:	db02      	blt.n	8000978 <HAL_TIM_PeriodElapsedCallback+0xf4>
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
	  if(index[NOTE_D] > D_SAMPLES) index[NOTE_D] =0;
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8000980:	db02      	blt.n	8000988 <HAL_TIM_PeriodElapsedCallback+0x104>
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
	  if(index[NOTE_Ds] > Ds_SAMPLES) index[NOTE_Ds] =0;
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000990:	dd02      	ble.n	8000998 <HAL_TIM_PeriodElapsedCallback+0x114>
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000994:	2200      	movs	r2, #0
 8000996:	60da      	str	r2, [r3, #12]
  }
}
 8000998:	bf00      	nop
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000006c 	.word	0x2000006c
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000140 	.word	0x20000140
 80009ac:	080041f8 	.word	0x080041f8
 80009b0:	080047f4 	.word	0x080047f4
 80009b4:	08004d98 	.word	0x08004d98
 80009b8:	080052ec 	.word	0x080052ec
 80009bc:	20000170 	.word	0x20000170
 80009c0:	20000058 	.word	0x20000058

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <HAL_MspInit+0x44>)
 80009d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_MspInit+0x44>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6613      	str	r3, [r2, #96]	; 0x60
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_MspInit+0x44>)
 80009e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <HAL_MspInit+0x44>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f2:	4a08      	ldr	r2, [pc, #32]	; (8000a14 <HAL_MspInit+0x44>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f8:	6593      	str	r3, [r2, #88]	; 0x58
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_MspInit+0x44>)
 80009fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a19      	ldr	r2, [pc, #100]	; (8000a9c <HAL_DAC_MspInit+0x84>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d12c      	bne.n	8000a94 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <HAL_DAC_MspInit+0x88>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <HAL_DAC_MspInit+0x88>)
 8000a40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a44:	6593      	str	r3, [r2, #88]	; 0x58
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <HAL_DAC_MspInit+0x88>)
 8000a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <HAL_DAC_MspInit+0x88>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a12      	ldr	r2, [pc, #72]	; (8000aa0 <HAL_DAC_MspInit+0x88>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b10      	ldr	r3, [pc, #64]	; (8000aa0 <HAL_DAC_MspInit+0x88>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a6a:	2330      	movs	r3, #48	; 0x30
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f000 fcee 	bl	8001460 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	2036      	movs	r0, #54	; 0x36
 8000a8a:	f000 fa8a 	bl	8000fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a8e:	2036      	movs	r0, #54	; 0x36
 8000a90:	f000 faa3 	bl	8000fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000a94:	bf00      	nop
 8000a96:	3728      	adds	r7, #40	; 0x28
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40007400 	.word	0x40007400
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <HAL_TIM_Base_MspInit+0x44>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d113      	bne.n	8000ade <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <HAL_TIM_Base_MspInit+0x48>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aba:	4a0c      	ldr	r2, [pc, #48]	; (8000aec <HAL_TIM_Base_MspInit+0x48>)
 8000abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ac0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <HAL_TIM_Base_MspInit+0x48>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2018      	movs	r0, #24
 8000ad4:	f000 fa65 	bl	8000fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000ad8:	2018      	movs	r0, #24
 8000ada:	f000 fa7e 	bl	8000fda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40014000 	.word	0x40014000
 8000aec:	40021000 	.word	0x40021000

08000af0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b0ac      	sub	sp, #176	; 0xb0
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2288      	movs	r2, #136	; 0x88
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4618      	mov	r0, r3
 8000b12:	f003 fb38 	bl	8004186 <memset>
  if(huart->Instance==USART2)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a21      	ldr	r2, [pc, #132]	; (8000ba0 <HAL_UART_MspInit+0xb0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	d13b      	bne.n	8000b98 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f001 fcbd 	bl	80024ac <HAL_RCCEx_PeriphCLKConfig>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b38:	f7ff ff44 	bl	80009c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b40:	4a18      	ldr	r2, [pc, #96]	; (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b46:	6593      	str	r3, [r2, #88]	; 0x58
 8000b48:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b58:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b5a:	f043 0301 	orr.w	r3, r3, #1
 8000b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b60:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <HAL_UART_MspInit+0xb4>)
 8000b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b6c:	230c      	movs	r3, #12
 8000b6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b84:	2307      	movs	r3, #7
 8000b86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b94:	f000 fc64 	bl	8001460 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b98:	bf00      	nop
 8000b9a:	37b0      	adds	r7, #176	; 0xb0
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bac:	e7fe      	b.n	8000bac <NMI_Handler+0x4>

08000bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <HardFault_Handler+0x4>

08000bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <MemManage_Handler+0x4>

08000bba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbe:	e7fe      	b.n	8000bbe <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf4:	f000 f8b6 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000c00:	4802      	ldr	r0, [pc, #8]	; (8000c0c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000c02:	f002 f9d7 	bl	8002fb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000006c 	.word	0x2000006c

08000c10 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c14:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c18:	f000 fdcc 	bl	80017b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM6_DAC_IRQHandler+0x10>)
 8000c26:	f000 fa61 	bl	80010ec <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000058 	.word	0x20000058

08000c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c90 <LoopForever+0x2>
 8000c5c:	f7ff ffea 	bl	8000c34 <SystemInit>
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <LoopForever+0x6>)
 8000c62:	490d      	ldr	r1, [pc, #52]	; (8000c98 <LoopForever+0xa>)
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <LoopForever+0xe>)
 8000c66:	2300      	movs	r3, #0
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:
 8000c6a:	58d4      	ldr	r4, [r2, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:
 8000c70:	18c4      	adds	r4, r0, r3
 8000c72:	428c      	cmp	r4, r1
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <LoopForever+0x12>)
 8000c78:	4c0a      	ldr	r4, [pc, #40]	; (8000ca4 <LoopForever+0x16>)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:
 8000c82:	42a2      	cmp	r2, r4
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>
 8000c86:	f003 fa87 	bl	8004198 <__libc_init_array>
 8000c8a:	f7ff fc1b 	bl	80004c4 <main>

08000c8e <LoopForever>:
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
 8000c90:	20018000 	.word	0x20018000
 8000c94:	20000000 	.word	0x20000000
 8000c98:	2000003c 	.word	0x2000003c
 8000c9c:	0800584c 	.word	0x0800584c
 8000ca0:	2000003c 	.word	0x2000003c
 8000ca4:	20000178 	.word	0x20000178

08000ca8 <ADC1_2_IRQHandler>:
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_2_IRQHandler>
	...

08000cac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <HAL_Init+0x3c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a0b      	ldr	r2, [pc, #44]	; (8000ce8 <HAL_Init+0x3c>)
 8000cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	f000 f962 	bl	8000f8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f000 f80f 	bl	8000cec <HAL_InitTick>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	e001      	b.n	8000cde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cda:	f7ff fe79 	bl	80009d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40022000 	.word	0x40022000

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_InitTick+0x6c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d023      	beq.n	8000d48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <HAL_InitTick+0x70>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_InitTick+0x6c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f96d 	bl	8000ff6 <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10f      	bne.n	8000d42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d809      	bhi.n	8000d3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f000 f937 	bl	8000fa2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d34:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <HAL_InitTick+0x74>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e007      	b.n	8000d4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	e004      	b.n	8000d4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e001      	b.n	8000d4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000038 	.word	0x20000038
 8000d5c:	20000030 	.word	0x20000030
 8000d60:	20000034 	.word	0x20000034

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000038 	.word	0x20000038
 8000d88:	20000174 	.word	0x20000174

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000174 	.word	0x20000174

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000038 	.word	0x20000038

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	db0b      	blt.n	8000e7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	f003 021f 	and.w	r2, r3, #31
 8000e68:	4907      	ldr	r1, [pc, #28]	; (8000e88 <__NVIC_EnableIRQ+0x38>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	095b      	lsrs	r3, r3, #5
 8000e70:	2001      	movs	r0, #1
 8000e72:	fa00 f202 	lsl.w	r2, r0, r2
 8000e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100

08000e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	db0a      	blt.n	8000eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	490c      	ldr	r1, [pc, #48]	; (8000ed8 <__NVIC_SetPriority+0x4c>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	0112      	lsls	r2, r2, #4
 8000eac:	b2d2      	uxtb	r2, r2
 8000eae:	440b      	add	r3, r1
 8000eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb4:	e00a      	b.n	8000ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <__NVIC_SetPriority+0x50>)
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	f003 030f 	and.w	r3, r3, #15
 8000ec2:	3b04      	subs	r3, #4
 8000ec4:	0112      	lsls	r2, r2, #4
 8000ec6:	b2d2      	uxtb	r2, r2
 8000ec8:	440b      	add	r3, r1
 8000eca:	761a      	strb	r2, [r3, #24]
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000e100 	.word	0xe000e100
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b089      	sub	sp, #36	; 0x24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f1c3 0307 	rsb	r3, r3, #7
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf28      	it	cs
 8000efe:	2304      	movcs	r3, #4
 8000f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3304      	adds	r3, #4
 8000f06:	2b06      	cmp	r3, #6
 8000f08:	d902      	bls.n	8000f10 <NVIC_EncodePriority+0x30>
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3b03      	subs	r3, #3
 8000f0e:	e000      	b.n	8000f12 <NVIC_EncodePriority+0x32>
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f28:	f04f 31ff 	mov.w	r1, #4294967295
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	43d9      	mvns	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	4313      	orrs	r3, r2
         );
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3724      	adds	r7, #36	; 0x24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3b01      	subs	r3, #1
 8000f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f58:	d301      	bcc.n	8000f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e00f      	b.n	8000f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <SysTick_Config+0x40>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f66:	210f      	movs	r1, #15
 8000f68:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6c:	f7ff ff8e 	bl	8000e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <SysTick_Config+0x40>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <SysTick_Config+0x40>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	e000e010 	.word	0xe000e010

08000f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff29 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	4603      	mov	r3, r0
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
 8000fae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb4:	f7ff ff3e 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000fb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	68b9      	ldr	r1, [r7, #8]
 8000fbe:	6978      	ldr	r0, [r7, #20]
 8000fc0:	f7ff ff8e 	bl	8000ee0 <NVIC_EncodePriority>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff5d 	bl	8000e8c <__NVIC_SetPriority>
}
 8000fd2:	bf00      	nop
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff31 	bl	8000e50 <__NVIC_EnableIRQ>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ffa2 	bl	8000f48 <SysTick_Config>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d101      	bne.n	8001020 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e014      	b.n	800104a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	791b      	ldrb	r3, [r3, #4]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff fcf1 	bl	8000a18 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2202      	movs	r2, #2
 800103a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2201      	movs	r2, #1
 8001046:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001052:	b480      	push	{r7}
 8001054:	b083      	sub	sp, #12
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	795b      	ldrb	r3, [r3, #5]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <HAL_DAC_Start+0x16>
 8001064:	2302      	movs	r3, #2
 8001066:	e03b      	b.n	80010e0 <HAL_DAC_Start+0x8e>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2202      	movs	r2, #2
 8001072:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6819      	ldr	r1, [r3, #0]
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f003 0310 	and.w	r3, r3, #16
 8001080:	2201      	movs	r2, #1
 8001082:	409a      	lsls	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10f      	bne.n	80010b2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800109c:	2b04      	cmp	r3, #4
 800109e:	d118      	bne.n	80010d2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0201 	orr.w	r2, r2, #1
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	e00f      	b.n	80010d2 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80010bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80010c0:	d107      	bne.n	80010d2 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f042 0202 	orr.w	r2, r2, #2
 80010d0:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001102:	d120      	bne.n	8001146 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800110e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001112:	d118      	bne.n	8001146 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2204      	movs	r2, #4
 8001118:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	691b      	ldr	r3, [r3, #16]
 800111e:	f043 0201 	orr.w	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800112e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800113e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 f852 	bl	80011ea <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001154:	d120      	bne.n	8001198 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001164:	d118      	bne.n	8001198 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2204      	movs	r2, #4
 800116a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	691b      	ldr	r3, [r3, #16]
 8001170:	f043 0202 	orr.w	r2, r3, #2
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001180:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001190:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f95a 	bl	800144c <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4413      	add	r3, r2
 80011c4:	3308      	adds	r3, #8
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	e004      	b.n	80011d4 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4413      	add	r3, r2
 80011d0:	3314      	adds	r3, #20
 80011d2:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	461a      	mov	r2, r3
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	371c      	adds	r7, #28
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr

080011ea <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b083      	sub	sp, #12
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b088      	sub	sp, #32
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	795b      	ldrb	r3, [r3, #5]
 8001212:	2b01      	cmp	r3, #1
 8001214:	d101      	bne.n	800121a <HAL_DAC_ConfigChannel+0x1c>
 8001216:	2302      	movs	r3, #2
 8001218:	e114      	b.n	8001444 <HAL_DAC_ConfigChannel+0x246>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2201      	movs	r2, #1
 800121e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2202      	movs	r2, #2
 8001224:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b04      	cmp	r3, #4
 800122c:	f040 8081 	bne.w	8001332 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001230:	f7ff fdac 	bl	8000d8c <HAL_GetTick>
 8001234:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d140      	bne.n	80012be <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800123c:	e018      	b.n	8001270 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800123e:	f7ff fda5 	bl	8000d8c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b01      	cmp	r3, #1
 800124a:	d911      	bls.n	8001270 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d00a      	beq.n	8001270 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	f043 0208 	orr.w	r2, r3, #8
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2203      	movs	r2, #3
 800126a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e0e9      	b.n	8001444 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001276:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1df      	bne.n	800123e <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800127e:	2001      	movs	r0, #1
 8001280:	f7ff fd90 	bl	8000da4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	6992      	ldr	r2, [r2, #24]
 800128c:	641a      	str	r2, [r3, #64]	; 0x40
 800128e:	e023      	b.n	80012d8 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001290:	f7ff fd7c 	bl	8000d8c <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d90f      	bls.n	80012be <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	da0a      	bge.n	80012be <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	f043 0208 	orr.w	r2, r3, #8
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2203      	movs	r2, #3
 80012b8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e0c2      	b.n	8001444 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	dbe3      	blt.n	8001290 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f7ff fd6b 	bl	8000da4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	6992      	ldr	r2, [r2, #24]
 80012d6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	ea02 0103 	and.w	r1, r2, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	69da      	ldr	r2, [r3, #28]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f003 0310 	and.w	r3, r3, #16
 80012fc:	409a      	lsls	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	430a      	orrs	r2, r1
 8001304:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f003 0310 	and.w	r3, r3, #16
 8001312:	21ff      	movs	r1, #255	; 0xff
 8001314:	fa01 f303 	lsl.w	r3, r1, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	ea02 0103 	and.w	r1, r2, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	6a1a      	ldr	r2, [r3, #32]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f003 0310 	and.w	r3, r3, #16
 8001328:	409a      	lsls	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d11d      	bne.n	8001376 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001340:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f003 0310 	and.w	r3, r3, #16
 8001348:	221f      	movs	r2, #31
 800134a:	fa02 f303 	lsl.w	r3, r2, r3
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	697a      	ldr	r2, [r7, #20]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800137c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	2207      	movs	r2, #7
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	68bb      	ldr	r3, [r7, #8]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	431a      	orrs	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6819      	ldr	r1, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f003 0310 	and.w	r3, r3, #16
 80013ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43da      	mvns	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	400a      	ands	r2, r1
 80013da:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	f640 72fc 	movw	r2, #4092	; 0xffc
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	22c0      	movs	r2, #192	; 0xc0
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43da      	mvns	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	400a      	ands	r2, r1
 8001434:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	2201      	movs	r2, #1
 800143a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001460:	b480      	push	{r7}
 8001462:	b087      	sub	sp, #28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800146e:	e17f      	b.n	8001770 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2101      	movs	r1, #1
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	4013      	ands	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 8171 	beq.w	800176a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b01      	cmp	r3, #1
 8001492:	d005      	beq.n	80014a0 <HAL_GPIO_Init+0x40>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d130      	bne.n	8001502 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014d6:	2201      	movs	r2, #1
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	f003 0201 	and.w	r2, r3, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 0303 	and.w	r3, r3, #3
 800150a:	2b03      	cmp	r3, #3
 800150c:	d118      	bne.n	8001540 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001514:	2201      	movs	r2, #1
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	fa02 f303 	lsl.w	r3, r2, r3
 800151c:	43db      	mvns	r3, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	08db      	lsrs	r3, r3, #3
 800152a:	f003 0201 	and.w	r2, r3, #1
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	2b03      	cmp	r3, #3
 800154a:	d017      	beq.n	800157c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	2203      	movs	r2, #3
 8001558:	fa02 f303 	lsl.w	r3, r2, r3
 800155c:	43db      	mvns	r3, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4013      	ands	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f003 0303 	and.w	r3, r3, #3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d123      	bne.n	80015d0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f003 0307 	and.w	r3, r3, #7
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	220f      	movs	r2, #15
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	691a      	ldr	r2, [r3, #16]
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4313      	orrs	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	6939      	ldr	r1, [r7, #16]
 80015cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0203 	and.w	r2, r3, #3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80ac 	beq.w	800176a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001612:	4b5f      	ldr	r3, [pc, #380]	; (8001790 <HAL_GPIO_Init+0x330>)
 8001614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001616:	4a5e      	ldr	r2, [pc, #376]	; (8001790 <HAL_GPIO_Init+0x330>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6613      	str	r3, [r2, #96]	; 0x60
 800161e:	4b5c      	ldr	r3, [pc, #368]	; (8001790 <HAL_GPIO_Init+0x330>)
 8001620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800162a:	4a5a      	ldr	r2, [pc, #360]	; (8001794 <HAL_GPIO_Init+0x334>)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	3302      	adds	r3, #2
 8001632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001636:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f003 0303 	and.w	r3, r3, #3
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	220f      	movs	r2, #15
 8001642:	fa02 f303 	lsl.w	r3, r2, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	693a      	ldr	r2, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001654:	d025      	beq.n	80016a2 <HAL_GPIO_Init+0x242>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4f      	ldr	r2, [pc, #316]	; (8001798 <HAL_GPIO_Init+0x338>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d01f      	beq.n	800169e <HAL_GPIO_Init+0x23e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4e      	ldr	r2, [pc, #312]	; (800179c <HAL_GPIO_Init+0x33c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d019      	beq.n	800169a <HAL_GPIO_Init+0x23a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4d      	ldr	r2, [pc, #308]	; (80017a0 <HAL_GPIO_Init+0x340>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d013      	beq.n	8001696 <HAL_GPIO_Init+0x236>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4c      	ldr	r2, [pc, #304]	; (80017a4 <HAL_GPIO_Init+0x344>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d00d      	beq.n	8001692 <HAL_GPIO_Init+0x232>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4b      	ldr	r2, [pc, #300]	; (80017a8 <HAL_GPIO_Init+0x348>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d007      	beq.n	800168e <HAL_GPIO_Init+0x22e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4a      	ldr	r2, [pc, #296]	; (80017ac <HAL_GPIO_Init+0x34c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d101      	bne.n	800168a <HAL_GPIO_Init+0x22a>
 8001686:	2306      	movs	r3, #6
 8001688:	e00c      	b.n	80016a4 <HAL_GPIO_Init+0x244>
 800168a:	2307      	movs	r3, #7
 800168c:	e00a      	b.n	80016a4 <HAL_GPIO_Init+0x244>
 800168e:	2305      	movs	r3, #5
 8001690:	e008      	b.n	80016a4 <HAL_GPIO_Init+0x244>
 8001692:	2304      	movs	r3, #4
 8001694:	e006      	b.n	80016a4 <HAL_GPIO_Init+0x244>
 8001696:	2303      	movs	r3, #3
 8001698:	e004      	b.n	80016a4 <HAL_GPIO_Init+0x244>
 800169a:	2302      	movs	r3, #2
 800169c:	e002      	b.n	80016a4 <HAL_GPIO_Init+0x244>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <HAL_GPIO_Init+0x244>
 80016a2:	2300      	movs	r3, #0
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	f002 0203 	and.w	r2, r2, #3
 80016aa:	0092      	lsls	r2, r2, #2
 80016ac:	4093      	lsls	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016b4:	4937      	ldr	r1, [pc, #220]	; (8001794 <HAL_GPIO_Init+0x334>)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	3302      	adds	r3, #2
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <HAL_GPIO_Init+0x350>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016e6:	4a32      	ldr	r2, [pc, #200]	; (80017b0 <HAL_GPIO_Init+0x350>)
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016ec:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <HAL_GPIO_Init+0x350>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001710:	4a27      	ldr	r2, [pc, #156]	; (80017b0 <HAL_GPIO_Init+0x350>)
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001716:	4b26      	ldr	r3, [pc, #152]	; (80017b0 <HAL_GPIO_Init+0x350>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	43db      	mvns	r3, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800173a:	4a1d      	ldr	r2, [pc, #116]	; (80017b0 <HAL_GPIO_Init+0x350>)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001740:	4b1b      	ldr	r3, [pc, #108]	; (80017b0 <HAL_GPIO_Init+0x350>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001764:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <HAL_GPIO_Init+0x350>)
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa22 f303 	lsr.w	r3, r2, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	f47f ae78 	bne.w	8001470 <HAL_GPIO_Init+0x10>
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	371c      	adds	r7, #28
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000
 8001794:	40010000 	.word	0x40010000
 8001798:	48000400 	.word	0x48000400
 800179c:	48000800 	.word	0x48000800
 80017a0:	48000c00 	.word	0x48000c00
 80017a4:	48001000 	.word	0x48001000
 80017a8:	48001400 	.word	0x48001400
 80017ac:	48001800 	.word	0x48001800
 80017b0:	40010400 	.word	0x40010400

080017b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017c0:	695a      	ldr	r2, [r3, #20]
 80017c2:	88fb      	ldrh	r3, [r7, #6]
 80017c4:	4013      	ands	r3, r2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff f814 	bl	8000800 <HAL_GPIO_EXTI_Callback>
  }
}
 80017d8:	bf00      	nop
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40010400 	.word	0x40010400

080017e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_PWREx_GetVoltageRange+0x18>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40007000 	.word	0x40007000

08001800 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800180e:	d130      	bne.n	8001872 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001810:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800181c:	d038      	beq.n	8001890 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001826:	4a1e      	ldr	r2, [pc, #120]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001828:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800182e:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2232      	movs	r2, #50	; 0x32
 8001834:	fb02 f303 	mul.w	r3, r2, r3
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	0c9b      	lsrs	r3, r3, #18
 8001840:	3301      	adds	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001844:	e002      	b.n	800184c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	3b01      	subs	r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001858:	d102      	bne.n	8001860 <HAL_PWREx_ControlVoltageScaling+0x60>
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f2      	bne.n	8001846 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800186c:	d110      	bne.n	8001890 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e00f      	b.n	8001892 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800187a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800187e:	d007      	beq.n	8001890 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001888:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800188e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40007000 	.word	0x40007000
 80018a4:	20000030 	.word	0x20000030
 80018a8:	431bde83 	.word	0x431bde83

080018ac <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e3ca      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018be:	4b97      	ldr	r3, [pc, #604]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018c8:	4b94      	ldr	r3, [pc, #592]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80e4 	beq.w	8001aa8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d007      	beq.n	80018f6 <HAL_RCC_OscConfig+0x4a>
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2b0c      	cmp	r3, #12
 80018ea:	f040 808b 	bne.w	8001a04 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	f040 8087 	bne.w	8001a04 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018f6:	4b89      	ldr	r3, [pc, #548]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d005      	beq.n	800190e <HAL_RCC_OscConfig+0x62>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e3a2      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1a      	ldr	r2, [r3, #32]
 8001912:	4b82      	ldr	r3, [pc, #520]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d004      	beq.n	8001928 <HAL_RCC_OscConfig+0x7c>
 800191e:	4b7f      	ldr	r3, [pc, #508]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001926:	e005      	b.n	8001934 <HAL_RCC_OscConfig+0x88>
 8001928:	4b7c      	ldr	r3, [pc, #496]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 800192a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192e:	091b      	lsrs	r3, r3, #4
 8001930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001934:	4293      	cmp	r3, r2
 8001936:	d223      	bcs.n	8001980 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	4618      	mov	r0, r3
 800193e:	f000 fd55 	bl	80023ec <RCC_SetFlashLatencyFromMSIRange>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e383      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800194c:	4b73      	ldr	r3, [pc, #460]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a72      	ldr	r2, [pc, #456]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001952:	f043 0308 	orr.w	r3, r3, #8
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	4b70      	ldr	r3, [pc, #448]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a1b      	ldr	r3, [r3, #32]
 8001964:	496d      	ldr	r1, [pc, #436]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800196a:	4b6c      	ldr	r3, [pc, #432]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	4968      	ldr	r1, [pc, #416]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]
 800197e:	e025      	b.n	80019cc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a65      	ldr	r2, [pc, #404]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001986:	f043 0308 	orr.w	r3, r3, #8
 800198a:	6013      	str	r3, [r2, #0]
 800198c:	4b63      	ldr	r3, [pc, #396]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4960      	ldr	r1, [pc, #384]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 800199a:	4313      	orrs	r3, r2
 800199c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800199e:	4b5f      	ldr	r3, [pc, #380]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	495b      	ldr	r1, [pc, #364]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d109      	bne.n	80019cc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fd15 	bl	80023ec <RCC_SetFlashLatencyFromMSIRange>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e343      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019cc:	f000 fc4a 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b52      	ldr	r3, [pc, #328]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	f003 030f 	and.w	r3, r3, #15
 80019dc:	4950      	ldr	r1, [pc, #320]	; (8001b20 <HAL_RCC_OscConfig+0x274>)
 80019de:	5ccb      	ldrb	r3, [r1, r3]
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	4a4e      	ldr	r2, [pc, #312]	; (8001b24 <HAL_RCC_OscConfig+0x278>)
 80019ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019ec:	4b4e      	ldr	r3, [pc, #312]	; (8001b28 <HAL_RCC_OscConfig+0x27c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff f97b 	bl	8000cec <HAL_InitTick>
 80019f6:	4603      	mov	r3, r0
 80019f8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d052      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a00:	7bfb      	ldrb	r3, [r7, #15]
 8001a02:	e327      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d032      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a0c:	4b43      	ldr	r3, [pc, #268]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a42      	ldr	r2, [pc, #264]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a18:	f7ff f9b8 	bl	8000d8c <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a20:	f7ff f9b4 	bl	8000d8c <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e310      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a32:	4b3a      	ldr	r3, [pc, #232]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a3e:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a36      	ldr	r2, [pc, #216]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001a44:	f043 0308 	orr.w	r3, r3, #8
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b34      	ldr	r3, [pc, #208]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a1b      	ldr	r3, [r3, #32]
 8001a56:	4931      	ldr	r1, [pc, #196]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a5c:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	021b      	lsls	r3, r3, #8
 8001a6a:	492c      	ldr	r1, [pc, #176]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
 8001a70:	e01a      	b.n	8001aa8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a72:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a29      	ldr	r2, [pc, #164]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001a78:	f023 0301 	bic.w	r3, r3, #1
 8001a7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a7e:	f7ff f985 	bl	8000d8c <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a86:	f7ff f981 	bl	8000d8c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e2dd      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a98:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1f0      	bne.n	8001a86 <HAL_RCC_OscConfig+0x1da>
 8001aa4:	e000      	b.n	8001aa8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001aa6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d074      	beq.n	8001b9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2b08      	cmp	r3, #8
 8001ab8:	d005      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x21a>
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	2b0c      	cmp	r3, #12
 8001abe:	d10e      	bne.n	8001ade <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d10b      	bne.n	8001ade <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d064      	beq.n	8001b9c <HAL_RCC_OscConfig+0x2f0>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d160      	bne.n	8001b9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e2ba      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x24a>
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0b      	ldr	r2, [pc, #44]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	e026      	b.n	8001b44 <HAL_RCC_OscConfig+0x298>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001afe:	d115      	bne.n	8001b2c <HAL_RCC_OscConfig+0x280>
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b03      	ldr	r3, [pc, #12]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a02      	ldr	r2, [pc, #8]	; (8001b1c <HAL_RCC_OscConfig+0x270>)
 8001b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	e014      	b.n	8001b44 <HAL_RCC_OscConfig+0x298>
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	080057f4 	.word	0x080057f4
 8001b24:	20000030 	.word	0x20000030
 8001b28:	20000034 	.word	0x20000034
 8001b2c:	4ba0      	ldr	r3, [pc, #640]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a9f      	ldr	r2, [pc, #636]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b9d      	ldr	r3, [pc, #628]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a9c      	ldr	r2, [pc, #624]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d013      	beq.n	8001b74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff f91e 	bl	8000d8c <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b54:	f7ff f91a 	bl	8000d8c <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b64      	cmp	r3, #100	; 0x64
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e276      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b66:	4b92      	ldr	r3, [pc, #584]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x2a8>
 8001b72:	e014      	b.n	8001b9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff f90a 	bl	8000d8c <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff f906 	bl	8000d8c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e262      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b8e:	4b88      	ldr	r3, [pc, #544]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x2d0>
 8001b9a:	e000      	b.n	8001b9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d060      	beq.n	8001c6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d005      	beq.n	8001bbc <HAL_RCC_OscConfig+0x310>
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2b0c      	cmp	r3, #12
 8001bb4:	d119      	bne.n	8001bea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d116      	bne.n	8001bea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bbc:	4b7c      	ldr	r3, [pc, #496]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x328>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e23f      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd4:	4b76      	ldr	r3, [pc, #472]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691b      	ldr	r3, [r3, #16]
 8001be0:	061b      	lsls	r3, r3, #24
 8001be2:	4973      	ldr	r1, [pc, #460]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001be8:	e040      	b.n	8001c6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d023      	beq.n	8001c3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf2:	4b6f      	ldr	r3, [pc, #444]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a6e      	ldr	r2, [pc, #440]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfe:	f7ff f8c5 	bl	8000d8c <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff f8c1 	bl	8000d8c <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e21d      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c18:	4b65      	ldr	r3, [pc, #404]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	4b62      	ldr	r3, [pc, #392]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	691b      	ldr	r3, [r3, #16]
 8001c30:	061b      	lsls	r3, r3, #24
 8001c32:	495f      	ldr	r1, [pc, #380]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
 8001c38:	e018      	b.n	8001c6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b5d      	ldr	r3, [pc, #372]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a5c      	ldr	r2, [pc, #368]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7ff f8a1 	bl	8000d8c <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4e:	f7ff f89d 	bl	8000d8c <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e1f9      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c60:	4b53      	ldr	r3, [pc, #332]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d03c      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01c      	beq.n	8001cba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c80:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c86:	4a4a      	ldr	r2, [pc, #296]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c90:	f7ff f87c 	bl	8000d8c <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c98:	f7ff f878 	bl	8000d8c <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e1d4      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001caa:	4b41      	ldr	r3, [pc, #260]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0ef      	beq.n	8001c98 <HAL_RCC_OscConfig+0x3ec>
 8001cb8:	e01b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cba:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc0:	4a3b      	ldr	r2, [pc, #236]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	f023 0301 	bic.w	r3, r3, #1
 8001cc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cca:	f7ff f85f 	bl	8000d8c <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd2:	f7ff f85b 	bl	8000d8c <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e1b7      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce4:	4b32      	ldr	r3, [pc, #200]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1ef      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80a6 	beq.w	8001e4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d00:	2300      	movs	r3, #0
 8001d02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d04:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10d      	bne.n	8001d2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d10:	4b27      	ldr	r3, [pc, #156]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d24:	60bb      	str	r3, [r7, #8]
 8001d26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <HAL_RCC_OscConfig+0x508>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d118      	bne.n	8001d6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d38:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <HAL_RCC_OscConfig+0x508>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1d      	ldr	r2, [pc, #116]	; (8001db4 <HAL_RCC_OscConfig+0x508>)
 8001d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d44:	f7ff f822 	bl	8000d8c <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d4c:	f7ff f81e 	bl	8000d8c <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e17a      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_RCC_OscConfig+0x508>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d108      	bne.n	8001d84 <HAL_RCC_OscConfig+0x4d8>
 8001d72:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d78:	4a0d      	ldr	r2, [pc, #52]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d82:	e029      	b.n	8001dd8 <HAL_RCC_OscConfig+0x52c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b05      	cmp	r3, #5
 8001d8a:	d115      	bne.n	8001db8 <HAL_RCC_OscConfig+0x50c>
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d92:	4a07      	ldr	r2, [pc, #28]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001d94:	f043 0304 	orr.w	r3, r3, #4
 8001d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da2:	4a03      	ldr	r2, [pc, #12]	; (8001db0 <HAL_RCC_OscConfig+0x504>)
 8001da4:	f043 0301 	orr.w	r3, r3, #1
 8001da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dac:	e014      	b.n	8001dd8 <HAL_RCC_OscConfig+0x52c>
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40007000 	.word	0x40007000
 8001db8:	4b9c      	ldr	r3, [pc, #624]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbe:	4a9b      	ldr	r2, [pc, #620]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc8:	4b98      	ldr	r3, [pc, #608]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dce:	4a97      	ldr	r2, [pc, #604]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d016      	beq.n	8001e0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de0:	f7fe ffd4 	bl	8000d8c <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de8:	f7fe ffd0 	bl	8000d8c <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e12a      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfe:	4b8b      	ldr	r3, [pc, #556]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0ed      	beq.n	8001de8 <HAL_RCC_OscConfig+0x53c>
 8001e0c:	e015      	b.n	8001e3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0e:	f7fe ffbd 	bl	8000d8c <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e14:	e00a      	b.n	8001e2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e16:	f7fe ffb9 	bl	8000d8c <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e113      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e2c:	4b7f      	ldr	r3, [pc, #508]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1ed      	bne.n	8001e16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e3a:	7ffb      	ldrb	r3, [r7, #31]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d105      	bne.n	8001e4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e40:	4b7a      	ldr	r3, [pc, #488]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	4a79      	ldr	r2, [pc, #484]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 80fe 	beq.w	8002052 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	f040 80d0 	bne.w	8002000 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e60:	4b72      	ldr	r3, [pc, #456]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f003 0203 	and.w	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d130      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d127      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e90:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d11f      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ea0:	2a07      	cmp	r2, #7
 8001ea2:	bf14      	ite	ne
 8001ea4:	2201      	movne	r2, #1
 8001ea6:	2200      	moveq	r2, #0
 8001ea8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d113      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb8:	085b      	lsrs	r3, r3, #1
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d109      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d06e      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2b0c      	cmp	r3, #12
 8001eda:	d069      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001edc:	4b53      	ldr	r3, [pc, #332]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ee8:	4b50      	ldr	r3, [pc, #320]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0ad      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ef8:	4b4c      	ldr	r3, [pc, #304]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a4b      	ldr	r2, [pc, #300]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f02:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f04:	f7fe ff42 	bl	8000d8c <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7fe ff3e 	bl	8000d8c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e09a      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f1e:	4b43      	ldr	r3, [pc, #268]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2a:	4b40      	ldr	r3, [pc, #256]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	4b40      	ldr	r3, [pc, #256]	; (8002030 <HAL_RCC_OscConfig+0x784>)
 8001f30:	4013      	ands	r3, r2
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f3a:	3a01      	subs	r2, #1
 8001f3c:	0112      	lsls	r2, r2, #4
 8001f3e:	4311      	orrs	r1, r2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f44:	0212      	lsls	r2, r2, #8
 8001f46:	4311      	orrs	r1, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f4c:	0852      	lsrs	r2, r2, #1
 8001f4e:	3a01      	subs	r2, #1
 8001f50:	0552      	lsls	r2, r2, #21
 8001f52:	4311      	orrs	r1, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f58:	0852      	lsrs	r2, r2, #1
 8001f5a:	3a01      	subs	r2, #1
 8001f5c:	0652      	lsls	r2, r2, #25
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f64:	0912      	lsrs	r2, r2, #4
 8001f66:	0452      	lsls	r2, r2, #17
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	4930      	ldr	r1, [pc, #192]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f70:	4b2e      	ldr	r3, [pc, #184]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a2d      	ldr	r2, [pc, #180]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001f76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f7c:	4b2b      	ldr	r3, [pc, #172]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	4a2a      	ldr	r2, [pc, #168]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f88:	f7fe ff00 	bl	8000d8c <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f90:	f7fe fefc 	bl	8000d8c <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e058      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa2:	4b22      	ldr	r3, [pc, #136]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f0      	beq.n	8001f90 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fae:	e050      	b.n	8002052 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e04f      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d148      	bne.n	8002052 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a19      	ldr	r2, [pc, #100]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001fc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fcc:	4b17      	ldr	r3, [pc, #92]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4a16      	ldr	r2, [pc, #88]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fd8:	f7fe fed8 	bl	8000d8c <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe0:	f7fe fed4 	bl	8000d8c <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e030      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x734>
 8001ffe:	e028      	b.n	8002052 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b0c      	cmp	r3, #12
 8002004:	d023      	beq.n	800204e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002006:	4b09      	ldr	r3, [pc, #36]	; (800202c <HAL_RCC_OscConfig+0x780>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a08      	ldr	r2, [pc, #32]	; (800202c <HAL_RCC_OscConfig+0x780>)
 800200c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7fe febb 	bl	8000d8c <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002018:	e00c      	b.n	8002034 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201a:	f7fe feb7 	bl	8000d8c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d905      	bls.n	8002034 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e013      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
 800202c:	40021000 	.word	0x40021000
 8002030:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_RCC_OscConfig+0x7b0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1ec      	bne.n	800201a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002040:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_RCC_OscConfig+0x7b0>)
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	4905      	ldr	r1, [pc, #20]	; (800205c <HAL_RCC_OscConfig+0x7b0>)
 8002046:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_RCC_OscConfig+0x7b4>)
 8002048:	4013      	ands	r3, r2
 800204a:	60cb      	str	r3, [r1, #12]
 800204c:	e001      	b.n	8002052 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40021000 	.word	0x40021000
 8002060:	feeefffc 	.word	0xfeeefffc

08002064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e0e7      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002078:	4b75      	ldr	r3, [pc, #468]	; (8002250 <HAL_RCC_ClockConfig+0x1ec>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d910      	bls.n	80020a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002086:	4b72      	ldr	r3, [pc, #456]	; (8002250 <HAL_RCC_ClockConfig+0x1ec>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f023 0207 	bic.w	r2, r3, #7
 800208e:	4970      	ldr	r1, [pc, #448]	; (8002250 <HAL_RCC_ClockConfig+0x1ec>)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	4313      	orrs	r3, r2
 8002094:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002096:	4b6e      	ldr	r3, [pc, #440]	; (8002250 <HAL_RCC_ClockConfig+0x1ec>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d001      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0cf      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d010      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	4b66      	ldr	r3, [pc, #408]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d908      	bls.n	80020d6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c4:	4b63      	ldr	r3, [pc, #396]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	4960      	ldr	r1, [pc, #384]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d04c      	beq.n	800217c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ea:	4b5a      	ldr	r3, [pc, #360]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d121      	bne.n	800213a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0a6      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002102:	4b54      	ldr	r3, [pc, #336]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d115      	bne.n	800213a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e09a      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800211a:	4b4e      	ldr	r3, [pc, #312]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e08e      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800212a:	4b4a      	ldr	r3, [pc, #296]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e086      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800213a:	4b46      	ldr	r3, [pc, #280]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f023 0203 	bic.w	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4943      	ldr	r1, [pc, #268]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	4313      	orrs	r3, r2
 800214a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800214c:	f7fe fe1e 	bl	8000d8c <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002152:	e00a      	b.n	800216a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002154:	f7fe fe1a 	bl	8000d8c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e06e      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	4b3a      	ldr	r3, [pc, #232]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 020c 	and.w	r2, r3, #12
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	429a      	cmp	r2, r3
 800217a:	d1eb      	bne.n	8002154 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d010      	beq.n	80021aa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689a      	ldr	r2, [r3, #8]
 800218c:	4b31      	ldr	r3, [pc, #196]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002194:	429a      	cmp	r2, r3
 8002196:	d208      	bcs.n	80021aa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002198:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	492b      	ldr	r1, [pc, #172]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021aa:	4b29      	ldr	r3, [pc, #164]	; (8002250 <HAL_RCC_ClockConfig+0x1ec>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d210      	bcs.n	80021da <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b8:	4b25      	ldr	r3, [pc, #148]	; (8002250 <HAL_RCC_ClockConfig+0x1ec>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f023 0207 	bic.w	r2, r3, #7
 80021c0:	4923      	ldr	r1, [pc, #140]	; (8002250 <HAL_RCC_ClockConfig+0x1ec>)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c8:	4b21      	ldr	r3, [pc, #132]	; (8002250 <HAL_RCC_ClockConfig+0x1ec>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d001      	beq.n	80021da <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e036      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d008      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e6:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	4918      	ldr	r1, [pc, #96]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d009      	beq.n	8002218 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4910      	ldr	r1, [pc, #64]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 8002214:	4313      	orrs	r3, r2
 8002216:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002218:	f000 f824 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b0d      	ldr	r3, [pc, #52]	; (8002254 <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	091b      	lsrs	r3, r3, #4
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	490b      	ldr	r1, [pc, #44]	; (8002258 <HAL_RCC_ClockConfig+0x1f4>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
 8002234:	4a09      	ldr	r2, [pc, #36]	; (800225c <HAL_RCC_ClockConfig+0x1f8>)
 8002236:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002238:	4b09      	ldr	r3, [pc, #36]	; (8002260 <HAL_RCC_ClockConfig+0x1fc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe fd55 	bl	8000cec <HAL_InitTick>
 8002242:	4603      	mov	r3, r0
 8002244:	72fb      	strb	r3, [r7, #11]

  return status;
 8002246:	7afb      	ldrb	r3, [r7, #11]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40022000 	.word	0x40022000
 8002254:	40021000 	.word	0x40021000
 8002258:	080057f4 	.word	0x080057f4
 800225c:	20000030 	.word	0x20000030
 8002260:	20000034 	.word	0x20000034

08002264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	; 0x24
 8002268:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002272:	4b3e      	ldr	r3, [pc, #248]	; (800236c <HAL_RCC_GetSysClockFreq+0x108>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800227c:	4b3b      	ldr	r3, [pc, #236]	; (800236c <HAL_RCC_GetSysClockFreq+0x108>)
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x34>
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	2b0c      	cmp	r3, #12
 8002290:	d121      	bne.n	80022d6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d11e      	bne.n	80022d6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002298:	4b34      	ldr	r3, [pc, #208]	; (800236c <HAL_RCC_GetSysClockFreq+0x108>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022a4:	4b31      	ldr	r3, [pc, #196]	; (800236c <HAL_RCC_GetSysClockFreq+0x108>)
 80022a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022aa:	0a1b      	lsrs	r3, r3, #8
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	e005      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022b4:	4b2d      	ldr	r3, [pc, #180]	; (800236c <HAL_RCC_GetSysClockFreq+0x108>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	091b      	lsrs	r3, r3, #4
 80022ba:	f003 030f 	and.w	r3, r3, #15
 80022be:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022c0:	4a2b      	ldr	r2, [pc, #172]	; (8002370 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10d      	bne.n	80022ec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d4:	e00a      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d102      	bne.n	80022e2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022dc:	4b25      	ldr	r3, [pc, #148]	; (8002374 <HAL_RCC_GetSysClockFreq+0x110>)
 80022de:	61bb      	str	r3, [r7, #24]
 80022e0:	e004      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022e8:	4b23      	ldr	r3, [pc, #140]	; (8002378 <HAL_RCC_GetSysClockFreq+0x114>)
 80022ea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	2b0c      	cmp	r3, #12
 80022f0:	d134      	bne.n	800235c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022f2:	4b1e      	ldr	r3, [pc, #120]	; (800236c <HAL_RCC_GetSysClockFreq+0x108>)
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d003      	beq.n	800230a <HAL_RCC_GetSysClockFreq+0xa6>
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	2b03      	cmp	r3, #3
 8002306:	d003      	beq.n	8002310 <HAL_RCC_GetSysClockFreq+0xac>
 8002308:	e005      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800230a:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <HAL_RCC_GetSysClockFreq+0x110>)
 800230c:	617b      	str	r3, [r7, #20]
      break;
 800230e:	e005      	b.n	800231c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <HAL_RCC_GetSysClockFreq+0x114>)
 8002312:	617b      	str	r3, [r7, #20]
      break;
 8002314:	e002      	b.n	800231c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	617b      	str	r3, [r7, #20]
      break;
 800231a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_RCC_GetSysClockFreq+0x108>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	3301      	adds	r3, #1
 8002328:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800232a:	4b10      	ldr	r3, [pc, #64]	; (800236c <HAL_RCC_GetSysClockFreq+0x108>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	fb03 f202 	mul.w	r2, r3, r2
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002340:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002342:	4b0a      	ldr	r3, [pc, #40]	; (800236c <HAL_RCC_GetSysClockFreq+0x108>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	0e5b      	lsrs	r3, r3, #25
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	3301      	adds	r3, #1
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	fbb2 f3f3 	udiv	r3, r2, r3
 800235a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800235c:	69bb      	ldr	r3, [r7, #24]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	; 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	0800580c 	.word	0x0800580c
 8002374:	00f42400 	.word	0x00f42400
 8002378:	007a1200 	.word	0x007a1200

0800237c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <HAL_RCC_GetHCLKFreq+0x14>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	20000030 	.word	0x20000030

08002394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002398:	f7ff fff0 	bl	800237c <HAL_RCC_GetHCLKFreq>
 800239c:	4602      	mov	r2, r0
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	4904      	ldr	r1, [pc, #16]	; (80023bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80023aa:	5ccb      	ldrb	r3, [r1, r3]
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40021000 	.word	0x40021000
 80023bc:	08005804 	.word	0x08005804

080023c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023c4:	f7ff ffda 	bl	800237c <HAL_RCC_GetHCLKFreq>
 80023c8:	4602      	mov	r2, r0
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	0adb      	lsrs	r3, r3, #11
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	4904      	ldr	r1, [pc, #16]	; (80023e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023d6:	5ccb      	ldrb	r3, [r1, r3]
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08005804 	.word	0x08005804

080023ec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023f4:	2300      	movs	r3, #0
 80023f6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023f8:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002404:	f7ff f9ee 	bl	80017e4 <HAL_PWREx_GetVoltageRange>
 8002408:	6178      	str	r0, [r7, #20]
 800240a:	e014      	b.n	8002436 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800240c:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	4a24      	ldr	r2, [pc, #144]	; (80024a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002416:	6593      	str	r3, [r2, #88]	; 0x58
 8002418:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800241a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002424:	f7ff f9de 	bl	80017e4 <HAL_PWREx_GetVoltageRange>
 8002428:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002434:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800243c:	d10b      	bne.n	8002456 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b80      	cmp	r3, #128	; 0x80
 8002442:	d919      	bls.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2ba0      	cmp	r3, #160	; 0xa0
 8002448:	d902      	bls.n	8002450 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800244a:	2302      	movs	r3, #2
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	e013      	b.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002450:	2301      	movs	r3, #1
 8002452:	613b      	str	r3, [r7, #16]
 8002454:	e010      	b.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b80      	cmp	r3, #128	; 0x80
 800245a:	d902      	bls.n	8002462 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800245c:	2303      	movs	r3, #3
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	e00a      	b.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b80      	cmp	r3, #128	; 0x80
 8002466:	d102      	bne.n	800246e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002468:	2302      	movs	r3, #2
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	e004      	b.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b70      	cmp	r3, #112	; 0x70
 8002472:	d101      	bne.n	8002478 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002474:	2301      	movs	r3, #1
 8002476:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f023 0207 	bic.w	r2, r3, #7
 8002480:	4909      	ldr	r1, [pc, #36]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002488:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	429a      	cmp	r2, r3
 8002494:	d001      	beq.n	800249a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	40022000 	.word	0x40022000

080024ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024b4:	2300      	movs	r3, #0
 80024b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024b8:	2300      	movs	r3, #0
 80024ba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d041      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024d0:	d02a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80024d6:	d824      	bhi.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024dc:	d008      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80024de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024e2:	d81e      	bhi.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x52>
 80024e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ec:	d010      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80024ee:	e018      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024f0:	4b86      	ldr	r3, [pc, #536]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4a85      	ldr	r2, [pc, #532]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024fc:	e015      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3304      	adds	r3, #4
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f000 fabb 	bl	8002a80 <RCCEx_PLLSAI1_Config>
 800250a:	4603      	mov	r3, r0
 800250c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800250e:	e00c      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3320      	adds	r3, #32
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f000 fba6 	bl	8002c68 <RCCEx_PLLSAI2_Config>
 800251c:	4603      	mov	r3, r0
 800251e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002520:	e003      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	74fb      	strb	r3, [r7, #19]
      break;
 8002526:	e000      	b.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002528:	bf00      	nop
    }

    if(ret == HAL_OK)
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10b      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002530:	4b76      	ldr	r3, [pc, #472]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800253e:	4973      	ldr	r1, [pc, #460]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002546:	e001      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d041      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800255c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002560:	d02a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002562:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002566:	d824      	bhi.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800256c:	d008      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800256e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002572:	d81e      	bhi.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002574:	2b00      	cmp	r3, #0
 8002576:	d00a      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002578:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800257c:	d010      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800257e:	e018      	b.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002580:	4b62      	ldr	r3, [pc, #392]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4a61      	ldr	r2, [pc, #388]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800258c:	e015      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3304      	adds	r3, #4
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fa73 	bl	8002a80 <RCCEx_PLLSAI1_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800259e:	e00c      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3320      	adds	r3, #32
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 fb5e 	bl	8002c68 <RCCEx_PLLSAI2_Config>
 80025ac:	4603      	mov	r3, r0
 80025ae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025b0:	e003      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	74fb      	strb	r3, [r7, #19]
      break;
 80025b6:	e000      	b.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80025b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025ba:	7cfb      	ldrb	r3, [r7, #19]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10b      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025c0:	4b52      	ldr	r3, [pc, #328]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025ce:	494f      	ldr	r1, [pc, #316]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025d6:	e001      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80a0 	beq.w	800272a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025ee:	4b47      	ldr	r3, [pc, #284]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x152>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e000      	b.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80025fe:	2300      	movs	r3, #0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00d      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002604:	4b41      	ldr	r3, [pc, #260]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	4a40      	ldr	r2, [pc, #256]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800260e:	6593      	str	r3, [r2, #88]	; 0x58
 8002610:	4b3e      	ldr	r3, [pc, #248]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800261c:	2301      	movs	r3, #1
 800261e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002620:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a3a      	ldr	r2, [pc, #232]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800262a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800262c:	f7fe fbae 	bl	8000d8c <HAL_GetTick>
 8002630:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002632:	e009      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002634:	f7fe fbaa 	bl	8000d8c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d902      	bls.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	74fb      	strb	r3, [r7, #19]
        break;
 8002646:	e005      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002648:	4b31      	ldr	r3, [pc, #196]	; (8002710 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ef      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d15c      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800265a:	4b2c      	ldr	r3, [pc, #176]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002664:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01f      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	429a      	cmp	r2, r3
 8002676:	d019      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002678:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002682:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002684:	4b21      	ldr	r3, [pc, #132]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	4a20      	ldr	r2, [pc, #128]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269a:	4a1c      	ldr	r2, [pc, #112]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026a4:	4a19      	ldr	r2, [pc, #100]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d016      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b6:	f7fe fb69 	bl	8000d8c <HAL_GetTick>
 80026ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026bc:	e00b      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fe fb65 	bl	8000d8c <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d902      	bls.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	74fb      	strb	r3, [r7, #19]
            break;
 80026d4:	e006      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0ec      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80026e4:	7cfb      	ldrb	r3, [r7, #19]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ea:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fa:	4904      	ldr	r1, [pc, #16]	; (800270c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002702:	e009      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	74bb      	strb	r3, [r7, #18]
 8002708:	e006      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000
 8002710:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002714:	7cfb      	ldrb	r3, [r7, #19]
 8002716:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002718:	7c7b      	ldrb	r3, [r7, #17]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d105      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271e:	4b9e      	ldr	r3, [pc, #632]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	4a9d      	ldr	r2, [pc, #628]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002728:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002736:	4b98      	ldr	r3, [pc, #608]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273c:	f023 0203 	bic.w	r2, r3, #3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002744:	4994      	ldr	r1, [pc, #592]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002758:	4b8f      	ldr	r3, [pc, #572]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275e:	f023 020c 	bic.w	r2, r3, #12
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	498c      	ldr	r1, [pc, #560]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00a      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800277a:	4b87      	ldr	r3, [pc, #540]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002780:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	4983      	ldr	r1, [pc, #524]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	4313      	orrs	r3, r2
 800278c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0308 	and.w	r3, r3, #8
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800279c:	4b7e      	ldr	r3, [pc, #504]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	497b      	ldr	r1, [pc, #492]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00a      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80027be:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027cc:	4972      	ldr	r1, [pc, #456]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00a      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027e0:	4b6d      	ldr	r3, [pc, #436]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ee:	496a      	ldr	r1, [pc, #424]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00a      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002802:	4b65      	ldr	r3, [pc, #404]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002808:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002810:	4961      	ldr	r1, [pc, #388]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00a      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002824:	4b5c      	ldr	r3, [pc, #368]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002832:	4959      	ldr	r1, [pc, #356]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002834:	4313      	orrs	r3, r2
 8002836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00a      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002846:	4b54      	ldr	r3, [pc, #336]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002854:	4950      	ldr	r1, [pc, #320]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002868:	4b4b      	ldr	r3, [pc, #300]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800286a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002876:	4948      	ldr	r1, [pc, #288]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002878:	4313      	orrs	r3, r2
 800287a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800288a:	4b43      	ldr	r3, [pc, #268]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002890:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002898:	493f      	ldr	r1, [pc, #252]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d028      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028ac:	4b3a      	ldr	r3, [pc, #232]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ba:	4937      	ldr	r1, [pc, #220]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ca:	d106      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028cc:	4b32      	ldr	r3, [pc, #200]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a31      	ldr	r2, [pc, #196]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028d6:	60d3      	str	r3, [r2, #12]
 80028d8:	e011      	b.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028e2:	d10c      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3304      	adds	r3, #4
 80028e8:	2101      	movs	r1, #1
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f8c8 	bl	8002a80 <RCCEx_PLLSAI1_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80028fa:	7cfb      	ldrb	r3, [r7, #19]
 80028fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d028      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800290a:	4b23      	ldr	r3, [pc, #140]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002910:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	491f      	ldr	r1, [pc, #124]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002928:	d106      	bne.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800292a:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	4a1a      	ldr	r2, [pc, #104]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002934:	60d3      	str	r3, [r2, #12]
 8002936:	e011      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002940:	d10c      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3304      	adds	r3, #4
 8002946:	2101      	movs	r1, #1
 8002948:	4618      	mov	r0, r3
 800294a:	f000 f899 	bl	8002a80 <RCCEx_PLLSAI1_Config>
 800294e:	4603      	mov	r3, r0
 8002950:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002952:	7cfb      	ldrb	r3, [r7, #19]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002958:	7cfb      	ldrb	r3, [r7, #19]
 800295a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d02b      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002968:	4b0b      	ldr	r3, [pc, #44]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002976:	4908      	ldr	r1, [pc, #32]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002982:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002986:	d109      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002988:	4b03      	ldr	r3, [pc, #12]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a02      	ldr	r2, [pc, #8]	; (8002998 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002992:	60d3      	str	r3, [r2, #12]
 8002994:	e014      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002996:	bf00      	nop
 8002998:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029a4:	d10c      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	3304      	adds	r3, #4
 80029aa:	2101      	movs	r1, #1
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 f867 	bl	8002a80 <RCCEx_PLLSAI1_Config>
 80029b2:	4603      	mov	r3, r0
 80029b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029b6:	7cfb      	ldrb	r3, [r7, #19]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80029bc:	7cfb      	ldrb	r3, [r7, #19]
 80029be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d02f      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029da:	4928      	ldr	r1, [pc, #160]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029ea:	d10d      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	2102      	movs	r1, #2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 f844 	bl	8002a80 <RCCEx_PLLSAI1_Config>
 80029f8:	4603      	mov	r3, r0
 80029fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d014      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a02:	7cfb      	ldrb	r3, [r7, #19]
 8002a04:	74bb      	strb	r3, [r7, #18]
 8002a06:	e011      	b.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3320      	adds	r3, #32
 8002a16:	2102      	movs	r1, #2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f000 f925 	bl	8002c68 <RCCEx_PLLSAI2_Config>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a22:	7cfb      	ldrb	r3, [r7, #19]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a38:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a46:	490d      	ldr	r1, [pc, #52]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a6a:	4904      	ldr	r1, [pc, #16]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a72:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40021000 	.word	0x40021000

08002a80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a8e:	4b75      	ldr	r3, [pc, #468]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d018      	beq.n	8002acc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a9a:	4b72      	ldr	r3, [pc, #456]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0203 	and.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d10d      	bne.n	8002ac6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
       ||
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d009      	beq.n	8002ac6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ab2:	4b6c      	ldr	r3, [pc, #432]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	091b      	lsrs	r3, r3, #4
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d047      	beq.n	8002b56 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	73fb      	strb	r3, [r7, #15]
 8002aca:	e044      	b.n	8002b56 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d018      	beq.n	8002b06 <RCCEx_PLLSAI1_Config+0x86>
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d825      	bhi.n	8002b24 <RCCEx_PLLSAI1_Config+0xa4>
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d002      	beq.n	8002ae2 <RCCEx_PLLSAI1_Config+0x62>
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d009      	beq.n	8002af4 <RCCEx_PLLSAI1_Config+0x74>
 8002ae0:	e020      	b.n	8002b24 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ae2:	4b60      	ldr	r3, [pc, #384]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d11d      	bne.n	8002b2a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af2:	e01a      	b.n	8002b2a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002af4:	4b5b      	ldr	r3, [pc, #364]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d116      	bne.n	8002b2e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b04:	e013      	b.n	8002b2e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b06:	4b57      	ldr	r3, [pc, #348]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10f      	bne.n	8002b32 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b12:	4b54      	ldr	r3, [pc, #336]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b22:	e006      	b.n	8002b32 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	73fb      	strb	r3, [r7, #15]
      break;
 8002b28:	e004      	b.n	8002b34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b2a:	bf00      	nop
 8002b2c:	e002      	b.n	8002b34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b2e:	bf00      	nop
 8002b30:	e000      	b.n	8002b34 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b32:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b34:	7bfb      	ldrb	r3, [r7, #15]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10d      	bne.n	8002b56 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b3a:	4b4a      	ldr	r3, [pc, #296]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6819      	ldr	r1, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	430b      	orrs	r3, r1
 8002b50:	4944      	ldr	r1, [pc, #272]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d17d      	bne.n	8002c58 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b5c:	4b41      	ldr	r3, [pc, #260]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a40      	ldr	r2, [pc, #256]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b68:	f7fe f910 	bl	8000d8c <HAL_GetTick>
 8002b6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b6e:	e009      	b.n	8002b84 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b70:	f7fe f90c 	bl	8000d8c <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d902      	bls.n	8002b84 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	73fb      	strb	r3, [r7, #15]
        break;
 8002b82:	e005      	b.n	8002b90 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b84:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ef      	bne.n	8002b70 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d160      	bne.n	8002c58 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d111      	bne.n	8002bc0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b9c:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6892      	ldr	r2, [r2, #8]
 8002bac:	0211      	lsls	r1, r2, #8
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68d2      	ldr	r2, [r2, #12]
 8002bb2:	0912      	lsrs	r2, r2, #4
 8002bb4:	0452      	lsls	r2, r2, #17
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	492a      	ldr	r1, [pc, #168]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	610b      	str	r3, [r1, #16]
 8002bbe:	e027      	b.n	8002c10 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d112      	bne.n	8002bec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bc6:	4b27      	ldr	r3, [pc, #156]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6892      	ldr	r2, [r2, #8]
 8002bd6:	0211      	lsls	r1, r2, #8
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6912      	ldr	r2, [r2, #16]
 8002bdc:	0852      	lsrs	r2, r2, #1
 8002bde:	3a01      	subs	r2, #1
 8002be0:	0552      	lsls	r2, r2, #21
 8002be2:	430a      	orrs	r2, r1
 8002be4:	491f      	ldr	r1, [pc, #124]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	610b      	str	r3, [r1, #16]
 8002bea:	e011      	b.n	8002c10 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bec:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bf4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6892      	ldr	r2, [r2, #8]
 8002bfc:	0211      	lsls	r1, r2, #8
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6952      	ldr	r2, [r2, #20]
 8002c02:	0852      	lsrs	r2, r2, #1
 8002c04:	3a01      	subs	r2, #1
 8002c06:	0652      	lsls	r2, r2, #25
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	4916      	ldr	r1, [pc, #88]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a13      	ldr	r2, [pc, #76]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7fe f8b6 	bl	8000d8c <HAL_GetTick>
 8002c20:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c22:	e009      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c24:	f7fe f8b2 	bl	8000d8c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d902      	bls.n	8002c38 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	73fb      	strb	r3, [r7, #15]
          break;
 8002c36:	e005      	b.n	8002c44 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0ef      	beq.n	8002c24 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c4a:	4b06      	ldr	r3, [pc, #24]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4c:	691a      	ldr	r2, [r3, #16]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	4904      	ldr	r1, [pc, #16]	; (8002c64 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3710      	adds	r7, #16
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000

08002c68 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c76:	4b6a      	ldr	r3, [pc, #424]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d018      	beq.n	8002cb4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c82:	4b67      	ldr	r3, [pc, #412]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	f003 0203 	and.w	r2, r3, #3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d10d      	bne.n	8002cae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
       ||
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d009      	beq.n	8002cae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c9a:	4b61      	ldr	r3, [pc, #388]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	091b      	lsrs	r3, r3, #4
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	1c5a      	adds	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
       ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d047      	beq.n	8002d3e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	73fb      	strb	r3, [r7, #15]
 8002cb2:	e044      	b.n	8002d3e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d018      	beq.n	8002cee <RCCEx_PLLSAI2_Config+0x86>
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d825      	bhi.n	8002d0c <RCCEx_PLLSAI2_Config+0xa4>
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d002      	beq.n	8002cca <RCCEx_PLLSAI2_Config+0x62>
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d009      	beq.n	8002cdc <RCCEx_PLLSAI2_Config+0x74>
 8002cc8:	e020      	b.n	8002d0c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cca:	4b55      	ldr	r3, [pc, #340]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d11d      	bne.n	8002d12 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cda:	e01a      	b.n	8002d12 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cdc:	4b50      	ldr	r3, [pc, #320]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d116      	bne.n	8002d16 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cec:	e013      	b.n	8002d16 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cee:	4b4c      	ldr	r3, [pc, #304]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10f      	bne.n	8002d1a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002cfa:	4b49      	ldr	r3, [pc, #292]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d0a:	e006      	b.n	8002d1a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d10:	e004      	b.n	8002d1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d12:	bf00      	nop
 8002d14:	e002      	b.n	8002d1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d16:	bf00      	nop
 8002d18:	e000      	b.n	8002d1c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10d      	bne.n	8002d3e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d22:	4b3f      	ldr	r3, [pc, #252]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6819      	ldr	r1, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	430b      	orrs	r3, r1
 8002d38:	4939      	ldr	r1, [pc, #228]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d167      	bne.n	8002e14 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002d44:	4b36      	ldr	r3, [pc, #216]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a35      	ldr	r2, [pc, #212]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d50:	f7fe f81c 	bl	8000d8c <HAL_GetTick>
 8002d54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d56:	e009      	b.n	8002d6c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d58:	f7fe f818 	bl	8000d8c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d902      	bls.n	8002d6c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	73fb      	strb	r3, [r7, #15]
        break;
 8002d6a:	e005      	b.n	8002d78 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d6c:	4b2c      	ldr	r3, [pc, #176]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1ef      	bne.n	8002d58 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d14a      	bne.n	8002e14 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d111      	bne.n	8002da8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d84:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6892      	ldr	r2, [r2, #8]
 8002d94:	0211      	lsls	r1, r2, #8
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68d2      	ldr	r2, [r2, #12]
 8002d9a:	0912      	lsrs	r2, r2, #4
 8002d9c:	0452      	lsls	r2, r2, #17
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	491f      	ldr	r1, [pc, #124]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	614b      	str	r3, [r1, #20]
 8002da6:	e011      	b.n	8002dcc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002da8:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002db0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6892      	ldr	r2, [r2, #8]
 8002db8:	0211      	lsls	r1, r2, #8
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6912      	ldr	r2, [r2, #16]
 8002dbe:	0852      	lsrs	r2, r2, #1
 8002dc0:	3a01      	subs	r2, #1
 8002dc2:	0652      	lsls	r2, r2, #25
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	4916      	ldr	r1, [pc, #88]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002dcc:	4b14      	ldr	r3, [pc, #80]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd8:	f7fd ffd8 	bl	8000d8c <HAL_GetTick>
 8002ddc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002dde:	e009      	b.n	8002df4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002de0:	f7fd ffd4 	bl	8000d8c <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d902      	bls.n	8002df4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	73fb      	strb	r3, [r7, #15]
          break;
 8002df2:	e005      	b.n	8002e00 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002df4:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0ef      	beq.n	8002de0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e06:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	4904      	ldr	r1, [pc, #16]	; (8002e20 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000

08002e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e049      	b.n	8002eca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fd fe2a 	bl	8000aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3304      	adds	r3, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4610      	mov	r0, r2
 8002e64:	f000 fa9a 	bl	800339c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d001      	beq.n	8002eec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e04f      	b.n	8002f8c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a23      	ldr	r2, [pc, #140]	; (8002f98 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d01d      	beq.n	8002f4a <HAL_TIM_Base_Start_IT+0x76>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f16:	d018      	beq.n	8002f4a <HAL_TIM_Base_Start_IT+0x76>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a1f      	ldr	r2, [pc, #124]	; (8002f9c <HAL_TIM_Base_Start_IT+0xc8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <HAL_TIM_Base_Start_IT+0x76>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00e      	beq.n	8002f4a <HAL_TIM_Base_Start_IT+0x76>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1c      	ldr	r2, [pc, #112]	; (8002fa4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d009      	beq.n	8002f4a <HAL_TIM_Base_Start_IT+0x76>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1b      	ldr	r2, [pc, #108]	; (8002fa8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d004      	beq.n	8002f4a <HAL_TIM_Base_Start_IT+0x76>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a19      	ldr	r2, [pc, #100]	; (8002fac <HAL_TIM_Base_Start_IT+0xd8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d115      	bne.n	8002f76 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	4b17      	ldr	r3, [pc, #92]	; (8002fb0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2b06      	cmp	r3, #6
 8002f5a:	d015      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0xb4>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f62:	d011      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f74:	e008      	b.n	8002f88 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 0201 	orr.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	e000      	b.n	8002f8a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40000400 	.word	0x40000400
 8002fa0:	40000800 	.word	0x40000800
 8002fa4:	40000c00 	.word	0x40000c00
 8002fa8:	40013400 	.word	0x40013400
 8002fac:	40014000 	.word	0x40014000
 8002fb0:	00010007 	.word	0x00010007

08002fb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d020      	beq.n	8003018 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01b      	beq.n	8003018 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0202 	mvn.w	r2, #2
 8002fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f9ad 	bl	800335e <HAL_TIM_IC_CaptureCallback>
 8003004:	e005      	b.n	8003012 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f99f 	bl	800334a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f9b0 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d020      	beq.n	8003064 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d01b      	beq.n	8003064 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0204 	mvn.w	r2, #4
 8003034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2202      	movs	r2, #2
 800303a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f987 	bl	800335e <HAL_TIM_IC_CaptureCallback>
 8003050:	e005      	b.n	800305e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f979 	bl	800334a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f98a 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d020      	beq.n	80030b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01b      	beq.n	80030b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0208 	mvn.w	r2, #8
 8003080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2204      	movs	r2, #4
 8003086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69db      	ldr	r3, [r3, #28]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f961 	bl	800335e <HAL_TIM_IC_CaptureCallback>
 800309c:	e005      	b.n	80030aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f953 	bl	800334a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f964 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d020      	beq.n	80030fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01b      	beq.n	80030fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0210 	mvn.w	r2, #16
 80030cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2208      	movs	r2, #8
 80030d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	69db      	ldr	r3, [r3, #28]
 80030da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d003      	beq.n	80030ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f93b 	bl	800335e <HAL_TIM_IC_CaptureCallback>
 80030e8:	e005      	b.n	80030f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f92d 	bl	800334a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f93e 	bl	8003372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00c      	beq.n	8003120 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d007      	beq.n	8003120 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0201 	mvn.w	r2, #1
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fd fbb2 	bl	8000884 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00c      	beq.n	8003144 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003130:	2b00      	cmp	r3, #0
 8003132:	d007      	beq.n	8003144 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800313c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 faf2 	bl	8003728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00c      	beq.n	8003168 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 faea 	bl	800373c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00c      	beq.n	800318c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d007      	beq.n	800318c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f8fd 	bl	8003386 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00c      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0220 	mvn.w	r2, #32
 80031a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fab2 	bl	8003714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_TIM_ConfigClockSource+0x1c>
 80031d0:	2302      	movs	r3, #2
 80031d2:	e0b6      	b.n	8003342 <HAL_TIM_ConfigClockSource+0x18a>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003210:	d03e      	beq.n	8003290 <HAL_TIM_ConfigClockSource+0xd8>
 8003212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003216:	f200 8087 	bhi.w	8003328 <HAL_TIM_ConfigClockSource+0x170>
 800321a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321e:	f000 8086 	beq.w	800332e <HAL_TIM_ConfigClockSource+0x176>
 8003222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003226:	d87f      	bhi.n	8003328 <HAL_TIM_ConfigClockSource+0x170>
 8003228:	2b70      	cmp	r3, #112	; 0x70
 800322a:	d01a      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0xaa>
 800322c:	2b70      	cmp	r3, #112	; 0x70
 800322e:	d87b      	bhi.n	8003328 <HAL_TIM_ConfigClockSource+0x170>
 8003230:	2b60      	cmp	r3, #96	; 0x60
 8003232:	d050      	beq.n	80032d6 <HAL_TIM_ConfigClockSource+0x11e>
 8003234:	2b60      	cmp	r3, #96	; 0x60
 8003236:	d877      	bhi.n	8003328 <HAL_TIM_ConfigClockSource+0x170>
 8003238:	2b50      	cmp	r3, #80	; 0x50
 800323a:	d03c      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0xfe>
 800323c:	2b50      	cmp	r3, #80	; 0x50
 800323e:	d873      	bhi.n	8003328 <HAL_TIM_ConfigClockSource+0x170>
 8003240:	2b40      	cmp	r3, #64	; 0x40
 8003242:	d058      	beq.n	80032f6 <HAL_TIM_ConfigClockSource+0x13e>
 8003244:	2b40      	cmp	r3, #64	; 0x40
 8003246:	d86f      	bhi.n	8003328 <HAL_TIM_ConfigClockSource+0x170>
 8003248:	2b30      	cmp	r3, #48	; 0x30
 800324a:	d064      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x15e>
 800324c:	2b30      	cmp	r3, #48	; 0x30
 800324e:	d86b      	bhi.n	8003328 <HAL_TIM_ConfigClockSource+0x170>
 8003250:	2b20      	cmp	r3, #32
 8003252:	d060      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x15e>
 8003254:	2b20      	cmp	r3, #32
 8003256:	d867      	bhi.n	8003328 <HAL_TIM_ConfigClockSource+0x170>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d05c      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x15e>
 800325c:	2b10      	cmp	r3, #16
 800325e:	d05a      	beq.n	8003316 <HAL_TIM_ConfigClockSource+0x15e>
 8003260:	e062      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003272:	f000 f9a7 	bl	80035c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	609a      	str	r2, [r3, #8]
      break;
 800328e:	e04f      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032a0:	f000 f990 	bl	80035c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032b2:	609a      	str	r2, [r3, #8]
      break;
 80032b4:	e03c      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c2:	461a      	mov	r2, r3
 80032c4:	f000 f904 	bl	80034d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2150      	movs	r1, #80	; 0x50
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f95d 	bl	800358e <TIM_ITRx_SetConfig>
      break;
 80032d4:	e02c      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032e2:	461a      	mov	r2, r3
 80032e4:	f000 f923 	bl	800352e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2160      	movs	r1, #96	; 0x60
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f94d 	bl	800358e <TIM_ITRx_SetConfig>
      break;
 80032f4:	e01c      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003302:	461a      	mov	r2, r3
 8003304:	f000 f8e4 	bl	80034d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2140      	movs	r1, #64	; 0x40
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f93d 	bl	800358e <TIM_ITRx_SetConfig>
      break;
 8003314:	e00c      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4619      	mov	r1, r3
 8003320:	4610      	mov	r0, r2
 8003322:	f000 f934 	bl	800358e <TIM_ITRx_SetConfig>
      break;
 8003326:	e003      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
      break;
 800332c:	e000      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800332e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003340:	7bfb      	ldrb	r3, [r7, #15]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
	...

0800339c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a40      	ldr	r2, [pc, #256]	; (80034b0 <TIM_Base_SetConfig+0x114>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d013      	beq.n	80033dc <TIM_Base_SetConfig+0x40>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ba:	d00f      	beq.n	80033dc <TIM_Base_SetConfig+0x40>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a3d      	ldr	r2, [pc, #244]	; (80034b4 <TIM_Base_SetConfig+0x118>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00b      	beq.n	80033dc <TIM_Base_SetConfig+0x40>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a3c      	ldr	r2, [pc, #240]	; (80034b8 <TIM_Base_SetConfig+0x11c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d007      	beq.n	80033dc <TIM_Base_SetConfig+0x40>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a3b      	ldr	r2, [pc, #236]	; (80034bc <TIM_Base_SetConfig+0x120>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d003      	beq.n	80033dc <TIM_Base_SetConfig+0x40>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a3a      	ldr	r2, [pc, #232]	; (80034c0 <TIM_Base_SetConfig+0x124>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d108      	bne.n	80033ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a2f      	ldr	r2, [pc, #188]	; (80034b0 <TIM_Base_SetConfig+0x114>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01f      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fc:	d01b      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a2c      	ldr	r2, [pc, #176]	; (80034b4 <TIM_Base_SetConfig+0x118>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d017      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a2b      	ldr	r2, [pc, #172]	; (80034b8 <TIM_Base_SetConfig+0x11c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d013      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a2a      	ldr	r2, [pc, #168]	; (80034bc <TIM_Base_SetConfig+0x120>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d00f      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a29      	ldr	r2, [pc, #164]	; (80034c0 <TIM_Base_SetConfig+0x124>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00b      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a28      	ldr	r2, [pc, #160]	; (80034c4 <TIM_Base_SetConfig+0x128>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d007      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a27      	ldr	r2, [pc, #156]	; (80034c8 <TIM_Base_SetConfig+0x12c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d003      	beq.n	8003436 <TIM_Base_SetConfig+0x9a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a26      	ldr	r2, [pc, #152]	; (80034cc <TIM_Base_SetConfig+0x130>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d108      	bne.n	8003448 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4313      	orrs	r3, r2
 8003454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68fa      	ldr	r2, [r7, #12]
 800345a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a10      	ldr	r2, [pc, #64]	; (80034b0 <TIM_Base_SetConfig+0x114>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d00f      	beq.n	8003494 <TIM_Base_SetConfig+0xf8>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a12      	ldr	r2, [pc, #72]	; (80034c0 <TIM_Base_SetConfig+0x124>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00b      	beq.n	8003494 <TIM_Base_SetConfig+0xf8>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a11      	ldr	r2, [pc, #68]	; (80034c4 <TIM_Base_SetConfig+0x128>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d007      	beq.n	8003494 <TIM_Base_SetConfig+0xf8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <TIM_Base_SetConfig+0x12c>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d003      	beq.n	8003494 <TIM_Base_SetConfig+0xf8>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a0f      	ldr	r2, [pc, #60]	; (80034cc <TIM_Base_SetConfig+0x130>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d103      	bne.n	800349c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	691a      	ldr	r2, [r3, #16]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	615a      	str	r2, [r3, #20]
}
 80034a2:	bf00      	nop
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40012c00 	.word	0x40012c00
 80034b4:	40000400 	.word	0x40000400
 80034b8:	40000800 	.word	0x40000800
 80034bc:	40000c00 	.word	0x40000c00
 80034c0:	40013400 	.word	0x40013400
 80034c4:	40014000 	.word	0x40014000
 80034c8:	40014400 	.word	0x40014400
 80034cc:	40014800 	.word	0x40014800

080034d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b087      	sub	sp, #28
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	f023 0201 	bic.w	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f023 030a 	bic.w	r3, r3, #10
 800350c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4313      	orrs	r3, r2
 8003514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	621a      	str	r2, [r3, #32]
}
 8003522:	bf00      	nop
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800352e:	b480      	push	{r7}
 8003530:	b087      	sub	sp, #28
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f023 0210 	bic.w	r2, r3, #16
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003558:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	031b      	lsls	r3, r3, #12
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800356a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	621a      	str	r2, [r3, #32]
}
 8003582:	bf00      	nop
 8003584:	371c      	adds	r7, #28
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800358e:	b480      	push	{r7}
 8003590:	b085      	sub	sp, #20
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035a6:	683a      	ldr	r2, [r7, #0]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f043 0307 	orr.w	r3, r3, #7
 80035b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	609a      	str	r2, [r3, #8]
}
 80035b8:	bf00      	nop
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	021a      	lsls	r2, r3, #8
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	609a      	str	r2, [r3, #8]
}
 80035f8:	bf00      	nop
 80035fa:	371c      	adds	r7, #28
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003614:	2b01      	cmp	r3, #1
 8003616:	d101      	bne.n	800361c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003618:	2302      	movs	r3, #2
 800361a:	e068      	b.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a2e      	ldr	r2, [pc, #184]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d004      	beq.n	8003650 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a2d      	ldr	r2, [pc, #180]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d108      	bne.n	8003662 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003656:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003668:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1e      	ldr	r2, [pc, #120]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d01d      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368e:	d018      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d013      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a1a      	ldr	r2, [pc, #104]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00e      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a18      	ldr	r2, [pc, #96]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a13      	ldr	r2, [pc, #76]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a14      	ldr	r2, [pc, #80]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d10c      	bne.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40013400 	.word	0x40013400
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800
 800370c:	40000c00 	.word	0x40000c00
 8003710:	40014000 	.word	0x40014000

08003714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e040      	b.n	80037e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f7fd f9bc 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2224      	movs	r2, #36	; 0x24
 800377c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 0201 	bic.w	r2, r2, #1
 800378c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003792:	2b00      	cmp	r3, #0
 8003794:	d002      	beq.n	800379c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fae0 	bl	8003d5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f825 	bl	80037ec <UART_SetConfig>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e01b      	b.n	80037e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0201 	orr.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fb5f 	bl	8003ea0 <UART_CheckIdleState>
 80037e2:	4603      	mov	r3, r0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f0:	b08a      	sub	sp, #40	; 0x28
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037f6:	2300      	movs	r3, #0
 80037f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	431a      	orrs	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	431a      	orrs	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	4313      	orrs	r3, r2
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4ba4      	ldr	r3, [pc, #656]	; (8003aac <UART_SetConfig+0x2c0>)
 800381c:	4013      	ands	r3, r2
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	6812      	ldr	r2, [r2, #0]
 8003822:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003824:	430b      	orrs	r3, r1
 8003826:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a99      	ldr	r2, [pc, #612]	; (8003ab0 <UART_SetConfig+0x2c4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d004      	beq.n	8003858 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003854:	4313      	orrs	r3, r2
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003868:	430a      	orrs	r2, r1
 800386a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a90      	ldr	r2, [pc, #576]	; (8003ab4 <UART_SetConfig+0x2c8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d126      	bne.n	80038c4 <UART_SetConfig+0xd8>
 8003876:	4b90      	ldr	r3, [pc, #576]	; (8003ab8 <UART_SetConfig+0x2cc>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f003 0303 	and.w	r3, r3, #3
 8003880:	2b03      	cmp	r3, #3
 8003882:	d81b      	bhi.n	80038bc <UART_SetConfig+0xd0>
 8003884:	a201      	add	r2, pc, #4	; (adr r2, 800388c <UART_SetConfig+0xa0>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	0800389d 	.word	0x0800389d
 8003890:	080038ad 	.word	0x080038ad
 8003894:	080038a5 	.word	0x080038a5
 8003898:	080038b5 	.word	0x080038b5
 800389c:	2301      	movs	r3, #1
 800389e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a2:	e116      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 80038a4:	2302      	movs	r3, #2
 80038a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038aa:	e112      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 80038ac:	2304      	movs	r3, #4
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b2:	e10e      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 80038b4:	2308      	movs	r3, #8
 80038b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ba:	e10a      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 80038bc:	2310      	movs	r3, #16
 80038be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038c2:	e106      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a7c      	ldr	r2, [pc, #496]	; (8003abc <UART_SetConfig+0x2d0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d138      	bne.n	8003940 <UART_SetConfig+0x154>
 80038ce:	4b7a      	ldr	r3, [pc, #488]	; (8003ab8 <UART_SetConfig+0x2cc>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	f003 030c 	and.w	r3, r3, #12
 80038d8:	2b0c      	cmp	r3, #12
 80038da:	d82d      	bhi.n	8003938 <UART_SetConfig+0x14c>
 80038dc:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <UART_SetConfig+0xf8>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	08003919 	.word	0x08003919
 80038e8:	08003939 	.word	0x08003939
 80038ec:	08003939 	.word	0x08003939
 80038f0:	08003939 	.word	0x08003939
 80038f4:	08003929 	.word	0x08003929
 80038f8:	08003939 	.word	0x08003939
 80038fc:	08003939 	.word	0x08003939
 8003900:	08003939 	.word	0x08003939
 8003904:	08003921 	.word	0x08003921
 8003908:	08003939 	.word	0x08003939
 800390c:	08003939 	.word	0x08003939
 8003910:	08003939 	.word	0x08003939
 8003914:	08003931 	.word	0x08003931
 8003918:	2300      	movs	r3, #0
 800391a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800391e:	e0d8      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003920:	2302      	movs	r3, #2
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003926:	e0d4      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003928:	2304      	movs	r3, #4
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392e:	e0d0      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003930:	2308      	movs	r3, #8
 8003932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003936:	e0cc      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003938:	2310      	movs	r3, #16
 800393a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800393e:	e0c8      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a5e      	ldr	r2, [pc, #376]	; (8003ac0 <UART_SetConfig+0x2d4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d125      	bne.n	8003996 <UART_SetConfig+0x1aa>
 800394a:	4b5b      	ldr	r3, [pc, #364]	; (8003ab8 <UART_SetConfig+0x2cc>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003950:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003954:	2b30      	cmp	r3, #48	; 0x30
 8003956:	d016      	beq.n	8003986 <UART_SetConfig+0x19a>
 8003958:	2b30      	cmp	r3, #48	; 0x30
 800395a:	d818      	bhi.n	800398e <UART_SetConfig+0x1a2>
 800395c:	2b20      	cmp	r3, #32
 800395e:	d00a      	beq.n	8003976 <UART_SetConfig+0x18a>
 8003960:	2b20      	cmp	r3, #32
 8003962:	d814      	bhi.n	800398e <UART_SetConfig+0x1a2>
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <UART_SetConfig+0x182>
 8003968:	2b10      	cmp	r3, #16
 800396a:	d008      	beq.n	800397e <UART_SetConfig+0x192>
 800396c:	e00f      	b.n	800398e <UART_SetConfig+0x1a2>
 800396e:	2300      	movs	r3, #0
 8003970:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003974:	e0ad      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003976:	2302      	movs	r3, #2
 8003978:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397c:	e0a9      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 800397e:	2304      	movs	r3, #4
 8003980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003984:	e0a5      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003986:	2308      	movs	r3, #8
 8003988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398c:	e0a1      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 800398e:	2310      	movs	r3, #16
 8003990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003994:	e09d      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a4a      	ldr	r2, [pc, #296]	; (8003ac4 <UART_SetConfig+0x2d8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d125      	bne.n	80039ec <UART_SetConfig+0x200>
 80039a0:	4b45      	ldr	r3, [pc, #276]	; (8003ab8 <UART_SetConfig+0x2cc>)
 80039a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039aa:	2bc0      	cmp	r3, #192	; 0xc0
 80039ac:	d016      	beq.n	80039dc <UART_SetConfig+0x1f0>
 80039ae:	2bc0      	cmp	r3, #192	; 0xc0
 80039b0:	d818      	bhi.n	80039e4 <UART_SetConfig+0x1f8>
 80039b2:	2b80      	cmp	r3, #128	; 0x80
 80039b4:	d00a      	beq.n	80039cc <UART_SetConfig+0x1e0>
 80039b6:	2b80      	cmp	r3, #128	; 0x80
 80039b8:	d814      	bhi.n	80039e4 <UART_SetConfig+0x1f8>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <UART_SetConfig+0x1d8>
 80039be:	2b40      	cmp	r3, #64	; 0x40
 80039c0:	d008      	beq.n	80039d4 <UART_SetConfig+0x1e8>
 80039c2:	e00f      	b.n	80039e4 <UART_SetConfig+0x1f8>
 80039c4:	2300      	movs	r3, #0
 80039c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ca:	e082      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 80039cc:	2302      	movs	r3, #2
 80039ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d2:	e07e      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 80039d4:	2304      	movs	r3, #4
 80039d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039da:	e07a      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 80039dc:	2308      	movs	r3, #8
 80039de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e2:	e076      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 80039e4:	2310      	movs	r3, #16
 80039e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ea:	e072      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a35      	ldr	r2, [pc, #212]	; (8003ac8 <UART_SetConfig+0x2dc>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d12a      	bne.n	8003a4c <UART_SetConfig+0x260>
 80039f6:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <UART_SetConfig+0x2cc>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a04:	d01a      	beq.n	8003a3c <UART_SetConfig+0x250>
 8003a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a0a:	d81b      	bhi.n	8003a44 <UART_SetConfig+0x258>
 8003a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a10:	d00c      	beq.n	8003a2c <UART_SetConfig+0x240>
 8003a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a16:	d815      	bhi.n	8003a44 <UART_SetConfig+0x258>
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d003      	beq.n	8003a24 <UART_SetConfig+0x238>
 8003a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a20:	d008      	beq.n	8003a34 <UART_SetConfig+0x248>
 8003a22:	e00f      	b.n	8003a44 <UART_SetConfig+0x258>
 8003a24:	2300      	movs	r3, #0
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2a:	e052      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a32:	e04e      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003a34:	2304      	movs	r3, #4
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3a:	e04a      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003a3c:	2308      	movs	r3, #8
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a42:	e046      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003a44:	2310      	movs	r3, #16
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4a:	e042      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a17      	ldr	r2, [pc, #92]	; (8003ab0 <UART_SetConfig+0x2c4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d13a      	bne.n	8003acc <UART_SetConfig+0x2e0>
 8003a56:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <UART_SetConfig+0x2cc>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a64:	d01a      	beq.n	8003a9c <UART_SetConfig+0x2b0>
 8003a66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a6a:	d81b      	bhi.n	8003aa4 <UART_SetConfig+0x2b8>
 8003a6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a70:	d00c      	beq.n	8003a8c <UART_SetConfig+0x2a0>
 8003a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a76:	d815      	bhi.n	8003aa4 <UART_SetConfig+0x2b8>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <UART_SetConfig+0x298>
 8003a7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a80:	d008      	beq.n	8003a94 <UART_SetConfig+0x2a8>
 8003a82:	e00f      	b.n	8003aa4 <UART_SetConfig+0x2b8>
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8a:	e022      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a92:	e01e      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003a94:	2304      	movs	r3, #4
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9a:	e01a      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa2:	e016      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aaa:	e012      	b.n	8003ad2 <UART_SetConfig+0x2e6>
 8003aac:	efff69f3 	.word	0xefff69f3
 8003ab0:	40008000 	.word	0x40008000
 8003ab4:	40013800 	.word	0x40013800
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40004400 	.word	0x40004400
 8003ac0:	40004800 	.word	0x40004800
 8003ac4:	40004c00 	.word	0x40004c00
 8003ac8:	40005000 	.word	0x40005000
 8003acc:	2310      	movs	r3, #16
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a9f      	ldr	r2, [pc, #636]	; (8003d54 <UART_SetConfig+0x568>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d17a      	bne.n	8003bd2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d824      	bhi.n	8003b2e <UART_SetConfig+0x342>
 8003ae4:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <UART_SetConfig+0x300>)
 8003ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aea:	bf00      	nop
 8003aec:	08003b11 	.word	0x08003b11
 8003af0:	08003b2f 	.word	0x08003b2f
 8003af4:	08003b19 	.word	0x08003b19
 8003af8:	08003b2f 	.word	0x08003b2f
 8003afc:	08003b1f 	.word	0x08003b1f
 8003b00:	08003b2f 	.word	0x08003b2f
 8003b04:	08003b2f 	.word	0x08003b2f
 8003b08:	08003b2f 	.word	0x08003b2f
 8003b0c:	08003b27 	.word	0x08003b27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b10:	f7fe fc40 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 8003b14:	61f8      	str	r0, [r7, #28]
        break;
 8003b16:	e010      	b.n	8003b3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b18:	4b8f      	ldr	r3, [pc, #572]	; (8003d58 <UART_SetConfig+0x56c>)
 8003b1a:	61fb      	str	r3, [r7, #28]
        break;
 8003b1c:	e00d      	b.n	8003b3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b1e:	f7fe fba1 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 8003b22:	61f8      	str	r0, [r7, #28]
        break;
 8003b24:	e009      	b.n	8003b3a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b2a:	61fb      	str	r3, [r7, #28]
        break;
 8003b2c:	e005      	b.n	8003b3a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80fb 	beq.w	8003d38 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4413      	add	r3, r2
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d305      	bcc.n	8003b5e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d903      	bls.n	8003b66 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b64:	e0e8      	b.n	8003d38 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	461c      	mov	r4, r3
 8003b6c:	4615      	mov	r5, r2
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	022b      	lsls	r3, r5, #8
 8003b78:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b7c:	0222      	lsls	r2, r4, #8
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	6849      	ldr	r1, [r1, #4]
 8003b82:	0849      	lsrs	r1, r1, #1
 8003b84:	2000      	movs	r0, #0
 8003b86:	4688      	mov	r8, r1
 8003b88:	4681      	mov	r9, r0
 8003b8a:	eb12 0a08 	adds.w	sl, r2, r8
 8003b8e:	eb43 0b09 	adc.w	fp, r3, r9
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	603b      	str	r3, [r7, #0]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ba0:	4650      	mov	r0, sl
 8003ba2:	4659      	mov	r1, fp
 8003ba4:	f7fc fb10 	bl	80001c8 <__aeabi_uldivmod>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4613      	mov	r3, r2
 8003bae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bb6:	d308      	bcc.n	8003bca <UART_SetConfig+0x3de>
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bbe:	d204      	bcs.n	8003bca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	60da      	str	r2, [r3, #12]
 8003bc8:	e0b6      	b.n	8003d38 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bd0:	e0b2      	b.n	8003d38 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bda:	d15e      	bne.n	8003c9a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003bdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d828      	bhi.n	8003c36 <UART_SetConfig+0x44a>
 8003be4:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <UART_SetConfig+0x400>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c11 	.word	0x08003c11
 8003bf0:	08003c19 	.word	0x08003c19
 8003bf4:	08003c21 	.word	0x08003c21
 8003bf8:	08003c37 	.word	0x08003c37
 8003bfc:	08003c27 	.word	0x08003c27
 8003c00:	08003c37 	.word	0x08003c37
 8003c04:	08003c37 	.word	0x08003c37
 8003c08:	08003c37 	.word	0x08003c37
 8003c0c:	08003c2f 	.word	0x08003c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c10:	f7fe fbc0 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 8003c14:	61f8      	str	r0, [r7, #28]
        break;
 8003c16:	e014      	b.n	8003c42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c18:	f7fe fbd2 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8003c1c:	61f8      	str	r0, [r7, #28]
        break;
 8003c1e:	e010      	b.n	8003c42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c20:	4b4d      	ldr	r3, [pc, #308]	; (8003d58 <UART_SetConfig+0x56c>)
 8003c22:	61fb      	str	r3, [r7, #28]
        break;
 8003c24:	e00d      	b.n	8003c42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c26:	f7fe fb1d 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 8003c2a:	61f8      	str	r0, [r7, #28]
        break;
 8003c2c:	e009      	b.n	8003c42 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c32:	61fb      	str	r3, [r7, #28]
        break;
 8003c34:	e005      	b.n	8003c42 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d077      	beq.n	8003d38 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	005a      	lsls	r2, r3, #1
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	441a      	add	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	2b0f      	cmp	r3, #15
 8003c62:	d916      	bls.n	8003c92 <UART_SetConfig+0x4a6>
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c6a:	d212      	bcs.n	8003c92 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f023 030f 	bic.w	r3, r3, #15
 8003c74:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	085b      	lsrs	r3, r3, #1
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	8afb      	ldrh	r3, [r7, #22]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	8afa      	ldrh	r2, [r7, #22]
 8003c8e:	60da      	str	r2, [r3, #12]
 8003c90:	e052      	b.n	8003d38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c98:	e04e      	b.n	8003d38 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d827      	bhi.n	8003cf2 <UART_SetConfig+0x506>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <UART_SetConfig+0x4bc>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003ccd 	.word	0x08003ccd
 8003cac:	08003cd5 	.word	0x08003cd5
 8003cb0:	08003cdd 	.word	0x08003cdd
 8003cb4:	08003cf3 	.word	0x08003cf3
 8003cb8:	08003ce3 	.word	0x08003ce3
 8003cbc:	08003cf3 	.word	0x08003cf3
 8003cc0:	08003cf3 	.word	0x08003cf3
 8003cc4:	08003cf3 	.word	0x08003cf3
 8003cc8:	08003ceb 	.word	0x08003ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ccc:	f7fe fb62 	bl	8002394 <HAL_RCC_GetPCLK1Freq>
 8003cd0:	61f8      	str	r0, [r7, #28]
        break;
 8003cd2:	e014      	b.n	8003cfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd4:	f7fe fb74 	bl	80023c0 <HAL_RCC_GetPCLK2Freq>
 8003cd8:	61f8      	str	r0, [r7, #28]
        break;
 8003cda:	e010      	b.n	8003cfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cdc:	4b1e      	ldr	r3, [pc, #120]	; (8003d58 <UART_SetConfig+0x56c>)
 8003cde:	61fb      	str	r3, [r7, #28]
        break;
 8003ce0:	e00d      	b.n	8003cfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce2:	f7fe fabf 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 8003ce6:	61f8      	str	r0, [r7, #28]
        break;
 8003ce8:	e009      	b.n	8003cfe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cee:	61fb      	str	r3, [r7, #28]
        break;
 8003cf0:	e005      	b.n	8003cfe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003cfc:	bf00      	nop
    }

    if (pclk != 0U)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d019      	beq.n	8003d38 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	085a      	lsrs	r2, r3, #1
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	441a      	add	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b0f      	cmp	r3, #15
 8003d1c:	d909      	bls.n	8003d32 <UART_SetConfig+0x546>
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d24:	d205      	bcs.n	8003d32 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60da      	str	r2, [r3, #12]
 8003d30:	e002      	b.n	8003d38 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003d44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3728      	adds	r7, #40	; 0x28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d52:	bf00      	nop
 8003d54:	40008000 	.word	0x40008000
 8003d58:	00f42400 	.word	0x00f42400

08003d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01a      	beq.n	8003e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e5a:	d10a      	bne.n	8003e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	605a      	str	r2, [r3, #4]
  }
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b098      	sub	sp, #96	; 0x60
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003eb0:	f7fc ff6c 	bl	8000d8c <HAL_GetTick>
 8003eb4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d12e      	bne.n	8003f22 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f88c 	bl	8003ff0 <UART_WaitOnFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d021      	beq.n	8003f22 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee6:	e853 3f00 	ldrex	r3, [r3]
 8003eea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003efc:	647b      	str	r3, [r7, #68]	; 0x44
 8003efe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f04:	e841 2300 	strex	r3, r2, [r1]
 8003f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1e6      	bne.n	8003ede <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2220      	movs	r2, #32
 8003f14:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e062      	b.n	8003fe8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d149      	bne.n	8003fc4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f856 	bl	8003ff0 <UART_WaitOnFlagUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d03c      	beq.n	8003fc4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	e853 3f00 	ldrex	r3, [r3]
 8003f56:	623b      	str	r3, [r7, #32]
   return(result);
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	461a      	mov	r2, r3
 8003f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f68:	633b      	str	r3, [r7, #48]	; 0x30
 8003f6a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f70:	e841 2300 	strex	r3, r2, [r1]
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1e6      	bne.n	8003f4a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	3308      	adds	r3, #8
 8003f82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3308      	adds	r3, #8
 8003f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f9c:	61fa      	str	r2, [r7, #28]
 8003f9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	69b9      	ldr	r1, [r7, #24]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e5      	bne.n	8003f7c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	e011      	b.n	8003fe8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3758      	adds	r7, #88	; 0x58
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004000:	e049      	b.n	8004096 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d045      	beq.n	8004096 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800400a:	f7fc febf 	bl	8000d8c <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <UART_WaitOnFlagUntilTimeout+0x30>
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e048      	b.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d031      	beq.n	8004096 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b08      	cmp	r3, #8
 800403e:	d110      	bne.n	8004062 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2208      	movs	r2, #8
 8004046:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 f838 	bl	80040be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2208      	movs	r2, #8
 8004052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e029      	b.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800406c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004070:	d111      	bne.n	8004096 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800407a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f81e 	bl	80040be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e00f      	b.n	80040b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	69da      	ldr	r2, [r3, #28]
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4013      	ands	r3, r2
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	bf0c      	ite	eq
 80040a6:	2301      	moveq	r3, #1
 80040a8:	2300      	movne	r3, #0
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	461a      	mov	r2, r3
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d0a6      	beq.n	8004002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040be:	b480      	push	{r7}
 80040c0:	b095      	sub	sp, #84	; 0x54
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ce:	e853 3f00 	ldrex	r3, [r3]
 80040d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	461a      	mov	r2, r3
 80040e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040e4:	643b      	str	r3, [r7, #64]	; 0x40
 80040e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040ec:	e841 2300 	strex	r3, r2, [r1]
 80040f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1e6      	bne.n	80040c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	3308      	adds	r3, #8
 80040fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	e853 3f00 	ldrex	r3, [r3]
 8004106:	61fb      	str	r3, [r7, #28]
   return(result);
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f023 0301 	bic.w	r3, r3, #1
 800410e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004118:	62fa      	str	r2, [r7, #44]	; 0x2c
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800411e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004120:	e841 2300 	strex	r3, r2, [r1]
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e5      	bne.n	80040f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004130:	2b01      	cmp	r3, #1
 8004132:	d118      	bne.n	8004166 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	60bb      	str	r3, [r7, #8]
   return(result);
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f023 0310 	bic.w	r3, r3, #16
 8004148:	647b      	str	r3, [r7, #68]	; 0x44
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	461a      	mov	r2, r3
 8004150:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004156:	6979      	ldr	r1, [r7, #20]
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	e841 2300 	strex	r3, r2, [r1]
 800415e:	613b      	str	r3, [r7, #16]
   return(result);
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1e6      	bne.n	8004134 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	669a      	str	r2, [r3, #104]	; 0x68
}
 800417a:	bf00      	nop
 800417c:	3754      	adds	r7, #84	; 0x54
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <memset>:
 8004186:	4402      	add	r2, r0
 8004188:	4603      	mov	r3, r0
 800418a:	4293      	cmp	r3, r2
 800418c:	d100      	bne.n	8004190 <memset+0xa>
 800418e:	4770      	bx	lr
 8004190:	f803 1b01 	strb.w	r1, [r3], #1
 8004194:	e7f9      	b.n	800418a <memset+0x4>
	...

08004198 <__libc_init_array>:
 8004198:	b570      	push	{r4, r5, r6, lr}
 800419a:	4d0d      	ldr	r5, [pc, #52]	; (80041d0 <__libc_init_array+0x38>)
 800419c:	4c0d      	ldr	r4, [pc, #52]	; (80041d4 <__libc_init_array+0x3c>)
 800419e:	1b64      	subs	r4, r4, r5
 80041a0:	10a4      	asrs	r4, r4, #2
 80041a2:	2600      	movs	r6, #0
 80041a4:	42a6      	cmp	r6, r4
 80041a6:	d109      	bne.n	80041bc <__libc_init_array+0x24>
 80041a8:	4d0b      	ldr	r5, [pc, #44]	; (80041d8 <__libc_init_array+0x40>)
 80041aa:	4c0c      	ldr	r4, [pc, #48]	; (80041dc <__libc_init_array+0x44>)
 80041ac:	f000 f818 	bl	80041e0 <_init>
 80041b0:	1b64      	subs	r4, r4, r5
 80041b2:	10a4      	asrs	r4, r4, #2
 80041b4:	2600      	movs	r6, #0
 80041b6:	42a6      	cmp	r6, r4
 80041b8:	d105      	bne.n	80041c6 <__libc_init_array+0x2e>
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c0:	4798      	blx	r3
 80041c2:	3601      	adds	r6, #1
 80041c4:	e7ee      	b.n	80041a4 <__libc_init_array+0xc>
 80041c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ca:	4798      	blx	r3
 80041cc:	3601      	adds	r6, #1
 80041ce:	e7f2      	b.n	80041b6 <__libc_init_array+0x1e>
 80041d0:	08005844 	.word	0x08005844
 80041d4:	08005844 	.word	0x08005844
 80041d8:	08005844 	.word	0x08005844
 80041dc:	08005848 	.word	0x08005848

080041e0 <_init>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	bf00      	nop
 80041e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e6:	bc08      	pop	{r3}
 80041e8:	469e      	mov	lr, r3
 80041ea:	4770      	bx	lr

080041ec <_fini>:
 80041ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ee:	bf00      	nop
 80041f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f2:	bc08      	pop	{r3}
 80041f4:	469e      	mov	lr, r3
 80041f6:	4770      	bx	lr
