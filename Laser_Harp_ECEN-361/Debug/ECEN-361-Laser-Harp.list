
ECEN-361-Laser-Harp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003598  0800525c  0800525c  0001525c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087f4  080087f4  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  080087f4  080087f4  000187f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087fc  080087fc  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087fc  080087fc  000187fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008800  08008800  00018800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08008804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000003c  08008840  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08008840  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015e38  00000000  00000000  000200af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002baa  00000000  00000000  00035ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  00038a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f8d  00000000  00000000  00039e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002728c  00000000  00000000  0003adf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018430  00000000  00000000  00062081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3d50  00000000  00000000  0007a4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000545c  00000000  00000000  0016e204  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  00173660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005244 	.word	0x08005244

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08005244 	.word	0x08005244

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 feea 	bl	80012a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f816 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f962 	bl	8000798 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f930 	bl	8000738 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80004d8:	f000 f862 	bl	80005a0 <MX_DAC1_Init>
  MX_TIM15_Init();
 80004dc:	f000 f8dc 	bl	8000698 <MX_TIM15_Init>
  MX_I2C1_Init();
 80004e0:	f000 f89a 	bl	8000618 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim15); // Start the Music Interrupt Timer
 80004e4:	4803      	ldr	r0, [pc, #12]	; (80004f4 <main+0x30>)
 80004e6:	f003 f9d3 	bl	8003890 <HAL_TIM_Base_Start_IT>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2); // Start one of the dac channels
 80004ea:	2110      	movs	r1, #16
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <main+0x34>)
 80004ee:	f001 f8aa 	bl	8001646 <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <main+0x2e>
 80004f4:	200000c0 	.word	0x200000c0
 80004f8:	20000058 	.word	0x20000058

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b096      	sub	sp, #88	; 0x58
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	2244      	movs	r2, #68	; 0x44
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f004 fe6d 	bl	80051ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	463b      	mov	r3, r7
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800051e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000522:	f001 fe4b 	bl	80021bc <HAL_PWREx_ControlVoltageScaling>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d001      	beq.n	8000530 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800052c:	f000 fc94 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000530:	2302      	movs	r3, #2
 8000532:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000534:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000538:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053a:	2310      	movs	r3, #16
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000542:	2302      	movs	r3, #2
 8000544:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000546:	2301      	movs	r3, #1
 8000548:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800054a:	230a      	movs	r3, #10
 800054c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800054e:	2307      	movs	r3, #7
 8000550:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000552:	2302      	movs	r3, #2
 8000554:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000556:	2302      	movs	r3, #2
 8000558:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0314 	add.w	r3, r7, #20
 800055e:	4618      	mov	r0, r3
 8000560:	f001 fe82 	bl	8002268 <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800056a:	f000 fc75 	bl	8000e58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2303      	movs	r3, #3
 8000574:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000582:	463b      	mov	r3, r7
 8000584:	2104      	movs	r1, #4
 8000586:	4618      	mov	r0, r3
 8000588:	f002 fa4a 	bl	8002a20 <HAL_RCC_ClockConfig>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000592:	f000 fc61 	bl	8000e58 <Error_Handler>
  }
}
 8000596:	bf00      	nop
 8000598:	3758      	adds	r7, #88	; 0x58
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2224      	movs	r2, #36	; 0x24
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f004 fe1c 	bl	80051ea <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005b2:	4b17      	ldr	r3, [pc, #92]	; (8000610 <MX_DAC1_Init+0x70>)
 80005b4:	4a17      	ldr	r2, [pc, #92]	; (8000614 <MX_DAC1_Init+0x74>)
 80005b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005b8:	4815      	ldr	r0, [pc, #84]	; (8000610 <MX_DAC1_Init+0x70>)
 80005ba:	f001 f822 	bl	8001602 <HAL_DAC_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005c4:	f000 fc48 	bl	8000e58 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	4619      	mov	r1, r3
 80005e2:	480b      	ldr	r0, [pc, #44]	; (8000610 <MX_DAC1_Init+0x70>)
 80005e4:	f001 f905 	bl	80017f2 <HAL_DAC_ConfigChannel>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005ee:	f000 fc33 	bl	8000e58 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2210      	movs	r2, #16
 80005f6:	4619      	mov	r1, r3
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_DAC1_Init+0x70>)
 80005fa:	f001 f8fa 	bl	80017f2 <HAL_DAC_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000604:	f000 fc28 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	3728      	adds	r7, #40	; 0x28
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000058 	.word	0x20000058
 8000614:	40007400 	.word	0x40007400

08000618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_I2C1_Init+0x74>)
 800061e:	4a1c      	ldr	r2, [pc, #112]	; (8000690 <MX_I2C1_Init+0x78>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_I2C1_Init+0x74>)
 8000624:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <MX_I2C1_Init+0x7c>)
 8000626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000628:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_I2C1_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_I2C1_Init+0x74>)
 8000630:	2201      	movs	r2, #1
 8000632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_I2C1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_I2C1_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_I2C1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_I2C1_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000652:	480e      	ldr	r0, [pc, #56]	; (800068c <MX_I2C1_Init+0x74>)
 8000654:	f001 fc72 	bl	8001f3c <HAL_I2C_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800065e:	f000 fbfb 	bl	8000e58 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000662:	2100      	movs	r1, #0
 8000664:	4809      	ldr	r0, [pc, #36]	; (800068c <MX_I2C1_Init+0x74>)
 8000666:	f001 fd04 	bl	8002072 <HAL_I2CEx_ConfigAnalogFilter>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000670:	f000 fbf2 	bl	8000e58 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000674:	2100      	movs	r1, #0
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_I2C1_Init+0x74>)
 8000678:	f001 fd46 	bl	8002108 <HAL_I2CEx_ConfigDigitalFilter>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000682:	f000 fbe9 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	2000006c 	.word	0x2000006c
 8000690:	40005400 	.word	0x40005400
 8000694:	10909cec 	.word	0x10909cec

08000698 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80006b6:	4b1e      	ldr	r3, [pc, #120]	; (8000730 <MX_TIM15_Init+0x98>)
 80006b8:	4a1e      	ldr	r2, [pc, #120]	; (8000734 <MX_TIM15_Init+0x9c>)
 80006ba:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_TIM15_Init+0x98>)
 80006be:	224f      	movs	r2, #79	; 0x4f
 80006c0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <MX_TIM15_Init+0x98>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9;
 80006c8:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_TIM15_Init+0x98>)
 80006ca:	2209      	movs	r2, #9
 80006cc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ce:	4b18      	ldr	r3, [pc, #96]	; (8000730 <MX_TIM15_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_TIM15_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <MX_TIM15_Init+0x98>)
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80006e0:	4813      	ldr	r0, [pc, #76]	; (8000730 <MX_TIM15_Init+0x98>)
 80006e2:	f003 f87d 	bl	80037e0 <HAL_TIM_Base_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 80006ec:	f000 fbb4 	bl	8000e58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80006f6:	f107 0310 	add.w	r3, r7, #16
 80006fa:	4619      	mov	r1, r3
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <MX_TIM15_Init+0x98>)
 80006fe:	f003 fa39 	bl	8003b74 <HAL_TIM_ConfigClockSource>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8000708:	f000 fba6 	bl	8000e58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_TIM15_Init+0x98>)
 800071a:	f003 fc51 	bl	8003fc0 <HAL_TIMEx_MasterConfigSynchronization>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000724:	f000 fb98 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	3720      	adds	r7, #32
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000c0 	.word	0x200000c0
 8000734:	40014000 	.word	0x40014000

08000738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800073e:	4a15      	ldr	r2, [pc, #84]	; (8000794 <MX_USART2_UART_Init+0x5c>)
 8000740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000742:	4b13      	ldr	r3, [pc, #76]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800075e:	220c      	movs	r2, #12
 8000760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_USART2_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077a:	4805      	ldr	r0, [pc, #20]	; (8000790 <MX_USART2_UART_Init+0x58>)
 800077c:	f003 fcc6 	bl	800410c <HAL_UART_Init>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000786:	f000 fb67 	bl	8000e58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2000010c 	.word	0x2000010c
 8000794:	40004400 	.word	0x40004400

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b54      	ldr	r3, [pc, #336]	; (8000900 <MX_GPIO_Init+0x168>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a53      	ldr	r2, [pc, #332]	; (8000900 <MX_GPIO_Init+0x168>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b51      	ldr	r3, [pc, #324]	; (8000900 <MX_GPIO_Init+0x168>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	4b4e      	ldr	r3, [pc, #312]	; (8000900 <MX_GPIO_Init+0x168>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	4a4d      	ldr	r2, [pc, #308]	; (8000900 <MX_GPIO_Init+0x168>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d2:	4b4b      	ldr	r3, [pc, #300]	; (8000900 <MX_GPIO_Init+0x168>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b48      	ldr	r3, [pc, #288]	; (8000900 <MX_GPIO_Init+0x168>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a47      	ldr	r2, [pc, #284]	; (8000900 <MX_GPIO_Init+0x168>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b45      	ldr	r3, [pc, #276]	; (8000900 <MX_GPIO_Init+0x168>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b42      	ldr	r3, [pc, #264]	; (8000900 <MX_GPIO_Init+0x168>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a41      	ldr	r2, [pc, #260]	; (8000900 <MX_GPIO_Init+0x168>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b3f      	ldr	r3, [pc, #252]	; (8000900 <MX_GPIO_Init+0x168>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2101      	movs	r1, #1
 8000812:	483c      	ldr	r0, [pc, #240]	; (8000904 <MX_GPIO_Init+0x16c>)
 8000814:	f001 fb48 	bl	8001ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800081e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	4619      	mov	r1, r3
 800082e:	4836      	ldr	r0, [pc, #216]	; (8000908 <MX_GPIO_Init+0x170>)
 8000830:	f001 f990 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : NOTE_1_Pin NOTE_2_Pin NOTE_3_Pin NOTE_4_Pin
                           NOTE_5_Pin NOTE_6_Pin NOTE_7_Pin NOTE_8_Pin
                           NOTE_10_Pin NOTE_11_Pin */
  GPIO_InitStruct.Pin = NOTE_1_Pin|NOTE_2_Pin|NOTE_3_Pin|NOTE_4_Pin
 8000834:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000838:	617b      	str	r3, [r7, #20]
                          |NOTE_5_Pin|NOTE_6_Pin|NOTE_7_Pin|NOTE_8_Pin
                          |NOTE_10_Pin|NOTE_11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000844:	f107 0314 	add.w	r3, r7, #20
 8000848:	4619      	mov	r1, r3
 800084a:	482f      	ldr	r0, [pc, #188]	; (8000908 <MX_GPIO_Init+0x170>)
 800084c:	f001 f982 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000850:	2301      	movs	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	4827      	ldr	r0, [pc, #156]	; (8000904 <MX_GPIO_Init+0x16c>)
 8000868:	f001 f974 	bl	8001b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : NOTE_9_Pin NOTE_12_Pin */
  GPIO_InitStruct.Pin = NOTE_9_Pin|NOTE_12_Pin;
 800086c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000872:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000878:	2302      	movs	r3, #2
 800087a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4821      	ldr	r0, [pc, #132]	; (8000908 <MX_GPIO_Init+0x170>)
 8000884:	f001 f966 	bl	8001b54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000888:	2200      	movs	r2, #0
 800088a:	2100      	movs	r1, #0
 800088c:	2006      	movs	r0, #6
 800088e:	f000 fe82 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000892:	2006      	movs	r0, #6
 8000894:	f000 fe9b 	bl	80015ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	2100      	movs	r1, #0
 800089c:	2007      	movs	r0, #7
 800089e:	f000 fe7a 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80008a2:	2007      	movs	r0, #7
 80008a4:	f000 fe93 	bl	80015ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	2008      	movs	r0, #8
 80008ae:	f000 fe72 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80008b2:	2008      	movs	r0, #8
 80008b4:	f000 fe8b 	bl	80015ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2100      	movs	r1, #0
 80008bc:	2009      	movs	r0, #9
 80008be:	f000 fe6a 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80008c2:	2009      	movs	r0, #9
 80008c4:	f000 fe83 	bl	80015ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	200a      	movs	r0, #10
 80008ce:	f000 fe62 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008d2:	200a      	movs	r0, #10
 80008d4:	f000 fe7b 	bl	80015ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	2017      	movs	r0, #23
 80008de:	f000 fe5a 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008e2:	2017      	movs	r0, #23
 80008e4:	f000 fe73 	bl	80015ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	2028      	movs	r0, #40	; 0x28
 80008ee:	f000 fe52 	bl	8001596 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008f2:	2028      	movs	r0, #40	; 0x28
 80008f4:	f000 fe6b 	bl	80015ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000
 8000904:	48000400 	.word	0x48000400
 8000908:	48000800 	.word	0x48000800

0800090c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000916:	2101      	movs	r1, #1
 8000918:	4880      	ldr	r0, [pc, #512]	; (8000b1c <HAL_GPIO_EXTI_Callback+0x210>)
 800091a:	f001 fadd 	bl	8001ed8 <HAL_GPIO_TogglePin>
	switch (GPIO_Pin) {
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000924:	f000 80ea 	beq.w	8000afc <HAL_GPIO_EXTI_Callback+0x1f0>
 8000928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800092c:	f300 80f1 	bgt.w	8000b12 <HAL_GPIO_EXTI_Callback+0x206>
 8000930:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000934:	f000 80d7 	beq.w	8000ae6 <HAL_GPIO_EXTI_Callback+0x1da>
 8000938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800093c:	f300 80e9 	bgt.w	8000b12 <HAL_GPIO_EXTI_Callback+0x206>
 8000940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000944:	f000 80c4 	beq.w	8000ad0 <HAL_GPIO_EXTI_Callback+0x1c4>
 8000948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800094c:	f300 80e1 	bgt.w	8000b12 <HAL_GPIO_EXTI_Callback+0x206>
 8000950:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000954:	f000 80b1 	beq.w	8000aba <HAL_GPIO_EXTI_Callback+0x1ae>
 8000958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800095c:	f300 80d9 	bgt.w	8000b12 <HAL_GPIO_EXTI_Callback+0x206>
 8000960:	2b80      	cmp	r3, #128	; 0x80
 8000962:	f000 809f 	beq.w	8000aa4 <HAL_GPIO_EXTI_Callback+0x198>
 8000966:	2b80      	cmp	r3, #128	; 0x80
 8000968:	f300 80d3 	bgt.w	8000b12 <HAL_GPIO_EXTI_Callback+0x206>
 800096c:	2b20      	cmp	r3, #32
 800096e:	dc49      	bgt.n	8000a04 <HAL_GPIO_EXTI_Callback+0xf8>
 8000970:	2b00      	cmp	r3, #0
 8000972:	f340 80ce 	ble.w	8000b12 <HAL_GPIO_EXTI_Callback+0x206>
 8000976:	3b01      	subs	r3, #1
 8000978:	2b1f      	cmp	r3, #31
 800097a:	f200 80ca 	bhi.w	8000b12 <HAL_GPIO_EXTI_Callback+0x206>
 800097e:	a201      	add	r2, pc, #4	; (adr r2, 8000984 <HAL_GPIO_EXTI_Callback+0x78>)
 8000980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000984:	08000a0b 	.word	0x08000a0b
 8000988:	08000a21 	.word	0x08000a21
 800098c:	08000b13 	.word	0x08000b13
 8000990:	08000a37 	.word	0x08000a37
 8000994:	08000b13 	.word	0x08000b13
 8000998:	08000b13 	.word	0x08000b13
 800099c:	08000b13 	.word	0x08000b13
 80009a0:	08000a4d 	.word	0x08000a4d
 80009a4:	08000b13 	.word	0x08000b13
 80009a8:	08000b13 	.word	0x08000b13
 80009ac:	08000b13 	.word	0x08000b13
 80009b0:	08000b13 	.word	0x08000b13
 80009b4:	08000b13 	.word	0x08000b13
 80009b8:	08000b13 	.word	0x08000b13
 80009bc:	08000b13 	.word	0x08000b13
 80009c0:	08000a63 	.word	0x08000a63
 80009c4:	08000b13 	.word	0x08000b13
 80009c8:	08000b13 	.word	0x08000b13
 80009cc:	08000b13 	.word	0x08000b13
 80009d0:	08000b13 	.word	0x08000b13
 80009d4:	08000b13 	.word	0x08000b13
 80009d8:	08000b13 	.word	0x08000b13
 80009dc:	08000b13 	.word	0x08000b13
 80009e0:	08000b13 	.word	0x08000b13
 80009e4:	08000b13 	.word	0x08000b13
 80009e8:	08000b13 	.word	0x08000b13
 80009ec:	08000b13 	.word	0x08000b13
 80009f0:	08000b13 	.word	0x08000b13
 80009f4:	08000b13 	.word	0x08000b13
 80009f8:	08000b13 	.word	0x08000b13
 80009fc:	08000b13 	.word	0x08000b13
 8000a00:	08000a79 	.word	0x08000a79
 8000a04:	2b40      	cmp	r3, #64	; 0x40
 8000a06:	d042      	beq.n	8000a8e <HAL_GPIO_EXTI_Callback+0x182>
	case NOTE_12_Pin:
		active[NOTE_B] = !active[NOTE_B];
		break;

	default:
		break;
 8000a08:	e083      	b.n	8000b12 <HAL_GPIO_EXTI_Callback+0x206>
		active[NOTE_C] = !active[NOTE_C];
 8000a0a:	4b45      	ldr	r3, [pc, #276]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf0c      	ite	eq
 8000a12:	2301      	moveq	r3, #1
 8000a14:	2300      	movne	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b41      	ldr	r3, [pc, #260]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a1c:	601a      	str	r2, [r3, #0]
		break;
 8000a1e:	e079      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_Cs] = !active[NOTE_Cs];
 8000a20:	4b3f      	ldr	r3, [pc, #252]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	bf0c      	ite	eq
 8000a28:	2301      	moveq	r3, #1
 8000a2a:	2300      	movne	r3, #0
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	461a      	mov	r2, r3
 8000a30:	4b3b      	ldr	r3, [pc, #236]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a32:	605a      	str	r2, [r3, #4]
		break;
 8000a34:	e06e      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_D] = !active[NOTE_D];
 8000a36:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2301      	moveq	r3, #1
 8000a40:	2300      	movne	r3, #0
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a48:	609a      	str	r2, [r3, #8]
		break;
 8000a4a:	e063      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_Ds] = !active[NOTE_Ds];
 8000a4c:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	bf0c      	ite	eq
 8000a54:	2301      	moveq	r3, #1
 8000a56:	2300      	movne	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b30      	ldr	r3, [pc, #192]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a5e:	60da      	str	r2, [r3, #12]
		break;
 8000a60:	e058      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_E] = !active[NOTE_E];
 8000a62:	4b2f      	ldr	r3, [pc, #188]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a64:	691b      	ldr	r3, [r3, #16]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	bf0c      	ite	eq
 8000a6a:	2301      	moveq	r3, #1
 8000a6c:	2300      	movne	r3, #0
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	461a      	mov	r2, r3
 8000a72:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a74:	611a      	str	r2, [r3, #16]
		break;
 8000a76:	e04d      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_F] = !active[NOTE_F];
 8000a78:	4b29      	ldr	r3, [pc, #164]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	bf0c      	ite	eq
 8000a80:	2301      	moveq	r3, #1
 8000a82:	2300      	movne	r3, #0
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a8a:	615a      	str	r2, [r3, #20]
		break;
 8000a8c:	e042      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_Fs] = !active[NOTE_Fs];
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	bf0c      	ite	eq
 8000a96:	2301      	moveq	r3, #1
 8000a98:	2300      	movne	r3, #0
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000aa0:	619a      	str	r2, [r3, #24]
		break;
 8000aa2:	e037      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_G] = !active[NOTE_G];
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000aa6:	69db      	ldr	r3, [r3, #28]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	bf0c      	ite	eq
 8000aac:	2301      	moveq	r3, #1
 8000aae:	2300      	movne	r3, #0
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000ab6:	61da      	str	r2, [r3, #28]
		break;
 8000ab8:	e02c      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_Gs] = !active[NOTE_Gs];
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2301      	moveq	r3, #1
 8000ac4:	2300      	movne	r3, #0
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000acc:	621a      	str	r2, [r3, #32]
		break;
 8000ace:	e021      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_A] = !active[NOTE_A];
 8000ad0:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	bf0c      	ite	eq
 8000ad8:	2301      	moveq	r3, #1
 8000ada:	2300      	movne	r3, #0
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000ae2:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000ae4:	e016      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_As] = !active[NOTE_As];
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	bf0c      	ite	eq
 8000aee:	2301      	moveq	r3, #1
 8000af0:	2300      	movne	r3, #0
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	461a      	mov	r2, r3
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000afa:	e00b      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_B] = !active[NOTE_B];
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	bf0c      	ite	eq
 8000b04:	2301      	moveq	r3, #1
 8000b06:	2300      	movne	r3, #0
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <HAL_GPIO_EXTI_Callback+0x214>)
 8000b0e:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 8000b10:	e000      	b.n	8000b14 <HAL_GPIO_EXTI_Callback+0x208>
		break;
 8000b12:	bf00      	nop
	}
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	48000400 	.word	0x48000400
 8000b20:	20000000 	.word	0x20000000

08000b24 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b090      	sub	sp, #64	; 0x40
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  if (htim == &htim15 )
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a49      	ldr	r2, [pc, #292]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	f040 8185 	bne.w	8000e40 <HAL_TIM_PeriodElapsedCallback+0x31c>
    /* ***************************************************************
    * This first batch of values is to look update the value for each Note.
    * By using a list and different indexs we can speed up the program with good spatial locality
    * If the note is active then we update the value. Otherwise we return a zero.
    ***************************************************************************/
	  int C_val = 	active[NOTE_C]?C_TABLE[index[NOTE_C]]:0;
 8000b36:	4b48      	ldr	r3, [pc, #288]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d005      	beq.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0x26>
 8000b3e:	4b47      	ldr	r3, [pc, #284]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a47      	ldr	r2, [pc, #284]	; (8000c60 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b48:	e000      	b.n	8000b4c <HAL_TIM_PeriodElapsedCallback+0x28>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
	  int Cs_val = 	active[NOTE_Cs]?Cs_TABLE[index[NOTE_Cs]]:0;
 8000b4e:	4b42      	ldr	r3, [pc, #264]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d005      	beq.n	8000b62 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8000b56:	4b41      	ldr	r3, [pc, #260]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	4a42      	ldr	r2, [pc, #264]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b60:	e000      	b.n	8000b64 <HAL_TIM_PeriodElapsedCallback+0x40>
 8000b62:	2300      	movs	r3, #0
 8000b64:	63bb      	str	r3, [r7, #56]	; 0x38
	  int D_val = 	active[NOTE_D]?D_TABLE[index[NOTE_D]]:0;
 8000b66:	4b3c      	ldr	r3, [pc, #240]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d005      	beq.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x56>
 8000b6e:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b70:	689b      	ldr	r3, [r3, #8]
 8000b72:	4a3d      	ldr	r2, [pc, #244]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b78:	e000      	b.n	8000b7c <HAL_TIM_PeriodElapsedCallback+0x58>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	637b      	str	r3, [r7, #52]	; 0x34
	  int Ds_val = 	active[NOTE_Ds]?Ds_TABLE[index[NOTE_Ds]]:0;
 8000b7e:	4b36      	ldr	r3, [pc, #216]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d005      	beq.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x6e>
 8000b86:	4b35      	ldr	r3, [pc, #212]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	4a38      	ldr	r2, [pc, #224]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b90:	e000      	b.n	8000b94 <HAL_TIM_PeriodElapsedCallback+0x70>
 8000b92:	2300      	movs	r3, #0
 8000b94:	633b      	str	r3, [r7, #48]	; 0x30
	  int E_val = 	active[NOTE_E]?E_TABLE[index[NOTE_E]]:0;
 8000b96:	4b30      	ldr	r3, [pc, #192]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b98:	691b      	ldr	r3, [r3, #16]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d005      	beq.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x86>
 8000b9e:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ba0:	691b      	ldr	r3, [r3, #16]
 8000ba2:	4a33      	ldr	r2, [pc, #204]	; (8000c70 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba8:	e000      	b.n	8000bac <HAL_TIM_PeriodElapsedCallback+0x88>
 8000baa:	2300      	movs	r3, #0
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
	  int F_val = 	active[NOTE_F]?F_TABLE[index[NOTE_F]]:0;
 8000bae:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000bb0:	695b      	ldr	r3, [r3, #20]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d005      	beq.n	8000bc2 <HAL_TIM_PeriodElapsedCallback+0x9e>
 8000bb6:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	4a2e      	ldr	r2, [pc, #184]	; (8000c74 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc0:	e000      	b.n	8000bc4 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62bb      	str	r3, [r7, #40]	; 0x28
	  int Fs_val = 	active[NOTE_Fs]?Fs_TABLE[index[NOTE_Fs]]:0;
 8000bc6:	4b24      	ldr	r3, [pc, #144]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000bc8:	699b      	ldr	r3, [r3, #24]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d005      	beq.n	8000bda <HAL_TIM_PeriodElapsedCallback+0xb6>
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd8:	e000      	b.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0xb8>
 8000bda:	2300      	movs	r3, #0
 8000bdc:	627b      	str	r3, [r7, #36]	; 0x24
	  int G_val = 	active[NOTE_G]?G_TABLE[index[NOTE_G]]:0;
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000be0:	69db      	ldr	r3, [r3, #28]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d005      	beq.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0xce>
 8000be6:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	4a24      	ldr	r2, [pc, #144]	; (8000c7c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	e000      	b.n	8000bf4 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
	  int Gs_val = 	active[NOTE_Gs]?Gs_TABLE[index[NOTE_Gs]]:0;
 8000bf6:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000bf8:	6a1b      	ldr	r3, [r3, #32]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d005      	beq.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0xe6>
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c00:	6a1b      	ldr	r3, [r3, #32]
 8000c02:	4a1f      	ldr	r2, [pc, #124]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c08:	e000      	b.n	8000c0c <HAL_TIM_PeriodElapsedCallback+0xe8>
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
	  int A_val = 	active[NOTE_A]?A_TABLE[index[NOTE_A]]:0;
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d005      	beq.n	8000c22 <HAL_TIM_PeriodElapsedCallback+0xfe>
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1a:	4a1a      	ldr	r2, [pc, #104]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c20:	e000      	b.n	8000c24 <HAL_TIM_PeriodElapsedCallback+0x100>
 8000c22:	2300      	movs	r3, #0
 8000c24:	61bb      	str	r3, [r7, #24]
	  int As_val = 	active[NOTE_As]?As_TABLE[index[NOTE_As]]:0;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d005      	beq.n	8000c3a <HAL_TIM_PeriodElapsedCallback+0x116>
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c38:	e000      	b.n	8000c3c <HAL_TIM_PeriodElapsedCallback+0x118>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
	  int B_val = 	active[NOTE_B]?B_TABLE[index[NOTE_B]]:0;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d024      	beq.n	8000c90 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c50:	e01f      	b.n	8000c92 <HAL_TIM_PeriodElapsedCallback+0x16e>
 8000c52:	bf00      	nop
 8000c54:	200000c0 	.word	0x200000c0
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000194 	.word	0x20000194
 8000c60:	0800525c 	.word	0x0800525c
 8000c64:	08005858 	.word	0x08005858
 8000c68:	08005dfc 	.word	0x08005dfc
 8000c6c:	08006350 	.word	0x08006350
 8000c70:	08006858 	.word	0x08006858
 8000c74:	08006d18 	.word	0x08006d18
 8000c78:	08007194 	.word	0x08007194
 8000c7c:	080075d0 	.word	0x080075d0
 8000c80:	080079d0 	.word	0x080079d0
 8000c84:	08007d94 	.word	0x08007d94
 8000c88:	08008124 	.word	0x08008124
 8000c8c:	08008480 	.word	0x08008480
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]

    /* ***************************************************************
    This batch of code is to just update the index if the note is active.
    Since the active list should only ever hold a 0 or a 1, this code works. Avoid if statements
      ***************************************************************************/
	  index[NOTE_C] 	+= 	active[NOTE_C];
 8000c94:	4b6c      	ldr	r3, [pc, #432]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	4b6c      	ldr	r3, [pc, #432]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4a6a      	ldr	r2, [pc, #424]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000ca0:	6013      	str	r3, [r2, #0]
	  index[NOTE_Cs] 	+= 	active[NOTE_Cs];
 8000ca2:	4b69      	ldr	r3, [pc, #420]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	4b69      	ldr	r3, [pc, #420]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	4413      	add	r3, r2
 8000cac:	4a66      	ldr	r2, [pc, #408]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cae:	6053      	str	r3, [r2, #4]
	  index[NOTE_D]		+= 	active[NOTE_D];
 8000cb0:	4b65      	ldr	r3, [pc, #404]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cb2:	689a      	ldr	r2, [r3, #8]
 8000cb4:	4b65      	ldr	r3, [pc, #404]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a63      	ldr	r2, [pc, #396]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cbc:	6093      	str	r3, [r2, #8]
	  index[NOTE_Ds] 	+= 	active[NOTE_Ds];
 8000cbe:	4b62      	ldr	r3, [pc, #392]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cc0:	68da      	ldr	r2, [r3, #12]
 8000cc2:	4b62      	ldr	r3, [pc, #392]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a5f      	ldr	r2, [pc, #380]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cca:	60d3      	str	r3, [r2, #12]
	  index[NOTE_E] 	+= 	active[NOTE_E];
 8000ccc:	4b5e      	ldr	r3, [pc, #376]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cce:	691a      	ldr	r2, [r3, #16]
 8000cd0:	4b5e      	ldr	r3, [pc, #376]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000cd2:	691b      	ldr	r3, [r3, #16]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4a5c      	ldr	r2, [pc, #368]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cd8:	6113      	str	r3, [r2, #16]
	  index[NOTE_F] 	+= 	active[NOTE_F];
 8000cda:	4b5b      	ldr	r3, [pc, #364]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cdc:	695a      	ldr	r2, [r3, #20]
 8000cde:	4b5b      	ldr	r3, [pc, #364]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a58      	ldr	r2, [pc, #352]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000ce6:	6153      	str	r3, [r2, #20]
	  index[NOTE_Fs] 	+= 	active[NOTE_Fs];
 8000ce8:	4b57      	ldr	r3, [pc, #348]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cea:	699a      	ldr	r2, [r3, #24]
 8000cec:	4b57      	ldr	r3, [pc, #348]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	4a55      	ldr	r2, [pc, #340]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cf4:	6193      	str	r3, [r2, #24]
	  index[NOTE_G] 	+= 	active[NOTE_G];
 8000cf6:	4b54      	ldr	r3, [pc, #336]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cf8:	69da      	ldr	r2, [r3, #28]
 8000cfa:	4b54      	ldr	r3, [pc, #336]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4a51      	ldr	r2, [pc, #324]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d02:	61d3      	str	r3, [r2, #28]
	  index[NOTE_Gs] 	+= 	active[NOTE_Gs];
 8000d04:	4b50      	ldr	r3, [pc, #320]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d06:	6a1a      	ldr	r2, [r3, #32]
 8000d08:	4b50      	ldr	r3, [pc, #320]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000d0a:	6a1b      	ldr	r3, [r3, #32]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4a4e      	ldr	r2, [pc, #312]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d10:	6213      	str	r3, [r2, #32]
	  index[NOTE_A] 	+= 	active[NOTE_A];
 8000d12:	4b4d      	ldr	r3, [pc, #308]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d16:	4b4d      	ldr	r3, [pc, #308]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1a:	4413      	add	r3, r2
 8000d1c:	4a4a      	ldr	r2, [pc, #296]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d1e:	6253      	str	r3, [r2, #36]	; 0x24
	  index[NOTE_As] 	+= 	active[NOTE_As];
 8000d20:	4b49      	ldr	r3, [pc, #292]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d24:	4b49      	ldr	r3, [pc, #292]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a47      	ldr	r2, [pc, #284]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d2c:	6293      	str	r3, [r2, #40]	; 0x28
	  index[NOTE_B] 	+= 	active[NOTE_B];
 8000d2e:	4b46      	ldr	r3, [pc, #280]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d32:	4b46      	ldr	r3, [pc, #280]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	4413      	add	r3, r2
 8000d38:	4a43      	ldr	r2, [pc, #268]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

		wave_out = C_val + Cs_val + Ds_val + D_val + E_val + F_val + Fs_val
 8000d3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d40:	441a      	add	r2, r3
 8000d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d44:	441a      	add	r2, r3
 8000d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d48:	441a      	add	r2, r3
 8000d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4c:	441a      	add	r2, r3
 8000d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d50:	441a      	add	r2, r3
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	441a      	add	r2, r3
				+ G_val + Gs_val + A_val + As_val + B_val; // Calculate the Sum of the wave
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	441a      	add	r2, r3
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	441a      	add	r2, r3
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	441a      	add	r2, r3
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	441a      	add	r2, r3
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	4413      	add	r3, r2
		wave_out = C_val + Cs_val + Ds_val + D_val + E_val + F_val + Fs_val
 8000d6a:	4a39      	ldr	r2, [pc, #228]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000d6c:	6013      	str	r3, [r2, #0]
		int temp_wave = wave_out * 12 / 1; // This is for debugging purposes. Also 12/4 is to create the new offset for only using 4 notes
 8000d6e:	4b38      	ldr	r3, [pc, #224]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	4613      	mov	r3, r2
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	4413      	add	r3, r2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	60fb      	str	r3, [r7, #12]

		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_L, temp_wave); // Output the wave
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2204      	movs	r2, #4
 8000d80:	2110      	movs	r1, #16
 8000d82:	4834      	ldr	r0, [pc, #208]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000d84:	f000 fd06 	bl	8001794 <HAL_DAC_SetValue>
		/****************************************************************
		 This final section of Code is to handle the reseting of each index.
		 *********************************************************************/
		if (index[NOTE_C] > C_SAMPLES)
 8000d88:	4b2f      	ldr	r3, [pc, #188]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000d90:	db02      	blt.n	8000d98 <HAL_TIM_PeriodElapsedCallback+0x274>
			index[NOTE_C] = 0;
 8000d92:	4b2d      	ldr	r3, [pc, #180]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
		if (index[NOTE_Cs] > Cs_SAMPLES)
 8000d98:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f5b3 7fb5 	cmp.w	r3, #362	; 0x16a
 8000da0:	db02      	blt.n	8000da8 <HAL_TIM_PeriodElapsedCallback+0x284>
			index[NOTE_Cs] = 0;
 8000da2:	4b29      	ldr	r3, [pc, #164]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
		if (index[NOTE_D] > D_SAMPLES)
 8000da8:	4b27      	ldr	r3, [pc, #156]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8000db0:	db02      	blt.n	8000db8 <HAL_TIM_PeriodElapsedCallback+0x294>
			index[NOTE_D] = 0;
 8000db2:	4b25      	ldr	r3, [pc, #148]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
		if (index[NOTE_Ds] > Ds_SAMPLES)
 8000db8:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000dc0:	dd02      	ble.n	8000dc8 <HAL_TIM_PeriodElapsedCallback+0x2a4>
			index[NOTE_Ds] = 0;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	60da      	str	r2, [r3, #12]
		if (index[NOTE_E] > E_SAMPLES)
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000dd0:	dd02      	ble.n	8000dd8 <HAL_TIM_PeriodElapsedCallback+0x2b4>
			index[NOTE_E] = 0;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
		if (index[NOTE_F] > F_SAMPLES)
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8000de0:	db02      	blt.n	8000de8 <HAL_TIM_PeriodElapsedCallback+0x2c4>
			index[NOTE_F] = 0;
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
		if (index[NOTE_Fs] > Fs_SAMPLES)
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8000df0:	db02      	blt.n	8000df8 <HAL_TIM_PeriodElapsedCallback+0x2d4>
			index[NOTE_Fs] = 0;
 8000df2:	4b15      	ldr	r3, [pc, #84]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
		if (index[NOTE_G] > G_SAMPLES)
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000dfa:	69db      	ldr	r3, [r3, #28]
 8000dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e00:	dd02      	ble.n	8000e08 <HAL_TIM_PeriodElapsedCallback+0x2e4>
			index[NOTE_G] = 0;
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	61da      	str	r2, [r3, #28]
		if (index[NOTE_Gs] > Gs_SAMPLES)
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	2bf1      	cmp	r3, #241	; 0xf1
 8000e0e:	dd02      	ble.n	8000e16 <HAL_TIM_PeriodElapsedCallback+0x2f2>
			index[NOTE_Gs] = 0;
 8000e10:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	621a      	str	r2, [r3, #32]
		if (index[NOTE_A] > A_SAMPLES)
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e1a:	2be4      	cmp	r3, #228	; 0xe4
 8000e1c:	dd02      	ble.n	8000e24 <HAL_TIM_PeriodElapsedCallback+0x300>
			index[NOTE_A] = 0;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	625a      	str	r2, [r3, #36]	; 0x24
		if (index[NOTE_As] > As_SAMPLES)
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e28:	2bd7      	cmp	r3, #215	; 0xd7
 8000e2a:	dd02      	ble.n	8000e32 <HAL_TIM_PeriodElapsedCallback+0x30e>
			index[NOTE_As] = 0;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	629a      	str	r2, [r3, #40]	; 0x28
		if (index[NOTE_B] > B_SAMPLES)
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	2bcb      	cmp	r3, #203	; 0xcb
 8000e38:	dd02      	ble.n	8000e40 <HAL_TIM_PeriodElapsedCallback+0x31c>
			index[NOTE_B] = 0;
 8000e3a:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  }
}
 8000e40:	bf00      	nop
 8000e42:	3740      	adds	r7, #64	; 0x40
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000194 	.word	0x20000194
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	200001c4 	.word	0x200001c4
 8000e54:	20000058 	.word	0x20000058

08000e58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e5c:	b672      	cpsid	i
}
 8000e5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <Error_Handler+0x8>
	...

08000e64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e70:	f043 0301 	orr.w	r3, r3, #1
 8000e74:	6613      	str	r3, [r2, #96]	; 0x60
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_MspInit+0x44>)
 8000e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a19      	ldr	r2, [pc, #100]	; (8000f30 <HAL_DAC_MspInit+0x84>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d12c      	bne.n	8000f28 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_DAC_MspInit+0x88>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <HAL_DAC_MspInit+0x88>)
 8000ed4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_DAC_MspInit+0x88>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <HAL_DAC_MspInit+0x88>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <HAL_DAC_MspInit+0x88>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <HAL_DAC_MspInit+0x88>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000efe:	2330      	movs	r3, #48	; 0x30
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f02:	2303      	movs	r3, #3
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f14:	f000 fe1e 	bl	8001b54 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	2036      	movs	r0, #54	; 0x36
 8000f1e:	f000 fb3a 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f22:	2036      	movs	r0, #54	; 0x36
 8000f24:	f000 fb53 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40007400 	.word	0x40007400
 8000f34:	40021000 	.word	0x40021000

08000f38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0ac      	sub	sp, #176	; 0xb0
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	2288      	movs	r2, #136	; 0x88
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 f946 	bl	80051ea <memset>
  if(hi2c->Instance==I2C1)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a21      	ldr	r2, [pc, #132]	; (8000fe8 <HAL_I2C_MspInit+0xb0>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d13a      	bne.n	8000fde <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f68:	2340      	movs	r3, #64	; 0x40
 8000f6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 ff77 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f80:	f7ff ff6a 	bl	8000e58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_I2C_MspInit+0xb4>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f88:	4a18      	ldr	r2, [pc, #96]	; (8000fec <HAL_I2C_MspInit+0xb4>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <HAL_I2C_MspInit+0xb4>)
 8000f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f9c:	23c0      	movs	r3, #192	; 0xc0
 8000f9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa2:	2312      	movs	r3, #18
 8000fa4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <HAL_I2C_MspInit+0xb8>)
 8000fc2:	f000 fdc7 	bl	8001b54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <HAL_I2C_MspInit+0xb4>)
 8000fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fca:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_I2C_MspInit+0xb4>)
 8000fcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd2:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_I2C_MspInit+0xb4>)
 8000fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fde:	bf00      	nop
 8000fe0:	37b0      	adds	r7, #176	; 0xb0
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	48000400 	.word	0x48000400

08000ff4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <HAL_TIM_Base_MspInit+0x44>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d113      	bne.n	800102e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_TIM_Base_MspInit+0x48>)
 8001008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800100a:	4a0c      	ldr	r2, [pc, #48]	; (800103c <HAL_TIM_Base_MspInit+0x48>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001010:	6613      	str	r3, [r2, #96]	; 0x60
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <HAL_TIM_Base_MspInit+0x48>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2018      	movs	r0, #24
 8001024:	f000 fab7 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001028:	2018      	movs	r0, #24
 800102a:	f000 fad0 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800102e:	bf00      	nop
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40014000 	.word	0x40014000
 800103c:	40021000 	.word	0x40021000

08001040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b0ac      	sub	sp, #176	; 0xb0
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2288      	movs	r2, #136	; 0x88
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f004 f8c2 	bl	80051ea <memset>
  if(huart->Instance==USART2)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a25      	ldr	r2, [pc, #148]	; (8001100 <HAL_UART_MspInit+0xc0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d143      	bne.n	80010f8 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001070:	2302      	movs	r3, #2
 8001072:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001074:	2300      	movs	r3, #0
 8001076:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4618      	mov	r0, r3
 800107e:	f001 fef3 	bl	8002e68 <HAL_RCCEx_PeriphCLKConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001088:	f7ff fee6 	bl	8000e58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HAL_UART_MspInit+0xc4>)
 800108e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001090:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <HAL_UART_MspInit+0xc4>)
 8001092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001096:	6593      	str	r3, [r2, #88]	; 0x58
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <HAL_UART_MspInit+0xc4>)
 800109a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_UART_MspInit+0xc4>)
 80010a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a8:	4a16      	ldr	r2, [pc, #88]	; (8001104 <HAL_UART_MspInit+0xc4>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_UART_MspInit+0xc4>)
 80010b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b4:	f003 0301 	and.w	r3, r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80010bc:	230c      	movs	r3, #12
 80010be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d4:	2307      	movs	r3, #7
 80010d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f000 fd36 	bl	8001b54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	2026      	movs	r0, #38	; 0x26
 80010ee:	f000 fa52 	bl	8001596 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010f2:	2026      	movs	r0, #38	; 0x26
 80010f4:	f000 fa6b 	bl	80015ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010f8:	bf00      	nop
 80010fa:	37b0      	adds	r7, #176	; 0xb0
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40004400 	.word	0x40004400
 8001104:	40021000 	.word	0x40021000

08001108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800110c:	e7fe      	b.n	800110c <NMI_Handler+0x4>

0800110e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <HardFault_Handler+0x4>

08001114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <MemManage_Handler+0x4>

0800111a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <BusFault_Handler+0x4>

08001120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <UsageFault_Handler+0x4>

08001126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001154:	f000 f900 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}

0800115c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_1_Pin);
 8001160:	2001      	movs	r0, #1
 8001162:	f000 fed3 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}

0800116a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_2_Pin);
 800116e:	2002      	movs	r0, #2
 8001170:	f000 fecc 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_3_Pin);
 800117c:	2004      	movs	r0, #4
 800117e:	f000 fec5 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}

08001186 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_4_Pin);
 800118a:	2008      	movs	r0, #8
 800118c:	f000 febe 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_5_Pin);
 8001198:	2010      	movs	r0, #16
 800119a:	f000 feb7 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_6_Pin);
 80011a6:	2020      	movs	r0, #32
 80011a8:	f000 feb0 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_7_Pin);
 80011ac:	2040      	movs	r0, #64	; 0x40
 80011ae:	f000 fead 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_8_Pin);
 80011b2:	2080      	movs	r0, #128	; 0x80
 80011b4:	f000 feaa 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_9_Pin);
 80011b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011bc:	f000 fea6 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_10_Pin);
 80011c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011c4:	f000 fea2 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}

080011cc <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80011d2:	f002 fbcd 	bl	8003970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200000c0 	.word	0x200000c0

080011e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <USART2_IRQHandler+0x10>)
 80011e6:	f002 ffdf 	bl	80041a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000010c 	.word	0x2000010c

080011f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_11_Pin);
 80011f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011fc:	f000 fe86 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_12_Pin);
 8001200:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001204:	f000 fe82 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001208:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800120c:	f000 fe7e 	bl	8001f0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <TIM6_DAC_IRQHandler+0x10>)
 800121a:	f000 fa61 	bl	80016e0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000058 	.word	0x20000058

08001228 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <SystemInit+0x20>)
 800122e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <SystemInit+0x20>)
 8001234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001284 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001250:	f7ff ffea 	bl	8001228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <LoopForever+0x6>)
  ldr r1, =_edata
 8001256:	490d      	ldr	r1, [pc, #52]	; (800128c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001258:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <LoopForever+0xe>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <LoopForever+0x12>)
  ldr r4, =_ebss
 800126c:	4c0a      	ldr	r4, [pc, #40]	; (8001298 <LoopForever+0x16>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127a:	f003 ffbf 	bl	80051fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800127e:	f7ff f921 	bl	80004c4 <main>

08001282 <LoopForever>:

LoopForever:
    b LoopForever
 8001282:	e7fe      	b.n	8001282 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001284:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001290:	08008804 	.word	0x08008804
  ldr r2, =_sbss
 8001294:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001298:	200001cc 	.word	0x200001cc

0800129c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC1_2_IRQHandler>
	...

080012a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_Init+0x3c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <HAL_Init+0x3c>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b6:	2003      	movs	r0, #3
 80012b8:	f000 f962 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012bc:	2000      	movs	r0, #0
 80012be:	f000 f80f 	bl	80012e0 <HAL_InitTick>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	e001      	b.n	80012d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012ce:	f7ff fdc9 	bl	8000e64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012d2:	79fb      	ldrb	r3, [r7, #7]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40022000 	.word	0x40022000

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <HAL_InitTick+0x6c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d023      	beq.n	800133c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_InitTick+0x70>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b14      	ldr	r3, [pc, #80]	; (800134c <HAL_InitTick+0x6c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001302:	fbb3 f3f1 	udiv	r3, r3, r1
 8001306:	fbb2 f3f3 	udiv	r3, r2, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f000 f96d 	bl	80015ea <HAL_SYSTICK_Config>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10f      	bne.n	8001336 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b0f      	cmp	r3, #15
 800131a:	d809      	bhi.n	8001330 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131c:	2200      	movs	r2, #0
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f000 f937 	bl	8001596 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001328:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <HAL_InitTick+0x74>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e007      	b.n	8001340 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	e004      	b.n	8001340 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	e001      	b.n	8001340 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001340:	7bfb      	ldrb	r3, [r7, #15]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000038 	.word	0x20000038
 8001350:	20000030 	.word	0x20000030
 8001354:	20000034 	.word	0x20000034

08001358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000038 	.word	0x20000038
 800137c:	200001c8 	.word	0x200001c8

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200001c8 	.word	0x200001c8

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff ffee 	bl	8001380 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffde 	bl	8001380 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000038 	.word	0x20000038

080013e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f003 0307 	and.w	r3, r3, #7
 80013ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013fc:	4013      	ands	r3, r2
 80013fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001408:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800140c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001412:	4a04      	ldr	r2, [pc, #16]	; (8001424 <__NVIC_SetPriorityGrouping+0x44>)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	60d3      	str	r3, [r2, #12]
}
 8001418:	bf00      	nop
 800141a:	3714      	adds	r7, #20
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <__NVIC_GetPriorityGrouping+0x18>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	f003 0307 	and.w	r3, r3, #7
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001452:	2b00      	cmp	r3, #0
 8001454:	db0b      	blt.n	800146e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	f003 021f 	and.w	r2, r3, #31
 800145c:	4907      	ldr	r1, [pc, #28]	; (800147c <__NVIC_EnableIRQ+0x38>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	095b      	lsrs	r3, r3, #5
 8001464:	2001      	movs	r0, #1
 8001466:	fa00 f202 	lsl.w	r2, r0, r2
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800146e:	bf00      	nop
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000e100 	.word	0xe000e100

08001480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
         );
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f7ff ff8e 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff29 	bl	80013e0 <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff3e 	bl	8001428 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff8e 	bl	80014d4 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5d 	bl	8001480 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff31 	bl	8001444 <__NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff ffa2 	bl	800153c <SysTick_Config>
 80015f8:	4603      	mov	r3, r0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}

08001602 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001602:	b580      	push	{r7, lr}
 8001604:	b082      	sub	sp, #8
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e014      	b.n	800163e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	791b      	ldrb	r3, [r3, #4]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d105      	bne.n	800162a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fc41 	bl	8000eac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2202      	movs	r2, #2
 800162e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	795b      	ldrb	r3, [r3, #5]
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_DAC_Start+0x16>
 8001658:	2302      	movs	r3, #2
 800165a:	e03b      	b.n	80016d4 <HAL_DAC_Start+0x8e>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2202      	movs	r2, #2
 8001666:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6819      	ldr	r1, [r3, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	2201      	movs	r2, #1
 8001676:	409a      	lsls	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10f      	bne.n	80016a6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001690:	2b04      	cmp	r3, #4
 8001692:	d118      	bne.n	80016c6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0201 	orr.w	r2, r2, #1
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	e00f      	b.n	80016c6 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80016b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80016b4:	d107      	bne.n	80016c6 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f042 0202 	orr.w	r2, r2, #2
 80016c4:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016f6:	d120      	bne.n	800173a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001706:	d118      	bne.n	800173a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2204      	movs	r2, #4
 800170c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	f043 0201 	orr.w	r2, r3, #1
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001722:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001732:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f852 	bl	80017de <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001748:	d120      	bne.n	800178c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001750:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001758:	d118      	bne.n	800178c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2204      	movs	r2, #4
 800175e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	f043 0202 	orr.w	r2, r3, #2
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001774:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001784:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f95a 	bl	8001a40 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001794:	b480      	push	{r7}
 8001796:	b087      	sub	sp, #28
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d105      	bne.n	80017be <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4413      	add	r3, r2
 80017b8:	3308      	adds	r3, #8
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	e004      	b.n	80017c8 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4413      	add	r3, r2
 80017c4:	3314      	adds	r3, #20
 80017c6:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	461a      	mov	r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b088      	sub	sp, #32
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	795b      	ldrb	r3, [r3, #5]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d101      	bne.n	800180e <HAL_DAC_ConfigChannel+0x1c>
 800180a:	2302      	movs	r3, #2
 800180c:	e114      	b.n	8001a38 <HAL_DAC_ConfigChannel+0x246>
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2201      	movs	r2, #1
 8001812:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2202      	movs	r2, #2
 8001818:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b04      	cmp	r3, #4
 8001820:	f040 8081 	bne.w	8001926 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001824:	f7ff fdac 	bl	8001380 <HAL_GetTick>
 8001828:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d140      	bne.n	80018b2 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001830:	e018      	b.n	8001864 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001832:	f7ff fda5 	bl	8001380 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b01      	cmp	r3, #1
 800183e:	d911      	bls.n	8001864 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00a      	beq.n	8001864 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	f043 0208 	orr.w	r2, r3, #8
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2203      	movs	r2, #3
 800185e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e0e9      	b.n	8001a38 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1df      	bne.n	8001832 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001872:	2001      	movs	r0, #1
 8001874:	f7ff fd90 	bl	8001398 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	6992      	ldr	r2, [r2, #24]
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
 8001882:	e023      	b.n	80018cc <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001884:	f7ff fd7c 	bl	8001380 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b01      	cmp	r3, #1
 8001890:	d90f      	bls.n	80018b2 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001898:	2b00      	cmp	r3, #0
 800189a:	da0a      	bge.n	80018b2 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	f043 0208 	orr.w	r2, r3, #8
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2203      	movs	r2, #3
 80018ac:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e0c2      	b.n	8001a38 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	dbe3      	blt.n	8001884 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80018bc:	2001      	movs	r0, #1
 80018be:	f7ff fd6b 	bl	8001398 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	6992      	ldr	r2, [r2, #24]
 80018ca:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f003 0310 	and.w	r3, r3, #16
 80018d8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80018dc:	fa01 f303 	lsl.w	r3, r1, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	ea02 0103 	and.w	r1, r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f003 0310 	and.w	r3, r3, #16
 80018f0:	409a      	lsls	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	21ff      	movs	r1, #255	; 0xff
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	ea02 0103 	and.w	r1, r2, r3
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	6a1a      	ldr	r2, [r3, #32]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f003 0310 	and.w	r3, r3, #16
 800191c:	409a      	lsls	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	430a      	orrs	r2, r1
 8001924:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	2b01      	cmp	r3, #1
 800192c:	d11d      	bne.n	800196a <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001934:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f003 0310 	and.w	r3, r3, #16
 800193c:	221f      	movs	r2, #31
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0310 	and.w	r3, r3, #16
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001970:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f003 0310 	and.w	r3, r3, #16
 8001978:	2207      	movs	r2, #7
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	431a      	orrs	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6819      	ldr	r1, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0310 	and.w	r3, r3, #16
 80019be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43da      	mvns	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	400a      	ands	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0310 	and.w	r3, r3, #16
 80019de:	f640 72fc 	movw	r2, #4092	; 0xffc
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6819      	ldr	r1, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0310 	and.w	r3, r3, #16
 8001a1a:	22c0      	movs	r2, #192	; 0xc0
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43da      	mvns	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	400a      	ands	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3720      	adds	r7, #32
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d008      	beq.n	8001a7e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e022      	b.n	8001ac4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 020e 	bic.w	r2, r2, #14
 8001a8c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f003 021c 	and.w	r2, r3, #28
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001ac2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3714      	adds	r7, #20
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d005      	beq.n	8001af4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2204      	movs	r2, #4
 8001aec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	73fb      	strb	r3, [r7, #15]
 8001af2:	e029      	b.n	8001b48 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 020e 	bic.w	r2, r2, #14
 8001b02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0201 	bic.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b18:	f003 021c 	and.w	r2, r3, #28
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	2101      	movs	r1, #1
 8001b22:	fa01 f202 	lsl.w	r2, r1, r2
 8001b26:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	4798      	blx	r3
    }
  }
  return status;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
	...

08001b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b087      	sub	sp, #28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b62:	e17f      	b.n	8001e64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	2101      	movs	r1, #1
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8171 	beq.w	8001e5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d005      	beq.n	8001b94 <HAL_GPIO_Init+0x40>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d130      	bne.n	8001bf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68da      	ldr	r2, [r3, #12]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	693a      	ldr	r2, [r7, #16]
 8001bc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bca:	2201      	movs	r2, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 0201 	and.w	r2, r3, #1
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	2b03      	cmp	r3, #3
 8001c00:	d118      	bne.n	8001c34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c08:	2201      	movs	r2, #1
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4013      	ands	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	08db      	lsrs	r3, r3, #3
 8001c1e:	f003 0201 	and.w	r2, r3, #1
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b03      	cmp	r3, #3
 8001c3e:	d017      	beq.n	8001c70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d123      	bne.n	8001cc4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	08da      	lsrs	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3208      	adds	r2, #8
 8001c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	220f      	movs	r2, #15
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	691a      	ldr	r2, [r3, #16]
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	08da      	lsrs	r2, r3, #3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3208      	adds	r2, #8
 8001cbe:	6939      	ldr	r1, [r7, #16]
 8001cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0203 	and.w	r2, r3, #3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 80ac 	beq.w	8001e5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	4b5f      	ldr	r3, [pc, #380]	; (8001e84 <HAL_GPIO_Init+0x330>)
 8001d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0a:	4a5e      	ldr	r2, [pc, #376]	; (8001e84 <HAL_GPIO_Init+0x330>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6613      	str	r3, [r2, #96]	; 0x60
 8001d12:	4b5c      	ldr	r3, [pc, #368]	; (8001e84 <HAL_GPIO_Init+0x330>)
 8001d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d1e:	4a5a      	ldr	r2, [pc, #360]	; (8001e88 <HAL_GPIO_Init+0x334>)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	3302      	adds	r3, #2
 8001d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	220f      	movs	r2, #15
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d48:	d025      	beq.n	8001d96 <HAL_GPIO_Init+0x242>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4f      	ldr	r2, [pc, #316]	; (8001e8c <HAL_GPIO_Init+0x338>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d01f      	beq.n	8001d92 <HAL_GPIO_Init+0x23e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4e      	ldr	r2, [pc, #312]	; (8001e90 <HAL_GPIO_Init+0x33c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d019      	beq.n	8001d8e <HAL_GPIO_Init+0x23a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4d      	ldr	r2, [pc, #308]	; (8001e94 <HAL_GPIO_Init+0x340>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d013      	beq.n	8001d8a <HAL_GPIO_Init+0x236>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4c      	ldr	r2, [pc, #304]	; (8001e98 <HAL_GPIO_Init+0x344>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00d      	beq.n	8001d86 <HAL_GPIO_Init+0x232>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4b      	ldr	r2, [pc, #300]	; (8001e9c <HAL_GPIO_Init+0x348>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d007      	beq.n	8001d82 <HAL_GPIO_Init+0x22e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4a      	ldr	r2, [pc, #296]	; (8001ea0 <HAL_GPIO_Init+0x34c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_GPIO_Init+0x22a>
 8001d7a:	2306      	movs	r3, #6
 8001d7c:	e00c      	b.n	8001d98 <HAL_GPIO_Init+0x244>
 8001d7e:	2307      	movs	r3, #7
 8001d80:	e00a      	b.n	8001d98 <HAL_GPIO_Init+0x244>
 8001d82:	2305      	movs	r3, #5
 8001d84:	e008      	b.n	8001d98 <HAL_GPIO_Init+0x244>
 8001d86:	2304      	movs	r3, #4
 8001d88:	e006      	b.n	8001d98 <HAL_GPIO_Init+0x244>
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e004      	b.n	8001d98 <HAL_GPIO_Init+0x244>
 8001d8e:	2302      	movs	r3, #2
 8001d90:	e002      	b.n	8001d98 <HAL_GPIO_Init+0x244>
 8001d92:	2301      	movs	r3, #1
 8001d94:	e000      	b.n	8001d98 <HAL_GPIO_Init+0x244>
 8001d96:	2300      	movs	r3, #0
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	f002 0203 	and.w	r2, r2, #3
 8001d9e:	0092      	lsls	r2, r2, #2
 8001da0:	4093      	lsls	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001da8:	4937      	ldr	r1, [pc, #220]	; (8001e88 <HAL_GPIO_Init+0x334>)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	089b      	lsrs	r3, r3, #2
 8001dae:	3302      	adds	r3, #2
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001db6:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001dda:	4a32      	ldr	r2, [pc, #200]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001de0:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e04:	4a27      	ldr	r2, [pc, #156]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e0a:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	43db      	mvns	r3, r3
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e2e:	4a1d      	ldr	r2, [pc, #116]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4013      	ands	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e58:	4a12      	ldr	r2, [pc, #72]	; (8001ea4 <HAL_GPIO_Init+0x350>)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	3301      	adds	r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f47f ae78 	bne.w	8001b64 <HAL_GPIO_Init+0x10>
  }
}
 8001e74:	bf00      	nop
 8001e76:	bf00      	nop
 8001e78:	371c      	adds	r7, #28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40010000 	.word	0x40010000
 8001e8c:	48000400 	.word	0x48000400
 8001e90:	48000800 	.word	0x48000800
 8001e94:	48000c00 	.word	0x48000c00
 8001e98:	48001000 	.word	0x48001000
 8001e9c:	48001400 	.word	0x48001400
 8001ea0:	48001800 	.word	0x48001800
 8001ea4:	40010400 	.word	0x40010400

08001ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb8:	787b      	ldrb	r3, [r7, #1]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ec4:	e002      	b.n	8001ecc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ecc:	bf00      	nop
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	695b      	ldr	r3, [r3, #20]
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eea:	887a      	ldrh	r2, [r7, #2]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	041a      	lsls	r2, r3, #16
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	43d9      	mvns	r1, r3
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	400b      	ands	r3, r1
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7fe fcee 	bl	800090c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e08d      	b.n	800206a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7fe ffe8 	bl	8000f38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2224      	movs	r2, #36	; 0x24
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 0201 	bic.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685a      	ldr	r2, [r3, #4]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	e006      	b.n	8001fc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d108      	bne.n	8001fde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	e007      	b.n	8001fee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002000:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68da      	ldr	r2, [r3, #12]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002010:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69d9      	ldr	r1, [r3, #28]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1a      	ldr	r2, [r3, #32]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2200      	movs	r2, #0
 8002050:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2220      	movs	r2, #32
 8002056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b20      	cmp	r3, #32
 8002086:	d138      	bne.n	80020fa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800208e:	2b01      	cmp	r3, #1
 8002090:	d101      	bne.n	8002096 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002092:	2302      	movs	r3, #2
 8002094:	e032      	b.n	80020fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2224      	movs	r2, #36	; 0x24
 80020a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0201 	bic.w	r2, r2, #1
 80020b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020c4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6819      	ldr	r1, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 0201 	orr.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2220      	movs	r2, #32
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	e000      	b.n	80020fc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020fa:	2302      	movs	r3, #2
  }
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b20      	cmp	r3, #32
 800211c:	d139      	bne.n	8002192 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002128:	2302      	movs	r3, #2
 800212a:	e033      	b.n	8002194 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2224      	movs	r2, #36	; 0x24
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800215a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	4313      	orrs	r3, r2
 8002164:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2220      	movs	r2, #32
 8002182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e000      	b.n	8002194 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002192:	2302      	movs	r3, #2
  }
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40007000 	.word	0x40007000

080021bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ca:	d130      	bne.n	800222e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d8:	d038      	beq.n	800224c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021e2:	4a1e      	ldr	r2, [pc, #120]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2232      	movs	r2, #50	; 0x32
 80021f0:	fb02 f303 	mul.w	r3, r2, r3
 80021f4:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	0c9b      	lsrs	r3, r3, #18
 80021fc:	3301      	adds	r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002200:	e002      	b.n	8002208 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3b01      	subs	r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002214:	d102      	bne.n	800221c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f2      	bne.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002228:	d110      	bne.n	800224c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e00f      	b.n	800224e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223a:	d007      	beq.n	800224c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002244:	4a05      	ldr	r2, [pc, #20]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40007000 	.word	0x40007000
 8002260:	20000030 	.word	0x20000030
 8002264:	431bde83 	.word	0x431bde83

08002268 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b088      	sub	sp, #32
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e3ca      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227a:	4b97      	ldr	r3, [pc, #604]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002284:	4b94      	ldr	r3, [pc, #592]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 80e4 	beq.w	8002464 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <HAL_RCC_OscConfig+0x4a>
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	2b0c      	cmp	r3, #12
 80022a6:	f040 808b 	bne.w	80023c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	f040 8087 	bne.w	80023c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022b2:	4b89      	ldr	r3, [pc, #548]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_RCC_OscConfig+0x62>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e3a2      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1a      	ldr	r2, [r3, #32]
 80022ce:	4b82      	ldr	r3, [pc, #520]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d004      	beq.n	80022e4 <HAL_RCC_OscConfig+0x7c>
 80022da:	4b7f      	ldr	r3, [pc, #508]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022e2:	e005      	b.n	80022f0 <HAL_RCC_OscConfig+0x88>
 80022e4:	4b7c      	ldr	r3, [pc, #496]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 80022e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ea:	091b      	lsrs	r3, r3, #4
 80022ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d223      	bcs.n	800233c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fd55 	bl	8002da8 <RCC_SetFlashLatencyFromMSIRange>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e383      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002308:	4b73      	ldr	r3, [pc, #460]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a72      	ldr	r2, [pc, #456]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b70      	ldr	r3, [pc, #448]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	496d      	ldr	r1, [pc, #436]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002326:	4b6c      	ldr	r3, [pc, #432]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	4968      	ldr	r1, [pc, #416]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
 800233a:	e025      	b.n	8002388 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800233c:	4b66      	ldr	r3, [pc, #408]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a65      	ldr	r2, [pc, #404]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002342:	f043 0308 	orr.w	r3, r3, #8
 8002346:	6013      	str	r3, [r2, #0]
 8002348:	4b63      	ldr	r3, [pc, #396]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	4960      	ldr	r1, [pc, #384]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800235a:	4b5f      	ldr	r3, [pc, #380]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	495b      	ldr	r1, [pc, #364]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	4618      	mov	r0, r3
 800237a:	f000 fd15 	bl	8002da8 <RCC_SetFlashLatencyFromMSIRange>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e343      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002388:	f000 fc4a 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 800238c:	4602      	mov	r2, r0
 800238e:	4b52      	ldr	r3, [pc, #328]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	4950      	ldr	r1, [pc, #320]	; (80024dc <HAL_RCC_OscConfig+0x274>)
 800239a:	5ccb      	ldrb	r3, [r1, r3]
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	fa22 f303 	lsr.w	r3, r2, r3
 80023a4:	4a4e      	ldr	r2, [pc, #312]	; (80024e0 <HAL_RCC_OscConfig+0x278>)
 80023a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80023a8:	4b4e      	ldr	r3, [pc, #312]	; (80024e4 <HAL_RCC_OscConfig+0x27c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe ff97 	bl	80012e0 <HAL_InitTick>
 80023b2:	4603      	mov	r3, r0
 80023b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d052      	beq.n	8002462 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	e327      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d032      	beq.n	800242e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023c8:	4b43      	ldr	r3, [pc, #268]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a42      	ldr	r2, [pc, #264]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023d4:	f7fe ffd4 	bl	8001380 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023dc:	f7fe ffd0 	bl	8001380 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e310      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ee:	4b3a      	ldr	r3, [pc, #232]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023fa:	4b37      	ldr	r3, [pc, #220]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a36      	ldr	r2, [pc, #216]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b34      	ldr	r3, [pc, #208]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4931      	ldr	r1, [pc, #196]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002418:	4b2f      	ldr	r3, [pc, #188]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	492c      	ldr	r1, [pc, #176]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	e01a      	b.n	8002464 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800242e:	4b2a      	ldr	r3, [pc, #168]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a29      	ldr	r2, [pc, #164]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800243a:	f7fe ffa1 	bl	8001380 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002442:	f7fe ff9d 	bl	8001380 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e2dd      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002454:	4b20      	ldr	r3, [pc, #128]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x1da>
 8002460:	e000      	b.n	8002464 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002462:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	2b00      	cmp	r3, #0
 800246e:	d074      	beq.n	800255a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	2b08      	cmp	r3, #8
 8002474:	d005      	beq.n	8002482 <HAL_RCC_OscConfig+0x21a>
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	2b0c      	cmp	r3, #12
 800247a:	d10e      	bne.n	800249a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d10b      	bne.n	800249a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002482:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d064      	beq.n	8002558 <HAL_RCC_OscConfig+0x2f0>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d160      	bne.n	8002558 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e2ba      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a2:	d106      	bne.n	80024b2 <HAL_RCC_OscConfig+0x24a>
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0b      	ldr	r2, [pc, #44]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ae:	6013      	str	r3, [r2, #0]
 80024b0:	e026      	b.n	8002500 <HAL_RCC_OscConfig+0x298>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ba:	d115      	bne.n	80024e8 <HAL_RCC_OscConfig+0x280>
 80024bc:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a02      	ldr	r2, [pc, #8]	; (80024d8 <HAL_RCC_OscConfig+0x270>)
 80024ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	e014      	b.n	8002500 <HAL_RCC_OscConfig+0x298>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	080087ac 	.word	0x080087ac
 80024e0:	20000030 	.word	0x20000030
 80024e4:	20000034 	.word	0x20000034
 80024e8:	4ba0      	ldr	r3, [pc, #640]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a9f      	ldr	r2, [pc, #636]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80024ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b9d      	ldr	r3, [pc, #628]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a9c      	ldr	r2, [pc, #624]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80024fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe ff3a 	bl	8001380 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002510:	f7fe ff36 	bl	8001380 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b64      	cmp	r3, #100	; 0x64
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e276      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002522:	4b92      	ldr	r3, [pc, #584]	; (800276c <HAL_RCC_OscConfig+0x504>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x2a8>
 800252e:	e014      	b.n	800255a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7fe ff26 	bl	8001380 <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002538:	f7fe ff22 	bl	8001380 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b64      	cmp	r3, #100	; 0x64
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e262      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800254a:	4b88      	ldr	r3, [pc, #544]	; (800276c <HAL_RCC_OscConfig+0x504>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f0      	bne.n	8002538 <HAL_RCC_OscConfig+0x2d0>
 8002556:	e000      	b.n	800255a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d060      	beq.n	8002628 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b04      	cmp	r3, #4
 800256a:	d005      	beq.n	8002578 <HAL_RCC_OscConfig+0x310>
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d119      	bne.n	80025a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d116      	bne.n	80025a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002578:	4b7c      	ldr	r3, [pc, #496]	; (800276c <HAL_RCC_OscConfig+0x504>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_OscConfig+0x328>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e23f      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b76      	ldr	r3, [pc, #472]	; (800276c <HAL_RCC_OscConfig+0x504>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	061b      	lsls	r3, r3, #24
 800259e:	4973      	ldr	r1, [pc, #460]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025a4:	e040      	b.n	8002628 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d023      	beq.n	80025f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ae:	4b6f      	ldr	r3, [pc, #444]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a6e      	ldr	r2, [pc, #440]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80025b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe fee1 	bl	8001380 <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c2:	f7fe fedd 	bl	8001380 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e21d      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025d4:	4b65      	ldr	r3, [pc, #404]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e0:	4b62      	ldr	r3, [pc, #392]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	061b      	lsls	r3, r3, #24
 80025ee:	495f      	ldr	r1, [pc, #380]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	604b      	str	r3, [r1, #4]
 80025f4:	e018      	b.n	8002628 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025f6:	4b5d      	ldr	r3, [pc, #372]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a5c      	ldr	r2, [pc, #368]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80025fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7fe febd 	bl	8001380 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800260a:	f7fe feb9 	bl	8001380 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e1f9      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800261c:	4b53      	ldr	r3, [pc, #332]	; (800276c <HAL_RCC_OscConfig+0x504>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d03c      	beq.n	80026ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d01c      	beq.n	8002676 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800263c:	4b4b      	ldr	r3, [pc, #300]	; (800276c <HAL_RCC_OscConfig+0x504>)
 800263e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002642:	4a4a      	ldr	r2, [pc, #296]	; (800276c <HAL_RCC_OscConfig+0x504>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264c:	f7fe fe98 	bl	8001380 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002654:	f7fe fe94 	bl	8001380 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e1d4      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002666:	4b41      	ldr	r3, [pc, #260]	; (800276c <HAL_RCC_OscConfig+0x504>)
 8002668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0ef      	beq.n	8002654 <HAL_RCC_OscConfig+0x3ec>
 8002674:	e01b      	b.n	80026ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002676:	4b3d      	ldr	r3, [pc, #244]	; (800276c <HAL_RCC_OscConfig+0x504>)
 8002678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800267c:	4a3b      	ldr	r2, [pc, #236]	; (800276c <HAL_RCC_OscConfig+0x504>)
 800267e:	f023 0301 	bic.w	r3, r3, #1
 8002682:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002686:	f7fe fe7b 	bl	8001380 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268e:	f7fe fe77 	bl	8001380 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e1b7      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026a0:	4b32      	ldr	r3, [pc, #200]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80026a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1ef      	bne.n	800268e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 80a6 	beq.w	8002808 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026bc:	2300      	movs	r3, #0
 80026be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026c0:	4b2a      	ldr	r3, [pc, #168]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10d      	bne.n	80026e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d0:	4a26      	ldr	r2, [pc, #152]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80026d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026d6:	6593      	str	r3, [r2, #88]	; 0x58
 80026d8:	4b24      	ldr	r3, [pc, #144]	; (800276c <HAL_RCC_OscConfig+0x504>)
 80026da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e4:	2301      	movs	r3, #1
 80026e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e8:	4b21      	ldr	r3, [pc, #132]	; (8002770 <HAL_RCC_OscConfig+0x508>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d118      	bne.n	8002726 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f4:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <HAL_RCC_OscConfig+0x508>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <HAL_RCC_OscConfig+0x508>)
 80026fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002700:	f7fe fe3e 	bl	8001380 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002708:	f7fe fe3a 	bl	8001380 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e17a      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_RCC_OscConfig+0x508>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d108      	bne.n	8002740 <HAL_RCC_OscConfig+0x4d8>
 800272e:	4b0f      	ldr	r3, [pc, #60]	; (800276c <HAL_RCC_OscConfig+0x504>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002734:	4a0d      	ldr	r2, [pc, #52]	; (800276c <HAL_RCC_OscConfig+0x504>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800273e:	e029      	b.n	8002794 <HAL_RCC_OscConfig+0x52c>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b05      	cmp	r3, #5
 8002746:	d115      	bne.n	8002774 <HAL_RCC_OscConfig+0x50c>
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_RCC_OscConfig+0x504>)
 800274a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274e:	4a07      	ldr	r2, [pc, #28]	; (800276c <HAL_RCC_OscConfig+0x504>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002758:	4b04      	ldr	r3, [pc, #16]	; (800276c <HAL_RCC_OscConfig+0x504>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275e:	4a03      	ldr	r2, [pc, #12]	; (800276c <HAL_RCC_OscConfig+0x504>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002768:	e014      	b.n	8002794 <HAL_RCC_OscConfig+0x52c>
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000
 8002770:	40007000 	.word	0x40007000
 8002774:	4b9c      	ldr	r3, [pc, #624]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277a:	4a9b      	ldr	r2, [pc, #620]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 800277c:	f023 0301 	bic.w	r3, r3, #1
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002784:	4b98      	ldr	r3, [pc, #608]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278a:	4a97      	ldr	r2, [pc, #604]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 800278c:	f023 0304 	bic.w	r3, r3, #4
 8002790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d016      	beq.n	80027ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279c:	f7fe fdf0 	bl	8001380 <HAL_GetTick>
 80027a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a4:	f7fe fdec 	bl	8001380 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e12a      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ba:	4b8b      	ldr	r3, [pc, #556]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 80027bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0ed      	beq.n	80027a4 <HAL_RCC_OscConfig+0x53c>
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ca:	f7fe fdd9 	bl	8001380 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fe fdd5 	bl	8001380 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e113      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027e8:	4b7f      	ldr	r3, [pc, #508]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1ed      	bne.n	80027d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f6:	7ffb      	ldrb	r3, [r7, #31]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d105      	bne.n	8002808 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fc:	4b7a      	ldr	r3, [pc, #488]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002800:	4a79      	ldr	r2, [pc, #484]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002806:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80fe 	beq.w	8002a0e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	2b02      	cmp	r3, #2
 8002818:	f040 80d0 	bne.w	80029bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800281c:	4b72      	ldr	r3, [pc, #456]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f003 0203 	and.w	r2, r3, #3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	429a      	cmp	r2, r3
 800282e:	d130      	bne.n	8002892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	3b01      	subs	r3, #1
 800283c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d127      	bne.n	8002892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d11f      	bne.n	8002892 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800285c:	2a07      	cmp	r2, #7
 800285e:	bf14      	ite	ne
 8002860:	2201      	movne	r2, #1
 8002862:	2200      	moveq	r2, #0
 8002864:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002866:	4293      	cmp	r3, r2
 8002868:	d113      	bne.n	8002892 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	085b      	lsrs	r3, r3, #1
 8002876:	3b01      	subs	r3, #1
 8002878:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d109      	bne.n	8002892 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	3b01      	subs	r3, #1
 800288c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d06e      	beq.n	8002970 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d069      	beq.n	800296c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002898:	4b53      	ldr	r3, [pc, #332]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d105      	bne.n	80028b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028a4:	4b50      	ldr	r3, [pc, #320]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e0ad      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028b4:	4b4c      	ldr	r3, [pc, #304]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a4b      	ldr	r2, [pc, #300]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 80028ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028c0:	f7fe fd5e 	bl	8001380 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7fe fd5a 	bl	8001380 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e09a      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028da:	4b43      	ldr	r3, [pc, #268]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e6:	4b40      	ldr	r3, [pc, #256]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	4b40      	ldr	r3, [pc, #256]	; (80029ec <HAL_RCC_OscConfig+0x784>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028f6:	3a01      	subs	r2, #1
 80028f8:	0112      	lsls	r2, r2, #4
 80028fa:	4311      	orrs	r1, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002900:	0212      	lsls	r2, r2, #8
 8002902:	4311      	orrs	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002908:	0852      	lsrs	r2, r2, #1
 800290a:	3a01      	subs	r2, #1
 800290c:	0552      	lsls	r2, r2, #21
 800290e:	4311      	orrs	r1, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002914:	0852      	lsrs	r2, r2, #1
 8002916:	3a01      	subs	r2, #1
 8002918:	0652      	lsls	r2, r2, #25
 800291a:	4311      	orrs	r1, r2
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002920:	0912      	lsrs	r2, r2, #4
 8002922:	0452      	lsls	r2, r2, #17
 8002924:	430a      	orrs	r2, r1
 8002926:	4930      	ldr	r1, [pc, #192]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002928:	4313      	orrs	r3, r2
 800292a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800292c:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a2d      	ldr	r2, [pc, #180]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002932:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002936:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002938:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4a2a      	ldr	r2, [pc, #168]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 800293e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002942:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002944:	f7fe fd1c 	bl	8001380 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294c:	f7fe fd18 	bl	8001380 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e058      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295e:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800296a:	e050      	b.n	8002a0e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e04f      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002970:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d148      	bne.n	8002a0e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800297c:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a19      	ldr	r2, [pc, #100]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 8002982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002986:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002988:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a16      	ldr	r2, [pc, #88]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 800298e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002992:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002994:	f7fe fcf4 	bl	8001380 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800299c:	f7fe fcf0 	bl	8001380 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e030      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x734>
 80029ba:	e028      	b.n	8002a0e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d023      	beq.n	8002a0a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c2:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a08      	ldr	r2, [pc, #32]	; (80029e8 <HAL_RCC_OscConfig+0x780>)
 80029c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ce:	f7fe fcd7 	bl	8001380 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d4:	e00c      	b.n	80029f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029d6:	f7fe fcd3 	bl	8001380 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d905      	bls.n	80029f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e013      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
 80029e8:	40021000 	.word	0x40021000
 80029ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f0:	4b09      	ldr	r3, [pc, #36]	; (8002a18 <HAL_RCC_OscConfig+0x7b0>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1ec      	bne.n	80029d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029fc:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_RCC_OscConfig+0x7b0>)
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	4905      	ldr	r1, [pc, #20]	; (8002a18 <HAL_RCC_OscConfig+0x7b0>)
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCC_OscConfig+0x7b4>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	60cb      	str	r3, [r1, #12]
 8002a08:	e001      	b.n	8002a0e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	feeefffc 	.word	0xfeeefffc

08002a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0e7      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a34:	4b75      	ldr	r3, [pc, #468]	; (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d910      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b72      	ldr	r3, [pc, #456]	; (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	4970      	ldr	r1, [pc, #448]	; (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b6e      	ldr	r3, [pc, #440]	; (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0cf      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d010      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d908      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a80:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4960      	ldr	r1, [pc, #384]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d04c      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa6:	4b5a      	ldr	r3, [pc, #360]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d121      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e0a6      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002abe:	4b54      	ldr	r3, [pc, #336]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d115      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e09a      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ad6:	4b4e      	ldr	r3, [pc, #312]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e08e      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e086      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b46      	ldr	r3, [pc, #280]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4943      	ldr	r1, [pc, #268]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b08:	f7fe fc3a 	bl	8001380 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7fe fc36 	bl	8001380 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e06e      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b3a      	ldr	r3, [pc, #232]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d208      	bcs.n	8002b66 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b54:	4b2e      	ldr	r3, [pc, #184]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	492b      	ldr	r1, [pc, #172]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b66:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d210      	bcs.n	8002b96 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b74:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f023 0207 	bic.w	r2, r3, #7
 8002b7c:	4923      	ldr	r1, [pc, #140]	; (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b84:	4b21      	ldr	r3, [pc, #132]	; (8002c0c <HAL_RCC_ClockConfig+0x1ec>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d001      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e036      	b.n	8002c04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	4918      	ldr	r1, [pc, #96]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc0:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4910      	ldr	r1, [pc, #64]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bd4:	f000 f824 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_RCC_ClockConfig+0x1f0>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	490b      	ldr	r1, [pc, #44]	; (8002c14 <HAL_RCC_ClockConfig+0x1f4>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf0:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1f8>)
 8002bf2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1fc>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe fb71 	bl	80012e0 <HAL_InitTick>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c02:	7afb      	ldrb	r3, [r7, #11]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40021000 	.word	0x40021000
 8002c14:	080087ac 	.word	0x080087ac
 8002c18:	20000030 	.word	0x20000030
 8002c1c:	20000034 	.word	0x20000034

08002c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2e:	4b3e      	ldr	r3, [pc, #248]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c38:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x34>
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d121      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d11e      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c54:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c60:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e005      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c70:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c7c:	4a2b      	ldr	r2, [pc, #172]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c98:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	e004      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ca4:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ca6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d134      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cae:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d003      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0xac>
 8002cc4:	e005      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cc8:	617b      	str	r3, [r7, #20]
      break;
 8002cca:	e005      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cce:	617b      	str	r3, [r7, #20]
      break;
 8002cd0:	e002      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	617b      	str	r3, [r7, #20]
      break;
 8002cd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cd8:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	fb03 f202 	mul.w	r2, r3, r2
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	0e5b      	lsrs	r3, r3, #25
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d18:	69bb      	ldr	r3, [r7, #24]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	; 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	080087c4 	.word	0x080087c4
 8002d30:	00f42400 	.word	0x00f42400
 8002d34:	007a1200 	.word	0x007a1200

08002d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d3c:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000030 	.word	0x20000030

08002d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d54:	f7ff fff0 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	4904      	ldr	r1, [pc, #16]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d66:	5ccb      	ldrb	r3, [r1, r3]
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40021000 	.word	0x40021000
 8002d78:	080087bc 	.word	0x080087bc

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d80:	f7ff ffda 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0adb      	lsrs	r3, r3, #11
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4904      	ldr	r1, [pc, #16]	; (8002da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	080087bc 	.word	0x080087bc

08002da8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002db4:	4b2a      	ldr	r3, [pc, #168]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002dc0:	f7ff f9ee 	bl	80021a0 <HAL_PWREx_GetVoltageRange>
 8002dc4:	6178      	str	r0, [r7, #20]
 8002dc6:	e014      	b.n	8002df2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dc8:	4b25      	ldr	r3, [pc, #148]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dcc:	4a24      	ldr	r2, [pc, #144]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8002dd4:	4b22      	ldr	r3, [pc, #136]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002de0:	f7ff f9de 	bl	80021a0 <HAL_PWREx_GetVoltageRange>
 8002de4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002de6:	4b1e      	ldr	r3, [pc, #120]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df8:	d10b      	bne.n	8002e12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b80      	cmp	r3, #128	; 0x80
 8002dfe:	d919      	bls.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2ba0      	cmp	r3, #160	; 0xa0
 8002e04:	d902      	bls.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e06:	2302      	movs	r3, #2
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	e013      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	e010      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2b80      	cmp	r3, #128	; 0x80
 8002e16:	d902      	bls.n	8002e1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e18:	2303      	movs	r3, #3
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	e00a      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b80      	cmp	r3, #128	; 0x80
 8002e22:	d102      	bne.n	8002e2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e24:	2302      	movs	r3, #2
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	e004      	b.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b70      	cmp	r3, #112	; 0x70
 8002e2e:	d101      	bne.n	8002e34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e30:	2301      	movs	r3, #1
 8002e32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f023 0207 	bic.w	r2, r3, #7
 8002e3c:	4909      	ldr	r1, [pc, #36]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e44:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d001      	beq.n	8002e56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40022000 	.word	0x40022000

08002e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e70:	2300      	movs	r3, #0
 8002e72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e74:	2300      	movs	r3, #0
 8002e76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d041      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e8c:	d02a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e92:	d824      	bhi.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e94:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e98:	d008      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e9a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e9e:	d81e      	bhi.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00a      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ea8:	d010      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002eaa:	e018      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002eac:	4b86      	ldr	r3, [pc, #536]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a85      	ldr	r2, [pc, #532]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2100      	movs	r1, #0
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fabb 	bl	800343c <RCCEx_PLLSAI1_Config>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002eca:	e00c      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3320      	adds	r3, #32
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fba6 	bl	8003624 <RCCEx_PLLSAI2_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002edc:	e003      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	74fb      	strb	r3, [r7, #19]
      break;
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ee6:	7cfb      	ldrb	r3, [r7, #19]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eec:	4b76      	ldr	r3, [pc, #472]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002efa:	4973      	ldr	r1, [pc, #460]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f02:	e001      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f04:	7cfb      	ldrb	r3, [r7, #19]
 8002f06:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d041      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f1c:	d02a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f1e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f22:	d824      	bhi.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f28:	d008      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f2e:	d81e      	bhi.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f38:	d010      	beq.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f3a:	e018      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f3c:	4b62      	ldr	r3, [pc, #392]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a61      	ldr	r2, [pc, #388]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f46:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f48:	e015      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fa73 	bl	800343c <RCCEx_PLLSAI1_Config>
 8002f56:	4603      	mov	r3, r0
 8002f58:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f5a:	e00c      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3320      	adds	r3, #32
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fb5e 	bl	8003624 <RCCEx_PLLSAI2_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f6c:	e003      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	74fb      	strb	r3, [r7, #19]
      break;
 8002f72:	e000      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f76:	7cfb      	ldrb	r3, [r7, #19]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d10b      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f7c:	4b52      	ldr	r3, [pc, #328]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f82:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f8a:	494f      	ldr	r1, [pc, #316]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f92:	e001      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80a0 	beq.w	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002faa:	4b47      	ldr	r3, [pc, #284]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002fba:	2300      	movs	r3, #0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fc0:	4b41      	ldr	r3, [pc, #260]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	4a40      	ldr	r2, [pc, #256]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fca:	6593      	str	r3, [r2, #88]	; 0x58
 8002fcc:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fdc:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a3a      	ldr	r2, [pc, #232]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fe8:	f7fe f9ca 	bl	8001380 <HAL_GetTick>
 8002fec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fee:	e009      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff0:	f7fe f9c6 	bl	8001380 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d902      	bls.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	74fb      	strb	r3, [r7, #19]
        break;
 8003002:	e005      	b.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003004:	4b31      	ldr	r3, [pc, #196]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ef      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d15c      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003016:	4b2c      	ldr	r3, [pc, #176]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003020:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01f      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	429a      	cmp	r2, r3
 8003032:	d019      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003034:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800303e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003040:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003046:	4a20      	ldr	r2, [pc, #128]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003060:	4a19      	ldr	r2, [pc, #100]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fe f985 	bl	8001380 <HAL_GetTick>
 8003076:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003078:	e00b      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307a:	f7fe f981 	bl	8001380 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	f241 3288 	movw	r2, #5000	; 0x1388
 8003088:	4293      	cmp	r3, r2
 800308a:	d902      	bls.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	74fb      	strb	r3, [r7, #19]
            break;
 8003090:	e006      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003092:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ec      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a6:	4b08      	ldr	r3, [pc, #32]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b6:	4904      	ldr	r1, [pc, #16]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030be:	e009      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	74bb      	strb	r3, [r7, #18]
 80030c4:	e006      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80030c6:	bf00      	nop
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030d4:	7c7b      	ldrb	r3, [r7, #17]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d105      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030da:	4b9e      	ldr	r3, [pc, #632]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030de:	4a9d      	ldr	r2, [pc, #628]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030f2:	4b98      	ldr	r3, [pc, #608]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f8:	f023 0203 	bic.w	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	4994      	ldr	r1, [pc, #592]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00a      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003114:	4b8f      	ldr	r3, [pc, #572]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f023 020c 	bic.w	r2, r3, #12
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003122:	498c      	ldr	r1, [pc, #560]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003136:	4b87      	ldr	r3, [pc, #540]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	4983      	ldr	r1, [pc, #524]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0308 	and.w	r3, r3, #8
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003158:	4b7e      	ldr	r3, [pc, #504]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	497b      	ldr	r1, [pc, #492]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800317a:	4b76      	ldr	r3, [pc, #472]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003188:	4972      	ldr	r1, [pc, #456]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800319c:	4b6d      	ldr	r3, [pc, #436]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031aa:	496a      	ldr	r1, [pc, #424]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031be:	4b65      	ldr	r3, [pc, #404]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031cc:	4961      	ldr	r1, [pc, #388]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031e0:	4b5c      	ldr	r3, [pc, #368]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ee:	4959      	ldr	r1, [pc, #356]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003202:	4b54      	ldr	r3, [pc, #336]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003208:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003210:	4950      	ldr	r1, [pc, #320]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003224:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003232:	4948      	ldr	r1, [pc, #288]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003246:	4b43      	ldr	r3, [pc, #268]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	493f      	ldr	r1, [pc, #252]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d028      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003268:	4b3a      	ldr	r3, [pc, #232]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003276:	4937      	ldr	r1, [pc, #220]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003286:	d106      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003288:	4b32      	ldr	r3, [pc, #200]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	4a31      	ldr	r2, [pc, #196]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003292:	60d3      	str	r3, [r2, #12]
 8003294:	e011      	b.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800329a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800329e:	d10c      	bne.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f8c8 	bl	800343c <RCCEx_PLLSAI1_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032b0:	7cfb      	ldrb	r3, [r7, #19]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032b6:	7cfb      	ldrb	r3, [r7, #19]
 80032b8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d028      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032c6:	4b23      	ldr	r3, [pc, #140]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032cc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	491f      	ldr	r1, [pc, #124]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032e4:	d106      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032e6:	4b1b      	ldr	r3, [pc, #108]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	4a1a      	ldr	r2, [pc, #104]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032f0:	60d3      	str	r3, [r2, #12]
 80032f2:	e011      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032fc:	d10c      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3304      	adds	r3, #4
 8003302:	2101      	movs	r1, #1
 8003304:	4618      	mov	r0, r3
 8003306:	f000 f899 	bl	800343c <RCCEx_PLLSAI1_Config>
 800330a:	4603      	mov	r3, r0
 800330c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800330e:	7cfb      	ldrb	r3, [r7, #19]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003314:	7cfb      	ldrb	r3, [r7, #19]
 8003316:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d02b      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003332:	4908      	ldr	r1, [pc, #32]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003342:	d109      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a02      	ldr	r2, [pc, #8]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800334e:	60d3      	str	r3, [r2, #12]
 8003350:	e014      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003360:	d10c      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3304      	adds	r3, #4
 8003366:	2101      	movs	r1, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f000 f867 	bl	800343c <RCCEx_PLLSAI1_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003372:	7cfb      	ldrb	r3, [r7, #19]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d02f      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003388:	4b2b      	ldr	r3, [pc, #172]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003396:	4928      	ldr	r1, [pc, #160]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033a6:	d10d      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	2102      	movs	r1, #2
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 f844 	bl	800343c <RCCEx_PLLSAI1_Config>
 80033b4:	4603      	mov	r3, r0
 80033b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b8:	7cfb      	ldrb	r3, [r7, #19]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d014      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033be:	7cfb      	ldrb	r3, [r7, #19]
 80033c0:	74bb      	strb	r3, [r7, #18]
 80033c2:	e011      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033cc:	d10c      	bne.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3320      	adds	r3, #32
 80033d2:	2102      	movs	r1, #2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f000 f925 	bl	8003624 <RCCEx_PLLSAI2_Config>
 80033da:	4603      	mov	r3, r0
 80033dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033de:	7cfb      	ldrb	r3, [r7, #19]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80033e4:	7cfb      	ldrb	r3, [r7, #19]
 80033e6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033f4:	4b10      	ldr	r3, [pc, #64]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003402:	490d      	ldr	r1, [pc, #52]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003404:	4313      	orrs	r3, r2
 8003406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003426:	4904      	ldr	r1, [pc, #16]	; (8003438 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800342e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000

0800343c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800344a:	4b75      	ldr	r3, [pc, #468]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d018      	beq.n	8003488 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003456:	4b72      	ldr	r3, [pc, #456]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f003 0203 	and.w	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d10d      	bne.n	8003482 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
       ||
 800346a:	2b00      	cmp	r3, #0
 800346c:	d009      	beq.n	8003482 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800346e:	4b6c      	ldr	r3, [pc, #432]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	091b      	lsrs	r3, r3, #4
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
       ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d047      	beq.n	8003512 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
 8003486:	e044      	b.n	8003512 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d018      	beq.n	80034c2 <RCCEx_PLLSAI1_Config+0x86>
 8003490:	2b03      	cmp	r3, #3
 8003492:	d825      	bhi.n	80034e0 <RCCEx_PLLSAI1_Config+0xa4>
 8003494:	2b01      	cmp	r3, #1
 8003496:	d002      	beq.n	800349e <RCCEx_PLLSAI1_Config+0x62>
 8003498:	2b02      	cmp	r3, #2
 800349a:	d009      	beq.n	80034b0 <RCCEx_PLLSAI1_Config+0x74>
 800349c:	e020      	b.n	80034e0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800349e:	4b60      	ldr	r3, [pc, #384]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d11d      	bne.n	80034e6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ae:	e01a      	b.n	80034e6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034b0:	4b5b      	ldr	r3, [pc, #364]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d116      	bne.n	80034ea <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034c0:	e013      	b.n	80034ea <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034c2:	4b57      	ldr	r3, [pc, #348]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ce:	4b54      	ldr	r3, [pc, #336]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d109      	bne.n	80034ee <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034de:	e006      	b.n	80034ee <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
      break;
 80034e4:	e004      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034e6:	bf00      	nop
 80034e8:	e002      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034ea:	bf00      	nop
 80034ec:	e000      	b.n	80034f0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10d      	bne.n	8003512 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034f6:	4b4a      	ldr	r3, [pc, #296]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6819      	ldr	r1, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	3b01      	subs	r3, #1
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	430b      	orrs	r3, r1
 800350c:	4944      	ldr	r1, [pc, #272]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800350e:	4313      	orrs	r3, r2
 8003510:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d17d      	bne.n	8003614 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003518:	4b41      	ldr	r3, [pc, #260]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a40      	ldr	r2, [pc, #256]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800351e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003522:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003524:	f7fd ff2c 	bl	8001380 <HAL_GetTick>
 8003528:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800352a:	e009      	b.n	8003540 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800352c:	f7fd ff28 	bl	8001380 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d902      	bls.n	8003540 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	73fb      	strb	r3, [r7, #15]
        break;
 800353e:	e005      	b.n	800354c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003540:	4b37      	ldr	r3, [pc, #220]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1ef      	bne.n	800352c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d160      	bne.n	8003614 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d111      	bne.n	800357c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003560:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6892      	ldr	r2, [r2, #8]
 8003568:	0211      	lsls	r1, r2, #8
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68d2      	ldr	r2, [r2, #12]
 800356e:	0912      	lsrs	r2, r2, #4
 8003570:	0452      	lsls	r2, r2, #17
 8003572:	430a      	orrs	r2, r1
 8003574:	492a      	ldr	r1, [pc, #168]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003576:	4313      	orrs	r3, r2
 8003578:	610b      	str	r3, [r1, #16]
 800357a:	e027      	b.n	80035cc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d112      	bne.n	80035a8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003582:	4b27      	ldr	r3, [pc, #156]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800358a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6892      	ldr	r2, [r2, #8]
 8003592:	0211      	lsls	r1, r2, #8
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6912      	ldr	r2, [r2, #16]
 8003598:	0852      	lsrs	r2, r2, #1
 800359a:	3a01      	subs	r2, #1
 800359c:	0552      	lsls	r2, r2, #21
 800359e:	430a      	orrs	r2, r1
 80035a0:	491f      	ldr	r1, [pc, #124]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	610b      	str	r3, [r1, #16]
 80035a6:	e011      	b.n	80035cc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035a8:	4b1d      	ldr	r3, [pc, #116]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80035b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	6892      	ldr	r2, [r2, #8]
 80035b8:	0211      	lsls	r1, r2, #8
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6952      	ldr	r2, [r2, #20]
 80035be:	0852      	lsrs	r2, r2, #1
 80035c0:	3a01      	subs	r2, #1
 80035c2:	0652      	lsls	r2, r2, #25
 80035c4:	430a      	orrs	r2, r1
 80035c6:	4916      	ldr	r1, [pc, #88]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035cc:	4b14      	ldr	r3, [pc, #80]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a13      	ldr	r2, [pc, #76]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d8:	f7fd fed2 	bl	8001380 <HAL_GetTick>
 80035dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035de:	e009      	b.n	80035f4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035e0:	f7fd fece 	bl	8001380 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d902      	bls.n	80035f4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	73fb      	strb	r3, [r7, #15]
          break;
 80035f2:	e005      	b.n	8003600 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035f4:	4b0a      	ldr	r3, [pc, #40]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0ef      	beq.n	80035e0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003600:	7bfb      	ldrb	r3, [r7, #15]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003608:	691a      	ldr	r2, [r3, #16]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	4904      	ldr	r1, [pc, #16]	; (8003620 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003610:	4313      	orrs	r3, r2
 8003612:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003614:	7bfb      	ldrb	r3, [r7, #15]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40021000 	.word	0x40021000

08003624 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003632:	4b6a      	ldr	r3, [pc, #424]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d018      	beq.n	8003670 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800363e:	4b67      	ldr	r3, [pc, #412]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f003 0203 	and.w	r2, r3, #3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	429a      	cmp	r2, r3
 800364c:	d10d      	bne.n	800366a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
       ||
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003656:	4b61      	ldr	r3, [pc, #388]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
       ||
 8003666:	429a      	cmp	r2, r3
 8003668:	d047      	beq.n	80036fa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
 800366e:	e044      	b.n	80036fa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d018      	beq.n	80036aa <RCCEx_PLLSAI2_Config+0x86>
 8003678:	2b03      	cmp	r3, #3
 800367a:	d825      	bhi.n	80036c8 <RCCEx_PLLSAI2_Config+0xa4>
 800367c:	2b01      	cmp	r3, #1
 800367e:	d002      	beq.n	8003686 <RCCEx_PLLSAI2_Config+0x62>
 8003680:	2b02      	cmp	r3, #2
 8003682:	d009      	beq.n	8003698 <RCCEx_PLLSAI2_Config+0x74>
 8003684:	e020      	b.n	80036c8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003686:	4b55      	ldr	r3, [pc, #340]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d11d      	bne.n	80036ce <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003696:	e01a      	b.n	80036ce <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003698:	4b50      	ldr	r3, [pc, #320]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d116      	bne.n	80036d2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a8:	e013      	b.n	80036d2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036aa:	4b4c      	ldr	r3, [pc, #304]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10f      	bne.n	80036d6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036b6:	4b49      	ldr	r3, [pc, #292]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d109      	bne.n	80036d6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036c6:	e006      	b.n	80036d6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
      break;
 80036cc:	e004      	b.n	80036d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ce:	bf00      	nop
 80036d0:	e002      	b.n	80036d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036d2:	bf00      	nop
 80036d4:	e000      	b.n	80036d8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036d8:	7bfb      	ldrb	r3, [r7, #15]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036de:	4b3f      	ldr	r3, [pc, #252]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6819      	ldr	r1, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	430b      	orrs	r3, r1
 80036f4:	4939      	ldr	r1, [pc, #228]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036fa:	7bfb      	ldrb	r3, [r7, #15]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d167      	bne.n	80037d0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003700:	4b36      	ldr	r3, [pc, #216]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a35      	ldr	r2, [pc, #212]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800370c:	f7fd fe38 	bl	8001380 <HAL_GetTick>
 8003710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003712:	e009      	b.n	8003728 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003714:	f7fd fe34 	bl	8001380 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d902      	bls.n	8003728 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	73fb      	strb	r3, [r7, #15]
        break;
 8003726:	e005      	b.n	8003734 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003728:	4b2c      	ldr	r3, [pc, #176]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1ef      	bne.n	8003714 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d14a      	bne.n	80037d0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d111      	bne.n	8003764 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003740:	4b26      	ldr	r3, [pc, #152]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003742:	695b      	ldr	r3, [r3, #20]
 8003744:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003748:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6892      	ldr	r2, [r2, #8]
 8003750:	0211      	lsls	r1, r2, #8
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68d2      	ldr	r2, [r2, #12]
 8003756:	0912      	lsrs	r2, r2, #4
 8003758:	0452      	lsls	r2, r2, #17
 800375a:	430a      	orrs	r2, r1
 800375c:	491f      	ldr	r1, [pc, #124]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800375e:	4313      	orrs	r3, r2
 8003760:	614b      	str	r3, [r1, #20]
 8003762:	e011      	b.n	8003788 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003764:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800376c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6892      	ldr	r2, [r2, #8]
 8003774:	0211      	lsls	r1, r2, #8
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6912      	ldr	r2, [r2, #16]
 800377a:	0852      	lsrs	r2, r2, #1
 800377c:	3a01      	subs	r2, #1
 800377e:	0652      	lsls	r2, r2, #25
 8003780:	430a      	orrs	r2, r1
 8003782:	4916      	ldr	r1, [pc, #88]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003784:	4313      	orrs	r3, r2
 8003786:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003788:	4b14      	ldr	r3, [pc, #80]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a13      	ldr	r2, [pc, #76]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 800378e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003792:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003794:	f7fd fdf4 	bl	8001380 <HAL_GetTick>
 8003798:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800379a:	e009      	b.n	80037b0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800379c:	f7fd fdf0 	bl	8001380 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d902      	bls.n	80037b0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	73fb      	strb	r3, [r7, #15]
          break;
 80037ae:	e005      	b.n	80037bc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037b0:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0ef      	beq.n	800379c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c4:	695a      	ldr	r2, [r3, #20]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	4904      	ldr	r1, [pc, #16]	; (80037dc <RCCEx_PLLSAI2_Config+0x1b8>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40021000 	.word	0x40021000

080037e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e049      	b.n	8003886 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fd fbf4 	bl	8000ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	4619      	mov	r1, r3
 800381e:	4610      	mov	r0, r2
 8003820:	f000 fa9a 	bl	8003d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d001      	beq.n	80038a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e04f      	b.n	8003948 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2202      	movs	r2, #2
 80038ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0201 	orr.w	r2, r2, #1
 80038be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a23      	ldr	r2, [pc, #140]	; (8003954 <HAL_TIM_Base_Start_IT+0xc4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01d      	beq.n	8003906 <HAL_TIM_Base_Start_IT+0x76>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d2:	d018      	beq.n	8003906 <HAL_TIM_Base_Start_IT+0x76>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1f      	ldr	r2, [pc, #124]	; (8003958 <HAL_TIM_Base_Start_IT+0xc8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_TIM_Base_Start_IT+0x76>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1e      	ldr	r2, [pc, #120]	; (800395c <HAL_TIM_Base_Start_IT+0xcc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <HAL_TIM_Base_Start_IT+0x76>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a1c      	ldr	r2, [pc, #112]	; (8003960 <HAL_TIM_Base_Start_IT+0xd0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_TIM_Base_Start_IT+0x76>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <HAL_TIM_Base_Start_IT+0xd4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_TIM_Base_Start_IT+0x76>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a19      	ldr	r2, [pc, #100]	; (8003968 <HAL_TIM_Base_Start_IT+0xd8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d115      	bne.n	8003932 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	4b17      	ldr	r3, [pc, #92]	; (800396c <HAL_TIM_Base_Start_IT+0xdc>)
 800390e:	4013      	ands	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2b06      	cmp	r3, #6
 8003916:	d015      	beq.n	8003944 <HAL_TIM_Base_Start_IT+0xb4>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391e:	d011      	beq.n	8003944 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f042 0201 	orr.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003930:	e008      	b.n	8003944 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0201 	orr.w	r2, r2, #1
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e000      	b.n	8003946 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003944:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	40012c00 	.word	0x40012c00
 8003958:	40000400 	.word	0x40000400
 800395c:	40000800 	.word	0x40000800
 8003960:	40000c00 	.word	0x40000c00
 8003964:	40013400 	.word	0x40013400
 8003968:	40014000 	.word	0x40014000
 800396c:	00010007 	.word	0x00010007

08003970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d020      	beq.n	80039d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01b      	beq.n	80039d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0202 	mvn.w	r2, #2
 80039a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f9ad 	bl	8003d1a <HAL_TIM_IC_CaptureCallback>
 80039c0:	e005      	b.n	80039ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f99f 	bl	8003d06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f9b0 	bl	8003d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d020      	beq.n	8003a20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 0304 	and.w	r3, r3, #4
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01b      	beq.n	8003a20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0204 	mvn.w	r2, #4
 80039f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2202      	movs	r2, #2
 80039f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f987 	bl	8003d1a <HAL_TIM_IC_CaptureCallback>
 8003a0c:	e005      	b.n	8003a1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f979 	bl	8003d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f98a 	bl	8003d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d020      	beq.n	8003a6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 0308 	and.w	r3, r3, #8
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01b      	beq.n	8003a6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0208 	mvn.w	r2, #8
 8003a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2204      	movs	r2, #4
 8003a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f961 	bl	8003d1a <HAL_TIM_IC_CaptureCallback>
 8003a58:	e005      	b.n	8003a66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f953 	bl	8003d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f964 	bl	8003d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f003 0310 	and.w	r3, r3, #16
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d020      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f003 0310 	and.w	r3, r3, #16
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d01b      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0210 	mvn.w	r2, #16
 8003a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2208      	movs	r2, #8
 8003a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f93b 	bl	8003d1a <HAL_TIM_IC_CaptureCallback>
 8003aa4:	e005      	b.n	8003ab2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f92d 	bl	8003d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f93e 	bl	8003d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00c      	beq.n	8003adc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f06f 0201 	mvn.w	r2, #1
 8003ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7fd f824 	bl	8000b24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00c      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 faf2 	bl	80040e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00c      	beq.n	8003b24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d007      	beq.n	8003b24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 faea 	bl	80040f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00c      	beq.n	8003b48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d007      	beq.n	8003b48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f8fd 	bl	8003d42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00c      	beq.n	8003b6c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d007      	beq.n	8003b6c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f06f 0220 	mvn.w	r2, #32
 8003b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fab2 	bl	80040d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d101      	bne.n	8003b90 <HAL_TIM_ConfigClockSource+0x1c>
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	e0b6      	b.n	8003cfe <HAL_TIM_ConfigClockSource+0x18a>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bcc:	d03e      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0xd8>
 8003bce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd2:	f200 8087 	bhi.w	8003ce4 <HAL_TIM_ConfigClockSource+0x170>
 8003bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bda:	f000 8086 	beq.w	8003cea <HAL_TIM_ConfigClockSource+0x176>
 8003bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003be2:	d87f      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x170>
 8003be4:	2b70      	cmp	r3, #112	; 0x70
 8003be6:	d01a      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0xaa>
 8003be8:	2b70      	cmp	r3, #112	; 0x70
 8003bea:	d87b      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x170>
 8003bec:	2b60      	cmp	r3, #96	; 0x60
 8003bee:	d050      	beq.n	8003c92 <HAL_TIM_ConfigClockSource+0x11e>
 8003bf0:	2b60      	cmp	r3, #96	; 0x60
 8003bf2:	d877      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x170>
 8003bf4:	2b50      	cmp	r3, #80	; 0x50
 8003bf6:	d03c      	beq.n	8003c72 <HAL_TIM_ConfigClockSource+0xfe>
 8003bf8:	2b50      	cmp	r3, #80	; 0x50
 8003bfa:	d873      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x170>
 8003bfc:	2b40      	cmp	r3, #64	; 0x40
 8003bfe:	d058      	beq.n	8003cb2 <HAL_TIM_ConfigClockSource+0x13e>
 8003c00:	2b40      	cmp	r3, #64	; 0x40
 8003c02:	d86f      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x170>
 8003c04:	2b30      	cmp	r3, #48	; 0x30
 8003c06:	d064      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8003c08:	2b30      	cmp	r3, #48	; 0x30
 8003c0a:	d86b      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x170>
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d060      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d867      	bhi.n	8003ce4 <HAL_TIM_ConfigClockSource+0x170>
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d05c      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8003c18:	2b10      	cmp	r3, #16
 8003c1a:	d05a      	beq.n	8003cd2 <HAL_TIM_ConfigClockSource+0x15e>
 8003c1c:	e062      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c2e:	f000 f9a7 	bl	8003f80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	609a      	str	r2, [r3, #8]
      break;
 8003c4a:	e04f      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c5c:	f000 f990 	bl	8003f80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c6e:	609a      	str	r2, [r3, #8]
      break;
 8003c70:	e03c      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f000 f904 	bl	8003e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2150      	movs	r1, #80	; 0x50
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f000 f95d 	bl	8003f4a <TIM_ITRx_SetConfig>
      break;
 8003c90:	e02c      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	f000 f923 	bl	8003eea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2160      	movs	r1, #96	; 0x60
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f94d 	bl	8003f4a <TIM_ITRx_SetConfig>
      break;
 8003cb0:	e01c      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f000 f8e4 	bl	8003e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2140      	movs	r1, #64	; 0x40
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 f93d 	bl	8003f4a <TIM_ITRx_SetConfig>
      break;
 8003cd0:	e00c      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	4610      	mov	r0, r2
 8003cde:	f000 f934 	bl	8003f4a <TIM_ITRx_SetConfig>
      break;
 8003ce2:	e003      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce8:	e000      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003cea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d36:	bf00      	nop
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a40      	ldr	r2, [pc, #256]	; (8003e6c <TIM_Base_SetConfig+0x114>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <TIM_Base_SetConfig+0x40>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d00f      	beq.n	8003d98 <TIM_Base_SetConfig+0x40>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a3d      	ldr	r2, [pc, #244]	; (8003e70 <TIM_Base_SetConfig+0x118>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00b      	beq.n	8003d98 <TIM_Base_SetConfig+0x40>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a3c      	ldr	r2, [pc, #240]	; (8003e74 <TIM_Base_SetConfig+0x11c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d007      	beq.n	8003d98 <TIM_Base_SetConfig+0x40>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a3b      	ldr	r2, [pc, #236]	; (8003e78 <TIM_Base_SetConfig+0x120>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <TIM_Base_SetConfig+0x40>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a3a      	ldr	r2, [pc, #232]	; (8003e7c <TIM_Base_SetConfig+0x124>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d108      	bne.n	8003daa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a2f      	ldr	r2, [pc, #188]	; (8003e6c <TIM_Base_SetConfig+0x114>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01f      	beq.n	8003df2 <TIM_Base_SetConfig+0x9a>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db8:	d01b      	beq.n	8003df2 <TIM_Base_SetConfig+0x9a>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a2c      	ldr	r2, [pc, #176]	; (8003e70 <TIM_Base_SetConfig+0x118>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d017      	beq.n	8003df2 <TIM_Base_SetConfig+0x9a>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a2b      	ldr	r2, [pc, #172]	; (8003e74 <TIM_Base_SetConfig+0x11c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d013      	beq.n	8003df2 <TIM_Base_SetConfig+0x9a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a2a      	ldr	r2, [pc, #168]	; (8003e78 <TIM_Base_SetConfig+0x120>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00f      	beq.n	8003df2 <TIM_Base_SetConfig+0x9a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a29      	ldr	r2, [pc, #164]	; (8003e7c <TIM_Base_SetConfig+0x124>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00b      	beq.n	8003df2 <TIM_Base_SetConfig+0x9a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a28      	ldr	r2, [pc, #160]	; (8003e80 <TIM_Base_SetConfig+0x128>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d007      	beq.n	8003df2 <TIM_Base_SetConfig+0x9a>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a27      	ldr	r2, [pc, #156]	; (8003e84 <TIM_Base_SetConfig+0x12c>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d003      	beq.n	8003df2 <TIM_Base_SetConfig+0x9a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a26      	ldr	r2, [pc, #152]	; (8003e88 <TIM_Base_SetConfig+0x130>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d108      	bne.n	8003e04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a10      	ldr	r2, [pc, #64]	; (8003e6c <TIM_Base_SetConfig+0x114>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00f      	beq.n	8003e50 <TIM_Base_SetConfig+0xf8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a12      	ldr	r2, [pc, #72]	; (8003e7c <TIM_Base_SetConfig+0x124>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00b      	beq.n	8003e50 <TIM_Base_SetConfig+0xf8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a11      	ldr	r2, [pc, #68]	; (8003e80 <TIM_Base_SetConfig+0x128>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d007      	beq.n	8003e50 <TIM_Base_SetConfig+0xf8>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	4a10      	ldr	r2, [pc, #64]	; (8003e84 <TIM_Base_SetConfig+0x12c>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d003      	beq.n	8003e50 <TIM_Base_SetConfig+0xf8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4a0f      	ldr	r2, [pc, #60]	; (8003e88 <TIM_Base_SetConfig+0x130>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d103      	bne.n	8003e58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	615a      	str	r2, [r3, #20]
}
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800
 8003e78:	40000c00 	.word	0x40000c00
 8003e7c:	40013400 	.word	0x40013400
 8003e80:	40014000 	.word	0x40014000
 8003e84:	40014400 	.word	0x40014400
 8003e88:	40014800 	.word	0x40014800

08003e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	f023 0201 	bic.w	r2, r3, #1
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f023 030a 	bic.w	r3, r3, #10
 8003ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	621a      	str	r2, [r3, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b087      	sub	sp, #28
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f023 0210 	bic.w	r2, r3, #16
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	031b      	lsls	r3, r3, #12
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b085      	sub	sp, #20
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	f043 0307 	orr.w	r3, r3, #7
 8003f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	609a      	str	r2, [r3, #8]
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	021a      	lsls	r2, r3, #8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	609a      	str	r2, [r3, #8]
}
 8003fb4:	bf00      	nop
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e068      	b.n	80040aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a2e      	ldr	r2, [pc, #184]	; (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d004      	beq.n	800400c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a2d      	ldr	r2, [pc, #180]	; (80040bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d108      	bne.n	800401e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004012:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004024:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4313      	orrs	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a1e      	ldr	r2, [pc, #120]	; (80040b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d01d      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800404a:	d018      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a1b      	ldr	r2, [pc, #108]	; (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1a      	ldr	r2, [pc, #104]	; (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00e      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a18      	ldr	r2, [pc, #96]	; (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d009      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a13      	ldr	r2, [pc, #76]	; (80040bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d004      	beq.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a14      	ldr	r2, [pc, #80]	; (80040cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d10c      	bne.n	8004098 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004084:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	4313      	orrs	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40012c00 	.word	0x40012c00
 80040bc:	40013400 	.word	0x40013400
 80040c0:	40000400 	.word	0x40000400
 80040c4:	40000800 	.word	0x40000800
 80040c8:	40000c00 	.word	0x40000c00
 80040cc:	40014000 	.word	0x40014000

080040d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e040      	b.n	80041a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fc ff86 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2224      	movs	r2, #36	; 0x24
 8004138:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 0201 	bic.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fdea 	bl	8004d2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fb2f 	bl	80047bc <UART_SetConfig>
 800415e:	4603      	mov	r3, r0
 8004160:	2b01      	cmp	r3, #1
 8004162:	d101      	bne.n	8004168 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e01b      	b.n	80041a0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004176:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689a      	ldr	r2, [r3, #8]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004186:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f042 0201 	orr.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fe69 	bl	8004e70 <UART_CheckIdleState>
 800419e:	4603      	mov	r3, r0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b0ba      	sub	sp, #232	; 0xe8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80041d6:	4013      	ands	r3, r2
 80041d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d115      	bne.n	8004210 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00f      	beq.n	8004210 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d009      	beq.n	8004210 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 82ae 	beq.w	8004762 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	4798      	blx	r3
      }
      return;
 800420e:	e2a8      	b.n	8004762 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8117 	beq.w	8004448 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800421a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004226:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800422a:	4b85      	ldr	r3, [pc, #532]	; (8004440 <HAL_UART_IRQHandler+0x298>)
 800422c:	4013      	ands	r3, r2
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 810a 	beq.w	8004448 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d011      	beq.n	8004264 <HAL_UART_IRQHandler+0xbc>
 8004240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2201      	movs	r2, #1
 8004252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425a:	f043 0201 	orr.w	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d011      	beq.n	8004294 <HAL_UART_IRQHandler+0xec>
 8004270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00b      	beq.n	8004294 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2202      	movs	r2, #2
 8004282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428a:	f043 0204 	orr.w	r2, r3, #4
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d011      	beq.n	80042c4 <HAL_UART_IRQHandler+0x11c>
 80042a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00b      	beq.n	80042c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2204      	movs	r2, #4
 80042b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ba:	f043 0202 	orr.w	r2, r3, #2
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d017      	beq.n	8004300 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d105      	bne.n	80042e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00b      	beq.n	8004300 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2208      	movs	r2, #8
 80042ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f6:	f043 0208 	orr.w	r2, r3, #8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004308:	2b00      	cmp	r3, #0
 800430a:	d012      	beq.n	8004332 <HAL_UART_IRQHandler+0x18a>
 800430c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00c      	beq.n	8004332 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004328:	f043 0220 	orr.w	r2, r3, #32
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8214 	beq.w	8004766 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800433e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00d      	beq.n	8004366 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800434a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437a:	2b40      	cmp	r3, #64	; 0x40
 800437c:	d005      	beq.n	800438a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800437e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004382:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004386:	2b00      	cmp	r3, #0
 8004388:	d04f      	beq.n	800442a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fe7f 	bl	800508e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d141      	bne.n	8004422 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3308      	adds	r3, #8
 80043a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3308      	adds	r3, #8
 80043c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1d9      	bne.n	800439e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d013      	beq.n	800441a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f6:	4a13      	ldr	r2, [pc, #76]	; (8004444 <HAL_UART_IRQHandler+0x29c>)
 80043f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fd fb66 	bl	8001ad0 <HAL_DMA_Abort_IT>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d017      	beq.n	800443a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004414:	4610      	mov	r0, r2
 8004416:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004418:	e00f      	b.n	800443a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f9b8 	bl	8004790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004420:	e00b      	b.n	800443a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f9b4 	bl	8004790 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	e007      	b.n	800443a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9b0 	bl	8004790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004438:	e195      	b.n	8004766 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443a:	bf00      	nop
    return;
 800443c:	e193      	b.n	8004766 <HAL_UART_IRQHandler+0x5be>
 800443e:	bf00      	nop
 8004440:	04000120 	.word	0x04000120
 8004444:	08005157 	.word	0x08005157

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444c:	2b01      	cmp	r3, #1
 800444e:	f040 814e 	bne.w	80046ee <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 8147 	beq.w	80046ee <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8140 	beq.w	80046ee <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2210      	movs	r2, #16
 8004474:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	f040 80b8 	bne.w	80045f6 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004492:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 8167 	beq.w	800476a <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044a6:	429a      	cmp	r2, r3
 80044a8:	f080 815f 	bcs.w	800476a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f040 8086 	bne.w	80045d4 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044d4:	e853 3f00 	ldrex	r3, [r3]
 80044d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004502:	e841 2300 	strex	r3, r2, [r1]
 8004506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800450a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1da      	bne.n	80044c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3308      	adds	r3, #8
 8004518:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800451c:	e853 3f00 	ldrex	r3, [r3]
 8004520:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004524:	f023 0301 	bic.w	r3, r3, #1
 8004528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	3308      	adds	r3, #8
 8004532:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004536:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800453a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800453e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004548:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e1      	bne.n	8004512 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3308      	adds	r3, #8
 8004554:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800455e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004560:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004564:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	3308      	adds	r3, #8
 800456e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004572:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004574:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004578:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e3      	bne.n	800454e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a4:	f023 0310 	bic.w	r3, r3, #16
 80045a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	461a      	mov	r2, r3
 80045b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80045b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e4      	bne.n	8004594 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7fd fa40 	bl	8001a54 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	4619      	mov	r1, r3
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f8d8 	bl	80047a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045f4:	e0b9      	b.n	800476a <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004602:	b29b      	uxth	r3, r3
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 80ab 	beq.w	800476e <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004618:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80a6 	beq.w	800476e <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004632:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004636:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004644:	647b      	str	r3, [r7, #68]	; 0x44
 8004646:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800464a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e4      	bne.n	8004622 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3308      	adds	r3, #8
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	e853 3f00 	ldrex	r3, [r3]
 8004666:	623b      	str	r3, [r7, #32]
   return(result);
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	f023 0301 	bic.w	r3, r3, #1
 800466e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3308      	adds	r3, #8
 8004678:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800467c:	633a      	str	r2, [r7, #48]	; 0x30
 800467e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004682:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004684:	e841 2300 	strex	r3, r2, [r1]
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	2b00      	cmp	r3, #0
 800468e:	d1e3      	bne.n	8004658 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f023 0310 	bic.w	r3, r3, #16
 80046b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	461a      	mov	r2, r3
 80046c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046c6:	61fb      	str	r3, [r7, #28]
 80046c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	69b9      	ldr	r1, [r7, #24]
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	617b      	str	r3, [r7, #20]
   return(result);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e4      	bne.n	80046a4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046e4:	4619      	mov	r1, r3
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f85c 	bl	80047a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046ec:	e03f      	b.n	800476e <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00e      	beq.n	8004718 <HAL_UART_IRQHandler+0x570>
 80046fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d008      	beq.n	8004718 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800470e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fd60 	bl	80051d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004716:	e02d      	b.n	8004774 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800471c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00e      	beq.n	8004742 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01c      	beq.n	8004772 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
    }
    return;
 8004740:	e017      	b.n	8004772 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d012      	beq.n	8004774 <HAL_UART_IRQHandler+0x5cc>
 800474e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00c      	beq.n	8004774 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fd11 	bl	8005182 <UART_EndTransmit_IT>
    return;
 8004760:	e008      	b.n	8004774 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004762:	bf00      	nop
 8004764:	e006      	b.n	8004774 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004766:	bf00      	nop
 8004768:	e004      	b.n	8004774 <HAL_UART_IRQHandler+0x5cc>
      return;
 800476a:	bf00      	nop
 800476c:	e002      	b.n	8004774 <HAL_UART_IRQHandler+0x5cc>
      return;
 800476e:	bf00      	nop
 8004770:	e000      	b.n	8004774 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004772:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004774:	37e8      	adds	r7, #232	; 0xe8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop

0800477c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c0:	b08a      	sub	sp, #40	; 0x28
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	431a      	orrs	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	431a      	orrs	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	4ba4      	ldr	r3, [pc, #656]	; (8004a7c <UART_SetConfig+0x2c0>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047f4:	430b      	orrs	r3, r1
 80047f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	68da      	ldr	r2, [r3, #12]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a99      	ldr	r2, [pc, #612]	; (8004a80 <UART_SetConfig+0x2c4>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d004      	beq.n	8004828 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004824:	4313      	orrs	r3, r2
 8004826:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004838:	430a      	orrs	r2, r1
 800483a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a90      	ldr	r2, [pc, #576]	; (8004a84 <UART_SetConfig+0x2c8>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d126      	bne.n	8004894 <UART_SetConfig+0xd8>
 8004846:	4b90      	ldr	r3, [pc, #576]	; (8004a88 <UART_SetConfig+0x2cc>)
 8004848:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	2b03      	cmp	r3, #3
 8004852:	d81b      	bhi.n	800488c <UART_SetConfig+0xd0>
 8004854:	a201      	add	r2, pc, #4	; (adr r2, 800485c <UART_SetConfig+0xa0>)
 8004856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485a:	bf00      	nop
 800485c:	0800486d 	.word	0x0800486d
 8004860:	0800487d 	.word	0x0800487d
 8004864:	08004875 	.word	0x08004875
 8004868:	08004885 	.word	0x08004885
 800486c:	2301      	movs	r3, #1
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004872:	e116      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004874:	2302      	movs	r3, #2
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800487a:	e112      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 800487c:	2304      	movs	r3, #4
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004882:	e10e      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004884:	2308      	movs	r3, #8
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800488a:	e10a      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 800488c:	2310      	movs	r3, #16
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004892:	e106      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a7c      	ldr	r2, [pc, #496]	; (8004a8c <UART_SetConfig+0x2d0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d138      	bne.n	8004910 <UART_SetConfig+0x154>
 800489e:	4b7a      	ldr	r3, [pc, #488]	; (8004a88 <UART_SetConfig+0x2cc>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	2b0c      	cmp	r3, #12
 80048aa:	d82d      	bhi.n	8004908 <UART_SetConfig+0x14c>
 80048ac:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <UART_SetConfig+0xf8>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	080048e9 	.word	0x080048e9
 80048b8:	08004909 	.word	0x08004909
 80048bc:	08004909 	.word	0x08004909
 80048c0:	08004909 	.word	0x08004909
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	08004909 	.word	0x08004909
 80048cc:	08004909 	.word	0x08004909
 80048d0:	08004909 	.word	0x08004909
 80048d4:	080048f1 	.word	0x080048f1
 80048d8:	08004909 	.word	0x08004909
 80048dc:	08004909 	.word	0x08004909
 80048e0:	08004909 	.word	0x08004909
 80048e4:	08004901 	.word	0x08004901
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048ee:	e0d8      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 80048f0:	2302      	movs	r3, #2
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048f6:	e0d4      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048fe:	e0d0      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004900:	2308      	movs	r3, #8
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004906:	e0cc      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004908:	2310      	movs	r3, #16
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800490e:	e0c8      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a5e      	ldr	r2, [pc, #376]	; (8004a90 <UART_SetConfig+0x2d4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d125      	bne.n	8004966 <UART_SetConfig+0x1aa>
 800491a:	4b5b      	ldr	r3, [pc, #364]	; (8004a88 <UART_SetConfig+0x2cc>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004924:	2b30      	cmp	r3, #48	; 0x30
 8004926:	d016      	beq.n	8004956 <UART_SetConfig+0x19a>
 8004928:	2b30      	cmp	r3, #48	; 0x30
 800492a:	d818      	bhi.n	800495e <UART_SetConfig+0x1a2>
 800492c:	2b20      	cmp	r3, #32
 800492e:	d00a      	beq.n	8004946 <UART_SetConfig+0x18a>
 8004930:	2b20      	cmp	r3, #32
 8004932:	d814      	bhi.n	800495e <UART_SetConfig+0x1a2>
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <UART_SetConfig+0x182>
 8004938:	2b10      	cmp	r3, #16
 800493a:	d008      	beq.n	800494e <UART_SetConfig+0x192>
 800493c:	e00f      	b.n	800495e <UART_SetConfig+0x1a2>
 800493e:	2300      	movs	r3, #0
 8004940:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004944:	e0ad      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004946:	2302      	movs	r3, #2
 8004948:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800494c:	e0a9      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 800494e:	2304      	movs	r3, #4
 8004950:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004954:	e0a5      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004956:	2308      	movs	r3, #8
 8004958:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800495c:	e0a1      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 800495e:	2310      	movs	r3, #16
 8004960:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004964:	e09d      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a4a      	ldr	r2, [pc, #296]	; (8004a94 <UART_SetConfig+0x2d8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d125      	bne.n	80049bc <UART_SetConfig+0x200>
 8004970:	4b45      	ldr	r3, [pc, #276]	; (8004a88 <UART_SetConfig+0x2cc>)
 8004972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004976:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800497a:	2bc0      	cmp	r3, #192	; 0xc0
 800497c:	d016      	beq.n	80049ac <UART_SetConfig+0x1f0>
 800497e:	2bc0      	cmp	r3, #192	; 0xc0
 8004980:	d818      	bhi.n	80049b4 <UART_SetConfig+0x1f8>
 8004982:	2b80      	cmp	r3, #128	; 0x80
 8004984:	d00a      	beq.n	800499c <UART_SetConfig+0x1e0>
 8004986:	2b80      	cmp	r3, #128	; 0x80
 8004988:	d814      	bhi.n	80049b4 <UART_SetConfig+0x1f8>
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <UART_SetConfig+0x1d8>
 800498e:	2b40      	cmp	r3, #64	; 0x40
 8004990:	d008      	beq.n	80049a4 <UART_SetConfig+0x1e8>
 8004992:	e00f      	b.n	80049b4 <UART_SetConfig+0x1f8>
 8004994:	2300      	movs	r3, #0
 8004996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499a:	e082      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 800499c:	2302      	movs	r3, #2
 800499e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049a2:	e07e      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 80049a4:	2304      	movs	r3, #4
 80049a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049aa:	e07a      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 80049ac:	2308      	movs	r3, #8
 80049ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b2:	e076      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 80049b4:	2310      	movs	r3, #16
 80049b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049ba:	e072      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a35      	ldr	r2, [pc, #212]	; (8004a98 <UART_SetConfig+0x2dc>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d12a      	bne.n	8004a1c <UART_SetConfig+0x260>
 80049c6:	4b30      	ldr	r3, [pc, #192]	; (8004a88 <UART_SetConfig+0x2cc>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d4:	d01a      	beq.n	8004a0c <UART_SetConfig+0x250>
 80049d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049da:	d81b      	bhi.n	8004a14 <UART_SetConfig+0x258>
 80049dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e0:	d00c      	beq.n	80049fc <UART_SetConfig+0x240>
 80049e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e6:	d815      	bhi.n	8004a14 <UART_SetConfig+0x258>
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d003      	beq.n	80049f4 <UART_SetConfig+0x238>
 80049ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f0:	d008      	beq.n	8004a04 <UART_SetConfig+0x248>
 80049f2:	e00f      	b.n	8004a14 <UART_SetConfig+0x258>
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049fa:	e052      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 80049fc:	2302      	movs	r3, #2
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a02:	e04e      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004a04:	2304      	movs	r3, #4
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a0a:	e04a      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004a0c:	2308      	movs	r3, #8
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a12:	e046      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004a14:	2310      	movs	r3, #16
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a1a:	e042      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a17      	ldr	r2, [pc, #92]	; (8004a80 <UART_SetConfig+0x2c4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d13a      	bne.n	8004a9c <UART_SetConfig+0x2e0>
 8004a26:	4b18      	ldr	r3, [pc, #96]	; (8004a88 <UART_SetConfig+0x2cc>)
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a34:	d01a      	beq.n	8004a6c <UART_SetConfig+0x2b0>
 8004a36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a3a:	d81b      	bhi.n	8004a74 <UART_SetConfig+0x2b8>
 8004a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a40:	d00c      	beq.n	8004a5c <UART_SetConfig+0x2a0>
 8004a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a46:	d815      	bhi.n	8004a74 <UART_SetConfig+0x2b8>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <UART_SetConfig+0x298>
 8004a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a50:	d008      	beq.n	8004a64 <UART_SetConfig+0x2a8>
 8004a52:	e00f      	b.n	8004a74 <UART_SetConfig+0x2b8>
 8004a54:	2300      	movs	r3, #0
 8004a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a5a:	e022      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a62:	e01e      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004a64:	2304      	movs	r3, #4
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a6a:	e01a      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004a6c:	2308      	movs	r3, #8
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a72:	e016      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004a74:	2310      	movs	r3, #16
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a7a:	e012      	b.n	8004aa2 <UART_SetConfig+0x2e6>
 8004a7c:	efff69f3 	.word	0xefff69f3
 8004a80:	40008000 	.word	0x40008000
 8004a84:	40013800 	.word	0x40013800
 8004a88:	40021000 	.word	0x40021000
 8004a8c:	40004400 	.word	0x40004400
 8004a90:	40004800 	.word	0x40004800
 8004a94:	40004c00 	.word	0x40004c00
 8004a98:	40005000 	.word	0x40005000
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a9f      	ldr	r2, [pc, #636]	; (8004d24 <UART_SetConfig+0x568>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d17a      	bne.n	8004ba2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d824      	bhi.n	8004afe <UART_SetConfig+0x342>
 8004ab4:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <UART_SetConfig+0x300>)
 8004ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004ae1 	.word	0x08004ae1
 8004ac0:	08004aff 	.word	0x08004aff
 8004ac4:	08004ae9 	.word	0x08004ae9
 8004ac8:	08004aff 	.word	0x08004aff
 8004acc:	08004aef 	.word	0x08004aef
 8004ad0:	08004aff 	.word	0x08004aff
 8004ad4:	08004aff 	.word	0x08004aff
 8004ad8:	08004aff 	.word	0x08004aff
 8004adc:	08004af7 	.word	0x08004af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae0:	f7fe f936 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8004ae4:	61f8      	str	r0, [r7, #28]
        break;
 8004ae6:	e010      	b.n	8004b0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae8:	4b8f      	ldr	r3, [pc, #572]	; (8004d28 <UART_SetConfig+0x56c>)
 8004aea:	61fb      	str	r3, [r7, #28]
        break;
 8004aec:	e00d      	b.n	8004b0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aee:	f7fe f897 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8004af2:	61f8      	str	r0, [r7, #28]
        break;
 8004af4:	e009      	b.n	8004b0a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004afa:	61fb      	str	r3, [r7, #28]
        break;
 8004afc:	e005      	b.n	8004b0a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004b08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 80fb 	beq.w	8004d08 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	4413      	add	r3, r2
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d305      	bcc.n	8004b2e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b28:	69fa      	ldr	r2, [r7, #28]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d903      	bls.n	8004b36 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b34:	e0e8      	b.n	8004d08 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	461c      	mov	r4, r3
 8004b3c:	4615      	mov	r5, r2
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	022b      	lsls	r3, r5, #8
 8004b48:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b4c:	0222      	lsls	r2, r4, #8
 8004b4e:	68f9      	ldr	r1, [r7, #12]
 8004b50:	6849      	ldr	r1, [r1, #4]
 8004b52:	0849      	lsrs	r1, r1, #1
 8004b54:	2000      	movs	r0, #0
 8004b56:	4688      	mov	r8, r1
 8004b58:	4681      	mov	r9, r0
 8004b5a:	eb12 0a08 	adds.w	sl, r2, r8
 8004b5e:	eb43 0b09 	adc.w	fp, r3, r9
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b70:	4650      	mov	r0, sl
 8004b72:	4659      	mov	r1, fp
 8004b74:	f7fb fb28 	bl	80001c8 <__aeabi_uldivmod>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b86:	d308      	bcc.n	8004b9a <UART_SetConfig+0x3de>
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b8e:	d204      	bcs.n	8004b9a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	60da      	str	r2, [r3, #12]
 8004b98:	e0b6      	b.n	8004d08 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ba0:	e0b2      	b.n	8004d08 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	69db      	ldr	r3, [r3, #28]
 8004ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004baa:	d15e      	bne.n	8004c6a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004bac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d828      	bhi.n	8004c06 <UART_SetConfig+0x44a>
 8004bb4:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <UART_SetConfig+0x400>)
 8004bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bba:	bf00      	nop
 8004bbc:	08004be1 	.word	0x08004be1
 8004bc0:	08004be9 	.word	0x08004be9
 8004bc4:	08004bf1 	.word	0x08004bf1
 8004bc8:	08004c07 	.word	0x08004c07
 8004bcc:	08004bf7 	.word	0x08004bf7
 8004bd0:	08004c07 	.word	0x08004c07
 8004bd4:	08004c07 	.word	0x08004c07
 8004bd8:	08004c07 	.word	0x08004c07
 8004bdc:	08004bff 	.word	0x08004bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be0:	f7fe f8b6 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8004be4:	61f8      	str	r0, [r7, #28]
        break;
 8004be6:	e014      	b.n	8004c12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be8:	f7fe f8c8 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8004bec:	61f8      	str	r0, [r7, #28]
        break;
 8004bee:	e010      	b.n	8004c12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf0:	4b4d      	ldr	r3, [pc, #308]	; (8004d28 <UART_SetConfig+0x56c>)
 8004bf2:	61fb      	str	r3, [r7, #28]
        break;
 8004bf4:	e00d      	b.n	8004c12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf6:	f7fe f813 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8004bfa:	61f8      	str	r0, [r7, #28]
        break;
 8004bfc:	e009      	b.n	8004c12 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c02:	61fb      	str	r3, [r7, #28]
        break;
 8004c04:	e005      	b.n	8004c12 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004c10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d077      	beq.n	8004d08 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	005a      	lsls	r2, r3, #1
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	441a      	add	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b0f      	cmp	r3, #15
 8004c32:	d916      	bls.n	8004c62 <UART_SetConfig+0x4a6>
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c3a:	d212      	bcs.n	8004c62 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	f023 030f 	bic.w	r3, r3, #15
 8004c44:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	8afb      	ldrh	r3, [r7, #22]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	8afa      	ldrh	r2, [r7, #22]
 8004c5e:	60da      	str	r2, [r3, #12]
 8004c60:	e052      	b.n	8004d08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c68:	e04e      	b.n	8004d08 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d827      	bhi.n	8004cc2 <UART_SetConfig+0x506>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <UART_SetConfig+0x4bc>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004c9d 	.word	0x08004c9d
 8004c7c:	08004ca5 	.word	0x08004ca5
 8004c80:	08004cad 	.word	0x08004cad
 8004c84:	08004cc3 	.word	0x08004cc3
 8004c88:	08004cb3 	.word	0x08004cb3
 8004c8c:	08004cc3 	.word	0x08004cc3
 8004c90:	08004cc3 	.word	0x08004cc3
 8004c94:	08004cc3 	.word	0x08004cc3
 8004c98:	08004cbb 	.word	0x08004cbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c9c:	f7fe f858 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8004ca0:	61f8      	str	r0, [r7, #28]
        break;
 8004ca2:	e014      	b.n	8004cce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca4:	f7fe f86a 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8004ca8:	61f8      	str	r0, [r7, #28]
        break;
 8004caa:	e010      	b.n	8004cce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cac:	4b1e      	ldr	r3, [pc, #120]	; (8004d28 <UART_SetConfig+0x56c>)
 8004cae:	61fb      	str	r3, [r7, #28]
        break;
 8004cb0:	e00d      	b.n	8004cce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cb2:	f7fd ffb5 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8004cb6:	61f8      	str	r0, [r7, #28]
        break;
 8004cb8:	e009      	b.n	8004cce <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cbe:	61fb      	str	r3, [r7, #28]
        break;
 8004cc0:	e005      	b.n	8004cce <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ccc:	bf00      	nop
    }

    if (pclk != 0U)
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d019      	beq.n	8004d08 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	085a      	lsrs	r2, r3, #1
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	441a      	add	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	2b0f      	cmp	r3, #15
 8004cec:	d909      	bls.n	8004d02 <UART_SetConfig+0x546>
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf4:	d205      	bcs.n	8004d02 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	60da      	str	r2, [r3, #12]
 8004d00:	e002      	b.n	8004d08 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3728      	adds	r7, #40	; 0x28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d22:	bf00      	nop
 8004d24:	40008000 	.word	0x40008000
 8004d28:	00f42400 	.word	0x00f42400

08004d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	f003 0304 	and.w	r3, r3, #4
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d01a      	beq.n	8004e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e2a:	d10a      	bne.n	8004e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	605a      	str	r2, [r3, #4]
  }
}
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b098      	sub	sp, #96	; 0x60
 8004e74:	af02      	add	r7, sp, #8
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e80:	f7fc fa7e 	bl	8001380 <HAL_GetTick>
 8004e84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d12e      	bne.n	8004ef2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f88c 	bl	8004fc0 <UART_WaitOnFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d021      	beq.n	8004ef2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ec2:	653b      	str	r3, [r7, #80]	; 0x50
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ecc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ece:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e6      	bne.n	8004eae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e062      	b.n	8004fb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d149      	bne.n	8004f94 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f856 	bl	8004fc0 <UART_WaitOnFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d03c      	beq.n	8004f94 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	623b      	str	r3, [r7, #32]
   return(result);
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f38:	633b      	str	r3, [r7, #48]	; 0x30
 8004f3a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e6      	bne.n	8004f1a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3308      	adds	r3, #8
 8004f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3308      	adds	r3, #8
 8004f6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f6c:	61fa      	str	r2, [r7, #28]
 8004f6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	69b9      	ldr	r1, [r7, #24]
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	617b      	str	r3, [r7, #20]
   return(result);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e5      	bne.n	8004f4c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2220      	movs	r2, #32
 8004f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e011      	b.n	8004fb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3758      	adds	r7, #88	; 0x58
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	603b      	str	r3, [r7, #0]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd0:	e049      	b.n	8005066 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd8:	d045      	beq.n	8005066 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fda:	f7fc f9d1 	bl	8001380 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d302      	bcc.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d101      	bne.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e048      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d031      	beq.n	8005066 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b08      	cmp	r3, #8
 800500e:	d110      	bne.n	8005032 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2208      	movs	r2, #8
 8005016:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005018:	68f8      	ldr	r0, [r7, #12]
 800501a:	f000 f838 	bl	800508e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2208      	movs	r2, #8
 8005022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e029      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69db      	ldr	r3, [r3, #28]
 8005038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800503c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005040:	d111      	bne.n	8005066 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800504a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f000 f81e 	bl	800508e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2220      	movs	r2, #32
 8005056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e00f      	b.n	8005086 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	69da      	ldr	r2, [r3, #28]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	429a      	cmp	r2, r3
 8005074:	bf0c      	ite	eq
 8005076:	2301      	moveq	r3, #1
 8005078:	2300      	movne	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	429a      	cmp	r2, r3
 8005082:	d0a6      	beq.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}

0800508e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800508e:	b480      	push	{r7}
 8005090:	b095      	sub	sp, #84	; 0x54
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	461a      	mov	r2, r3
 80050b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050b4:	643b      	str	r3, [r7, #64]	; 0x40
 80050b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050bc:	e841 2300 	strex	r3, r2, [r1]
 80050c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e6      	bne.n	8005096 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3308      	adds	r3, #8
 80050ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f023 0301 	bic.w	r3, r3, #1
 80050de:	64bb      	str	r3, [r7, #72]	; 0x48
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3308      	adds	r3, #8
 80050e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e5      	bne.n	80050c8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005100:	2b01      	cmp	r3, #1
 8005102:	d118      	bne.n	8005136 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	e853 3f00 	ldrex	r3, [r3]
 8005110:	60bb      	str	r3, [r7, #8]
   return(result);
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	f023 0310 	bic.w	r3, r3, #16
 8005118:	647b      	str	r3, [r7, #68]	; 0x44
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	461a      	mov	r2, r3
 8005120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005122:	61bb      	str	r3, [r7, #24]
 8005124:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005126:	6979      	ldr	r1, [r7, #20]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	e841 2300 	strex	r3, r2, [r1]
 800512e:	613b      	str	r3, [r7, #16]
   return(result);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1e6      	bne.n	8005104 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2220      	movs	r2, #32
 800513a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	669a      	str	r2, [r3, #104]	; 0x68
}
 800514a:	bf00      	nop
 800514c:	3754      	adds	r7, #84	; 0x54
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005162:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7ff fb0b 	bl	8004790 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800517a:	bf00      	nop
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b088      	sub	sp, #32
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	e853 3f00 	ldrex	r3, [r3]
 8005196:	60bb      	str	r3, [r7, #8]
   return(result);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800519e:	61fb      	str	r3, [r7, #28]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ac:	6979      	ldr	r1, [r7, #20]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	613b      	str	r3, [r7, #16]
   return(result);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e6      	bne.n	800518a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7ff fad7 	bl	800477c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ce:	bf00      	nop
 80051d0:	3720      	adds	r7, #32
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051de:	bf00      	nop
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <memset>:
 80051ea:	4402      	add	r2, r0
 80051ec:	4603      	mov	r3, r0
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d100      	bne.n	80051f4 <memset+0xa>
 80051f2:	4770      	bx	lr
 80051f4:	f803 1b01 	strb.w	r1, [r3], #1
 80051f8:	e7f9      	b.n	80051ee <memset+0x4>
	...

080051fc <__libc_init_array>:
 80051fc:	b570      	push	{r4, r5, r6, lr}
 80051fe:	4d0d      	ldr	r5, [pc, #52]	; (8005234 <__libc_init_array+0x38>)
 8005200:	4c0d      	ldr	r4, [pc, #52]	; (8005238 <__libc_init_array+0x3c>)
 8005202:	1b64      	subs	r4, r4, r5
 8005204:	10a4      	asrs	r4, r4, #2
 8005206:	2600      	movs	r6, #0
 8005208:	42a6      	cmp	r6, r4
 800520a:	d109      	bne.n	8005220 <__libc_init_array+0x24>
 800520c:	4d0b      	ldr	r5, [pc, #44]	; (800523c <__libc_init_array+0x40>)
 800520e:	4c0c      	ldr	r4, [pc, #48]	; (8005240 <__libc_init_array+0x44>)
 8005210:	f000 f818 	bl	8005244 <_init>
 8005214:	1b64      	subs	r4, r4, r5
 8005216:	10a4      	asrs	r4, r4, #2
 8005218:	2600      	movs	r6, #0
 800521a:	42a6      	cmp	r6, r4
 800521c:	d105      	bne.n	800522a <__libc_init_array+0x2e>
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	f855 3b04 	ldr.w	r3, [r5], #4
 8005224:	4798      	blx	r3
 8005226:	3601      	adds	r6, #1
 8005228:	e7ee      	b.n	8005208 <__libc_init_array+0xc>
 800522a:	f855 3b04 	ldr.w	r3, [r5], #4
 800522e:	4798      	blx	r3
 8005230:	3601      	adds	r6, #1
 8005232:	e7f2      	b.n	800521a <__libc_init_array+0x1e>
 8005234:	080087fc 	.word	0x080087fc
 8005238:	080087fc 	.word	0x080087fc
 800523c:	080087fc 	.word	0x080087fc
 8005240:	08008800 	.word	0x08008800

08005244 <_init>:
 8005244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005246:	bf00      	nop
 8005248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800524a:	bc08      	pop	{r3}
 800524c:	469e      	mov	lr, r3
 800524e:	4770      	bx	lr

08005250 <_fini>:
 8005250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005252:	bf00      	nop
 8005254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005256:	bc08      	pop	{r3}
 8005258:	469e      	mov	lr, r3
 800525a:	4770      	bx	lr
