
ECEN-361-Laser-Harp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e08  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08004f90  08004f90  00014f90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b0  080051b0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080051b0  080051b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051b8  080051b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051bc  080051bc  000151bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080051c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000024c  2000000c  080051cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080051cc  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b243  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019f0  00000000  00000000  0002b2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000980  00000000  00000000  0002ccb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000745  00000000  00000000  0002d638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ade  00000000  00000000  0002dd7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b717  00000000  00000000  0005385b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8fc4  00000000  00000000  0005ef72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a2c  00000000  00000000  00147f38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0014a964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f78 	.word	0x08004f78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004f78 	.word	0x08004f78

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b970 	b.w	8000e5c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	460f      	mov	r7, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	d965      	bls.n	8000c76 <__udivmoddi4+0xe2>
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	b143      	cbz	r3, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	f1c3 0220 	rsb	r2, r3, #32
 8000bb8:	409f      	lsls	r7, r3
 8000bba:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	409c      	lsls	r4, r3
 8000bc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc6:	fa1f f58c 	uxth.w	r5, ip
 8000bca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bce:	0c22      	lsrs	r2, r4, #16
 8000bd0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd8:	fb01 f005 	mul.w	r0, r1, r5
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	d90a      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be0:	eb1c 0202 	adds.w	r2, ip, r2
 8000be4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be8:	f080 811c 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000bec:	4290      	cmp	r0, r2
 8000bee:	f240 8119 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	4462      	add	r2, ip
 8000bf6:	1a12      	subs	r2, r2, r0
 8000bf8:	b2a4      	uxth	r4, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c06:	fb00 f505 	mul.w	r5, r0, r5
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x90>
 8000c0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c16:	f080 8107 	bcs.w	8000e28 <__udivmoddi4+0x294>
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	f240 8104 	bls.w	8000e28 <__udivmoddi4+0x294>
 8000c20:	4464      	add	r4, ip
 8000c22:	3802      	subs	r0, #2
 8000c24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c28:	1b64      	subs	r4, r4, r5
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11e      	cbz	r6, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40dc      	lsrs	r4, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	e9c6 4300 	strd	r4, r3, [r6]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0xbc>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80ed 	beq.w	8000e1e <__udivmoddi4+0x28a>
 8000c44:	2100      	movs	r1, #0
 8000c46:	e9c6 0500 	strd	r0, r5, [r6]
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	fab3 f183 	clz	r1, r3
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d149      	bne.n	8000cec <__udivmoddi4+0x158>
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	d302      	bcc.n	8000c62 <__udivmoddi4+0xce>
 8000c5c:	4282      	cmp	r2, r0
 8000c5e:	f200 80f8 	bhi.w	8000e52 <__udivmoddi4+0x2be>
 8000c62:	1a84      	subs	r4, r0, r2
 8000c64:	eb65 0203 	sbc.w	r2, r5, r3
 8000c68:	2001      	movs	r0, #1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d0e2      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	e9c6 4700 	strd	r4, r7, [r6]
 8000c74:	e7df      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xe6>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f382 	clz	r3, r2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 8090 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c84:	1a8a      	subs	r2, r1, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f fe8c 	uxth.w	lr, ip
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c94:	fb07 2015 	mls	r0, r7, r5, r2
 8000c98:	0c22      	lsrs	r2, r4, #16
 8000c9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca6:	eb1c 0202 	adds.w	r2, ip, r2
 8000caa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f200 80cb 	bhi.w	8000e4c <__udivmoddi4+0x2b8>
 8000cb6:	4645      	mov	r5, r8
 8000cb8:	1a12      	subs	r2, r2, r0
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x14e>
 8000cd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x14c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f200 80bb 	bhi.w	8000e56 <__udivmoddi4+0x2c2>
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	eba4 040e 	sub.w	r4, r4, lr
 8000ce6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cea:	e79f      	b.n	8000c2c <__udivmoddi4+0x98>
 8000cec:	f1c1 0720 	rsb	r7, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfa:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000d02:	40fd      	lsrs	r5, r7
 8000d04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d08:	4323      	orrs	r3, r4
 8000d0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	fb09 5518 	mls	r5, r9, r8, r5
 8000d16:	0c1c      	lsrs	r4, r3, #16
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	fa00 f001 	lsl.w	r0, r0, r1
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d34:	f080 8088 	bcs.w	8000e48 <__udivmoddi4+0x2b4>
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	f240 8085 	bls.w	8000e48 <__udivmoddi4+0x2b4>
 8000d3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d42:	4464      	add	r4, ip
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	b29d      	uxth	r5, r3
 8000d48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d64:	d26c      	bcs.n	8000e40 <__udivmoddi4+0x2ac>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	d96a      	bls.n	8000e40 <__udivmoddi4+0x2ac>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	4464      	add	r4, ip
 8000d6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d72:	fba3 9502 	umull	r9, r5, r3, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	42ac      	cmp	r4, r5
 8000d7c:	46c8      	mov	r8, r9
 8000d7e:	46ae      	mov	lr, r5
 8000d80:	d356      	bcc.n	8000e30 <__udivmoddi4+0x29c>
 8000d82:	d053      	beq.n	8000e2c <__udivmoddi4+0x298>
 8000d84:	b156      	cbz	r6, 8000d9c <__udivmoddi4+0x208>
 8000d86:	ebb0 0208 	subs.w	r2, r0, r8
 8000d8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d92:	40ca      	lsrs	r2, r1
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	4317      	orrs	r7, r2
 8000d98:	e9c6 7400 	strd	r7, r4, [r6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	f1c3 0120 	rsb	r1, r3, #32
 8000da8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dac:	fa20 f201 	lsr.w	r2, r0, r1
 8000db0:	fa25 f101 	lsr.w	r1, r5, r1
 8000db4:	409d      	lsls	r5, r3
 8000db6:	432a      	orrs	r2, r5
 8000db8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc8:	0c11      	lsrs	r1, r2, #16
 8000dca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dce:	fb00 f50e 	mul.w	r5, r0, lr
 8000dd2:	428d      	cmp	r5, r1
 8000dd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x258>
 8000dda:	eb1c 0101 	adds.w	r1, ip, r1
 8000dde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de2:	d22f      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000de4:	428d      	cmp	r5, r1
 8000de6:	d92d      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	1b49      	subs	r1, r1, r5
 8000dee:	b292      	uxth	r2, r2
 8000df0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df4:	fb07 1115 	mls	r1, r7, r5, r1
 8000df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dfc:	fb05 f10e 	mul.w	r1, r5, lr
 8000e00:	4291      	cmp	r1, r2
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x282>
 8000e04:	eb1c 0202 	adds.w	r2, ip, r2
 8000e08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0c:	d216      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000e0e:	4291      	cmp	r1, r2
 8000e10:	d914      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000e12:	3d02      	subs	r5, #2
 8000e14:	4462      	add	r2, ip
 8000e16:	1a52      	subs	r2, r2, r1
 8000e18:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e1c:	e738      	b.n	8000c90 <__udivmoddi4+0xfc>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	4630      	mov	r0, r6
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000e24:	4639      	mov	r1, r7
 8000e26:	e6e6      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e6fb      	b.n	8000c24 <__udivmoddi4+0x90>
 8000e2c:	4548      	cmp	r0, r9
 8000e2e:	d2a9      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e30:	ebb9 0802 	subs.w	r8, r9, r2
 8000e34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	e7a3      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3c:	4645      	mov	r5, r8
 8000e3e:	e7ea      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e40:	462b      	mov	r3, r5
 8000e42:	e794      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7d1      	b.n	8000dec <__udivmoddi4+0x258>
 8000e48:	46d0      	mov	r8, sl
 8000e4a:	e77b      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4c:	3d02      	subs	r5, #2
 8000e4e:	4462      	add	r2, ip
 8000e50:	e732      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e70a      	b.n	8000c6c <__udivmoddi4+0xd8>
 8000e56:	4464      	add	r4, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e742      	b.n	8000ce2 <__udivmoddi4+0x14e>

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e66:	f000 fb29 	bl	80014bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e6a:	f000 f853 	bl	8000f14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e6e:	f000 f90f 	bl	8001090 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e72:	f000 f8dd 	bl	8001030 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8000e76:	f000 f89f 	bl	8000fb8 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  int freq =500;
 8000e7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e7e:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 2 */
  generate_sine_wave();
 8000e80:	f000 f966 	bl	8001150 <generate_sine_wave>
  int index = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* USER CODE END WHILE */
	 if(HAL_GPIO_ReadPin(GPIOC, 13)){
 8000e88:	210d      	movs	r1, #13
 8000e8a:	481d      	ldr	r0, [pc, #116]	; (8000f00 <main+0xa0>)
 8000e8c:	f000 ffb4 	bl	8001df8 <HAL_GPIO_ReadPin>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d008      	beq.n	8000ea8 <main+0x48>
		 freq += 100;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	3364      	adds	r3, #100	; 0x64
 8000e9a:	60fb      	str	r3, [r7, #12]
		 if(freq > 1000) freq = 100;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ea2:	dd01      	ble.n	8000ea8 <main+0x48>
 8000ea4:	2364      	movs	r3, #100	; 0x64
 8000ea6:	60fb      	str	r3, [r7, #12]
	 }
	 float sine_val = sine_wave[index];
 8000ea8:	4a16      	ldr	r2, [pc, #88]	; (8000f04 <main+0xa4>)
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	607b      	str	r3, [r7, #4]
	 int wave_out = scale(sine_val, AMP_MIN,AMP_MAX,DAC_MIN,DAC_MAX);
 8000eb4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2103      	movs	r1, #3
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ec2:	f000 f997 	bl	80011f4 <scale>
 8000ec6:	6038      	str	r0, [r7, #0]
	 HAL_DAC_SetValue(&hdac1,DAC1_CHANNEL_1 , DAC_ALIGN_12B_R, wave_out);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	480e      	ldr	r0, [pc, #56]	; (8000f08 <main+0xa8>)
 8000ed0:	f000 fc9b 	bl	800180a <HAL_DAC_SetValue>
	 index++;
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	60bb      	str	r3, [r7, #8]
	 HAL_Delay(((1000000 / freq) / SINE_STEPS));
 8000eda:	4a0c      	ldr	r2, [pc, #48]	; (8000f0c <main+0xac>)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <main+0xb0>)
 8000ee4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ee8:	1152      	asrs	r2, r2, #5
 8000eea:	17db      	asrs	r3, r3, #31
 8000eec:	1ad3      	subs	r3, r2, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f000 fb60 	bl	80015b4 <HAL_Delay>
	 if(index > SINE_STEPS) index = 0;
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	2b64      	cmp	r3, #100	; 0x64
 8000ef8:	ddc6      	ble.n	8000e88 <main+0x28>
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  {
 8000efe:	e7c3      	b.n	8000e88 <main+0x28>
 8000f00:	48000800 	.word	0x48000800
 8000f04:	200000c4 	.word	0x200000c4
 8000f08:	20000028 	.word	0x20000028
 8000f0c:	000f4240 	.word	0x000f4240
 8000f10:	51eb851f 	.word	0x51eb851f

08000f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b096      	sub	sp, #88	; 0x58
 8000f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	2244      	movs	r2, #68	; 0x44
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 ffbb 	bl	8003e9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f3a:	f000 ff83 	bl	8001e44 <HAL_PWREx_ControlVoltageScaling>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f44:	f000 f991 	bl	800126a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f52:	2310      	movs	r3, #16
 8000f54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f56:	2302      	movs	r3, #2
 8000f58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f62:	230a      	movs	r3, #10
 8000f64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f66:	2307      	movs	r3, #7
 8000f68:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 ffba 	bl	8001ef0 <HAL_RCC_OscConfig>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000f82:	f000 f972 	bl	800126a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f86:	230f      	movs	r3, #15
 8000f88:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2104      	movs	r1, #4
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f001 fb82 	bl	80026a8 <HAL_RCC_ClockConfig>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000faa:	f000 f95e 	bl	800126a <Error_Handler>
  }
}
 8000fae:	bf00      	nop
 8000fb0:	3758      	adds	r7, #88	; 0x58
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	2224      	movs	r2, #36	; 0x24
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f002 ff6a 	bl	8003e9e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <MX_DAC1_Init+0x70>)
 8000fcc:	4a17      	ldr	r2, [pc, #92]	; (800102c <MX_DAC1_Init+0x74>)
 8000fce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000fd0:	4815      	ldr	r0, [pc, #84]	; (8001028 <MX_DAC1_Init+0x70>)
 8000fd2:	f000 fbf8 	bl	80017c6 <HAL_DAC_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000fdc:	f000 f945 	bl	800126a <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ff4:	1d3b      	adds	r3, r7, #4
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	480b      	ldr	r0, [pc, #44]	; (8001028 <MX_DAC1_Init+0x70>)
 8000ffc:	f000 fc2a 	bl	8001854 <HAL_DAC_ConfigChannel>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001006:	f000 f930 	bl	800126a <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2210      	movs	r2, #16
 800100e:	4619      	mov	r1, r3
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_DAC1_Init+0x70>)
 8001012:	f000 fc1f 	bl	8001854 <HAL_DAC_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 800101c:	f000 f925 	bl	800126a <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	3728      	adds	r7, #40	; 0x28
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000028 	.word	0x20000028
 800102c:	40007400 	.word	0x40007400

08001030 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001036:	4a15      	ldr	r2, [pc, #84]	; (800108c <MX_USART2_UART_Init+0x5c>)
 8001038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800103a:	4b13      	ldr	r3, [pc, #76]	; (8001088 <MX_USART2_UART_Init+0x58>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <MX_USART2_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_USART2_UART_Init+0x58>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001068:	2200      	movs	r2, #0
 800106a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <MX_USART2_UART_Init+0x58>)
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001072:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_USART2_UART_Init+0x58>)
 8001074:	f002 f9f8 	bl	8003468 <HAL_UART_Init>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800107e:	f000 f8f4 	bl	800126a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000003c 	.word	0x2000003c
 800108c:	40004400 	.word	0x40004400

08001090 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <MX_GPIO_Init+0xb4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a26      	ldr	r2, [pc, #152]	; (8001144 <MX_GPIO_Init+0xb4>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b24      	ldr	r3, [pc, #144]	; (8001144 <MX_GPIO_Init+0xb4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <MX_GPIO_Init+0xb4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a20      	ldr	r2, [pc, #128]	; (8001144 <MX_GPIO_Init+0xb4>)
 80010c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <MX_GPIO_Init+0xb4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_GPIO_Init+0xb4>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	4a1a      	ldr	r2, [pc, #104]	; (8001144 <MX_GPIO_Init+0xb4>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_GPIO_Init+0xb4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_GPIO_Init+0xb4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <MX_GPIO_Init+0xb4>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b12      	ldr	r3, [pc, #72]	; (8001144 <MX_GPIO_Init+0xb4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800110a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800110c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	480a      	ldr	r0, [pc, #40]	; (8001148 <MX_GPIO_Init+0xb8>)
 800111e:	f000 fcc1 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001122:	2307      	movs	r3, #7
 8001124:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	4804      	ldr	r0, [pc, #16]	; (8001148 <MX_GPIO_Init+0xb8>)
 8001136:	f000 fcb5 	bl	8001aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40021000 	.word	0x40021000
 8001148:	48000800 	.word	0x48000800
 800114c:	00000000 	.word	0x00000000

08001150 <generate_sine_wave>:

///* USER CODE BEGIN 4 */
void generate_sine_wave(void){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	for(int i = 0; i <SINE_STEPS; i++){
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	e039      	b.n	80011d0 <generate_sine_wave+0x80>
		sine_wave[i] = SINE_DC_OFFSET + SINE_AMP *sin(2* M_PI * i/ SINE_STEPS);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff f985 	bl	800046c <__aeabi_i2d>
 8001162:	a322      	add	r3, pc, #136	; (adr r3, 80011ec <generate_sine_wave+0x9c>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff f9ea 	bl	8000540 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <generate_sine_wave+0x90>)
 800117a:	f7ff fb0b 	bl	8000794 <__aeabi_ddiv>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	ec43 2b17 	vmov	d7, r2, r3
 8001186:	eeb0 0a47 	vmov.f32	s0, s14
 800118a:	eef0 0a67 	vmov.f32	s1, s15
 800118e:	f002 feb3 	bl	8003ef8 <sin>
 8001192:	ec51 0b10 	vmov	r0, r1, d0
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <generate_sine_wave+0x94>)
 800119c:	f7ff f9d0 	bl	8000540 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	4b0d      	ldr	r3, [pc, #52]	; (80011e4 <generate_sine_wave+0x94>)
 80011ae:	f7ff f811 	bl	80001d4 <__adddf3>
 80011b2:	4602      	mov	r2, r0
 80011b4:	460b      	mov	r3, r1
 80011b6:	4610      	mov	r0, r2
 80011b8:	4619      	mov	r1, r3
 80011ba:	f7ff fc83 	bl	8000ac4 <__aeabi_d2f>
 80011be:	4602      	mov	r2, r0
 80011c0:	4909      	ldr	r1, [pc, #36]	; (80011e8 <generate_sine_wave+0x98>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	440b      	add	r3, r1
 80011c8:	601a      	str	r2, [r3, #0]
	for(int i = 0; i <SINE_STEPS; i++){
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3301      	adds	r3, #1
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b63      	cmp	r3, #99	; 0x63
 80011d4:	ddc2      	ble.n	800115c <generate_sine_wave+0xc>
	}
}
 80011d6:	bf00      	nop
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40590000 	.word	0x40590000
 80011e4:	3ff80000 	.word	0x3ff80000
 80011e8:	200000c4 	.word	0x200000c4
 80011ec:	54442d18 	.word	0x54442d18
 80011f0:	401921fb 	.word	0x401921fb

080011f4 <scale>:
int scale(float x, int x_min, int x_max, int y_min, int y_max){
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	ed87 0a05 	vstr	s0, [r7, #20]
 80011fe:	6138      	str	r0, [r7, #16]
 8001200:	60f9      	str	r1, [r7, #12]
 8001202:	60ba      	str	r2, [r7, #8]
 8001204:	607b      	str	r3, [r7, #4]
	float percentage = (x - x_min)/(float)(x_max - x_min);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001210:	ed97 7a05 	vldr	s14, [r7, #20]
 8001214:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	ee07 3a90 	vmov	s15, r3
 8001222:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122a:	edc7 7a07 	vstr	s15, [r7, #28]
	int result = percentage*(y_max - y_min) + y_min;
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800123c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001240:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001256:	ee17 3a90 	vmov	r3, s15
 800125a:	61bb      	str	r3, [r7, #24]
	return result;
 800125c:	69bb      	ldr	r3, [r7, #24]

}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	; 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126e:	b672      	cpsid	i
}
 8001270:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001272:	e7fe      	b.n	8001272 <Error_Handler+0x8>

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_MspInit+0x44>)
 800127c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127e:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <HAL_MspInit+0x44>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6613      	str	r3, [r2, #96]	; 0x60
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_MspInit+0x44>)
 8001288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_MspInit+0x44>)
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	4a08      	ldr	r2, [pc, #32]	; (80012b8 <HAL_MspInit+0x44>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	6593      	str	r3, [r2, #88]	; 0x58
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <HAL_MspInit+0x44>)
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a15      	ldr	r2, [pc, #84]	; (8001330 <HAL_DAC_MspInit+0x74>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d124      	bne.n	8001328 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <HAL_DAC_MspInit+0x78>)
 80012e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e2:	4a14      	ldr	r2, [pc, #80]	; (8001334 <HAL_DAC_MspInit+0x78>)
 80012e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80012e8:	6593      	str	r3, [r2, #88]	; 0x58
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_DAC_MspInit+0x78>)
 80012ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f6:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_DAC_MspInit+0x78>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <HAL_DAC_MspInit+0x78>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_DAC_MspInit+0x78>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800130e:	2330      	movs	r3, #48	; 0x30
 8001310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001312:	2303      	movs	r3, #3
 8001314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001324:	f000 fbbe 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001328:	bf00      	nop
 800132a:	3728      	adds	r7, #40	; 0x28
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40007400 	.word	0x40007400
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b0ac      	sub	sp, #176	; 0xb0
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2288      	movs	r2, #136	; 0x88
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f002 fda0 	bl	8003e9e <memset>
  if(huart->Instance==USART2)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a21      	ldr	r2, [pc, #132]	; (80013e8 <HAL_UART_MspInit+0xb0>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d13b      	bne.n	80013e0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001368:	2302      	movs	r3, #2
 800136a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800136c:	2300      	movs	r3, #0
 800136e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4618      	mov	r0, r3
 8001376:	f001 fbbb 	bl	8002af0 <HAL_RCCEx_PeriphCLKConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001380:	f7ff ff73 	bl	800126a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_UART_MspInit+0xb4>)
 8001386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001388:	4a18      	ldr	r2, [pc, #96]	; (80013ec <HAL_UART_MspInit+0xb4>)
 800138a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800138e:	6593      	str	r3, [r2, #88]	; 0x58
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_UART_MspInit+0xb4>)
 8001392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139c:	4b13      	ldr	r3, [pc, #76]	; (80013ec <HAL_UART_MspInit+0xb4>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	4a12      	ldr	r2, [pc, #72]	; (80013ec <HAL_UART_MspInit+0xb4>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a8:	4b10      	ldr	r3, [pc, #64]	; (80013ec <HAL_UART_MspInit+0xb4>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013b4:	230c      	movs	r3, #12
 80013b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c6:	2303      	movs	r3, #3
 80013c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013cc:	2307      	movs	r3, #7
 80013ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013d6:	4619      	mov	r1, r3
 80013d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013dc:	f000 fb62 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013e0:	bf00      	nop
 80013e2:	37b0      	adds	r7, #176	; 0xb0
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40004400 	.word	0x40004400
 80013ec:	40021000 	.word	0x40021000

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <MemManage_Handler+0x4>

08001402 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <BusFault_Handler+0x4>

08001408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140c:	e7fe      	b.n	800140c <UsageFault_Handler+0x4>

0800140e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800143c:	f000 f89a 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800146c:	f7ff ffea 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	; (80014a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <LoopForever+0xe>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	; (80014b4 <LoopForever+0x16>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001496:	f002 fd0b 	bl	8003eb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800149a:	f7ff fce1 	bl	8000e60 <main>

0800149e <LoopForever>:

LoopForever:
    b LoopForever
 800149e:	e7fe      	b.n	800149e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014ac:	080051c0 	.word	0x080051c0
  ldr r2, =_sbss
 80014b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80014b4:	20000258 	.word	0x20000258

080014b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC1_2_IRQHandler>
	...

080014bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_Init+0x3c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_Init+0x3c>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d2:	2003      	movs	r0, #3
 80014d4:	f000 f944 	bl	8001760 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 f80f 	bl	80014fc <HAL_InitTick>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	e001      	b.n	80014ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ea:	f7ff fec3 	bl	8001274 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014ee:	79fb      	ldrb	r3, [r7, #7]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40022000 	.word	0x40022000

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_InitTick+0x6c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d023      	beq.n	8001558 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_InitTick+0x70>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_InitTick+0x6c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f941 	bl	80017ae <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10f      	bne.n	8001552 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d809      	bhi.n	800154c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f000 f919 	bl	8001776 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_InitTick+0x74>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e007      	b.n	800155c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e004      	b.n	800155c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e001      	b.n	800155c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000008 	.word	0x20000008
 800156c:	20000000 	.word	0x20000000
 8001570:	20000004 	.word	0x20000004

08001574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000008 	.word	0x20000008
 8001598:	20000254 	.word	0x20000254

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000254 	.word	0x20000254

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff ffee 	bl	800159c <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffde 	bl	800159c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000008 	.word	0x20000008

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	2b00      	cmp	r3, #0
 8001672:	db0a      	blt.n	800168a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	b2da      	uxtb	r2, r3
 8001678:	490c      	ldr	r1, [pc, #48]	; (80016ac <__NVIC_SetPriority+0x4c>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	0112      	lsls	r2, r2, #4
 8001680:	b2d2      	uxtb	r2, r2
 8001682:	440b      	add	r3, r1
 8001684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001688:	e00a      	b.n	80016a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	b2da      	uxtb	r2, r3
 800168e:	4908      	ldr	r1, [pc, #32]	; (80016b0 <__NVIC_SetPriority+0x50>)
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	3b04      	subs	r3, #4
 8001698:	0112      	lsls	r2, r2, #4
 800169a:	b2d2      	uxtb	r2, r2
 800169c:	440b      	add	r3, r1
 800169e:	761a      	strb	r2, [r3, #24]
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000e100 	.word	0xe000e100
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	f1c3 0307 	rsb	r3, r3, #7
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	bf28      	it	cs
 80016d2:	2304      	movcs	r3, #4
 80016d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3304      	adds	r3, #4
 80016da:	2b06      	cmp	r3, #6
 80016dc:	d902      	bls.n	80016e4 <NVIC_EncodePriority+0x30>
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3b03      	subs	r3, #3
 80016e2:	e000      	b.n	80016e6 <NVIC_EncodePriority+0x32>
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	401a      	ands	r2, r3
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	43d9      	mvns	r1, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	4313      	orrs	r3, r2
         );
}
 800170e:	4618      	mov	r0, r3
 8001710:	3724      	adds	r7, #36	; 0x24
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3b01      	subs	r3, #1
 8001728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800172c:	d301      	bcc.n	8001732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800172e:	2301      	movs	r3, #1
 8001730:	e00f      	b.n	8001752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <SysTick_Config+0x40>)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173a:	210f      	movs	r1, #15
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f7ff ff8e 	bl	8001660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <SysTick_Config+0x40>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174a:	4b04      	ldr	r3, [pc, #16]	; (800175c <SysTick_Config+0x40>)
 800174c:	2207      	movs	r2, #7
 800174e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	e000e010 	.word	0xe000e010

08001760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff47 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b086      	sub	sp, #24
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	60b9      	str	r1, [r7, #8]
 8001780:	607a      	str	r2, [r7, #4]
 8001782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001788:	f7ff ff5c 	bl	8001644 <__NVIC_GetPriorityGrouping>
 800178c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	68b9      	ldr	r1, [r7, #8]
 8001792:	6978      	ldr	r0, [r7, #20]
 8001794:	f7ff ff8e 	bl	80016b4 <NVIC_EncodePriority>
 8001798:	4602      	mov	r2, r0
 800179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff5d 	bl	8001660 <__NVIC_SetPriority>
}
 80017a6:	bf00      	nop
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ffb0 	bl	800171c <SysTick_Config>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e014      	b.n	8001802 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	791b      	ldrb	r3, [r3, #4]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d105      	bne.n	80017ee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fd67 	bl	80012bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2202      	movs	r2, #2
 80017f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800180a:	b480      	push	{r7}
 800180c:	b087      	sub	sp, #28
 800180e:	af00      	add	r7, sp, #0
 8001810:	60f8      	str	r0, [r7, #12]
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d105      	bne.n	8001834 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	3308      	adds	r3, #8
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e004      	b.n	800183e <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	3314      	adds	r3, #20
 800183c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	461a      	mov	r2, r3
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	371c      	adds	r7, #28
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	795b      	ldrb	r3, [r3, #5]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_DAC_ConfigChannel+0x1c>
 800186c:	2302      	movs	r3, #2
 800186e:	e114      	b.n	8001a9a <HAL_DAC_ConfigChannel+0x246>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2201      	movs	r2, #1
 8001874:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2202      	movs	r2, #2
 800187a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b04      	cmp	r3, #4
 8001882:	f040 8081 	bne.w	8001988 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001886:	f7ff fe89 	bl	800159c <HAL_GetTick>
 800188a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d140      	bne.n	8001914 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001892:	e018      	b.n	80018c6 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001894:	f7ff fe82 	bl	800159c <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d911      	bls.n	80018c6 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d00a      	beq.n	80018c6 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	f043 0208 	orr.w	r2, r3, #8
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2203      	movs	r2, #3
 80018c0:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e0e9      	b.n	8001a9a <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1df      	bne.n	8001894 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 80018d4:	2001      	movs	r0, #1
 80018d6:	f7ff fe6d 	bl	80015b4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	6992      	ldr	r2, [r2, #24]
 80018e2:	641a      	str	r2, [r3, #64]	; 0x40
 80018e4:	e023      	b.n	800192e <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80018e6:	f7ff fe59 	bl	800159c <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d90f      	bls.n	8001914 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	da0a      	bge.n	8001914 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	f043 0208 	orr.w	r2, r3, #8
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2203      	movs	r2, #3
 800190e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e0c2      	b.n	8001a9a <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191a:	2b00      	cmp	r3, #0
 800191c:	dbe3      	blt.n	80018e6 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 800191e:	2001      	movs	r0, #1
 8001920:	f7ff fe48 	bl	80015b4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	6992      	ldr	r2, [r2, #24]
 800192c:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0310 	and.w	r3, r3, #16
 800193a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	ea02 0103 	and.w	r1, r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	69da      	ldr	r2, [r3, #28]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	409a      	lsls	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f003 0310 	and.w	r3, r3, #16
 8001968:	21ff      	movs	r1, #255	; 0xff
 800196a:	fa01 f303 	lsl.w	r3, r1, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	ea02 0103 	and.w	r1, r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	6a1a      	ldr	r2, [r3, #32]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	409a      	lsls	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d11d      	bne.n	80019cc <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001996:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0310 	and.w	r3, r3, #16
 800199e:	221f      	movs	r2, #31
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0310 	and.w	r3, r3, #16
 80019da:	2207      	movs	r2, #7
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	431a      	orrs	r2, r3
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f003 0310 	and.w	r3, r3, #16
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43da      	mvns	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	400a      	ands	r2, r1
 8001a30:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	6819      	ldr	r1, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	22c0      	movs	r2, #192	; 0xc0
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	400a      	ands	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b087      	sub	sp, #28
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab2:	e17f      	b.n	8001db4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	2101      	movs	r1, #1
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8171 	beq.w	8001dae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d005      	beq.n	8001ae4 <HAL_GPIO_Init+0x40>
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d130      	bne.n	8001b46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	68da      	ldr	r2, [r3, #12]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	f003 0201 	and.w	r2, r3, #1
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f003 0303 	and.w	r3, r3, #3
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d118      	bne.n	8001b84 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b58:	2201      	movs	r2, #1
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	08db      	lsrs	r3, r3, #3
 8001b6e:	f003 0201 	and.w	r2, r3, #1
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d017      	beq.n	8001bc0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d123      	bne.n	8001c14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	08da      	lsrs	r2, r3, #3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3208      	adds	r2, #8
 8001bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	220f      	movs	r2, #15
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	08da      	lsrs	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3208      	adds	r2, #8
 8001c0e:	6939      	ldr	r1, [r7, #16]
 8001c10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0203 	and.w	r2, r3, #3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80ac 	beq.w	8001dae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	4b5f      	ldr	r3, [pc, #380]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c5a:	4a5e      	ldr	r2, [pc, #376]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001c5c:	f043 0301 	orr.w	r3, r3, #1
 8001c60:	6613      	str	r3, [r2, #96]	; 0x60
 8001c62:	4b5c      	ldr	r3, [pc, #368]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c6e:	4a5a      	ldr	r2, [pc, #360]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	3302      	adds	r3, #2
 8001c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	220f      	movs	r2, #15
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c98:	d025      	beq.n	8001ce6 <HAL_GPIO_Init+0x242>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4f      	ldr	r2, [pc, #316]	; (8001ddc <HAL_GPIO_Init+0x338>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d01f      	beq.n	8001ce2 <HAL_GPIO_Init+0x23e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4e      	ldr	r2, [pc, #312]	; (8001de0 <HAL_GPIO_Init+0x33c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d019      	beq.n	8001cde <HAL_GPIO_Init+0x23a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4d      	ldr	r2, [pc, #308]	; (8001de4 <HAL_GPIO_Init+0x340>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <HAL_GPIO_Init+0x236>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4c      	ldr	r2, [pc, #304]	; (8001de8 <HAL_GPIO_Init+0x344>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d00d      	beq.n	8001cd6 <HAL_GPIO_Init+0x232>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a4b      	ldr	r2, [pc, #300]	; (8001dec <HAL_GPIO_Init+0x348>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d007      	beq.n	8001cd2 <HAL_GPIO_Init+0x22e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a4a      	ldr	r2, [pc, #296]	; (8001df0 <HAL_GPIO_Init+0x34c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d101      	bne.n	8001cce <HAL_GPIO_Init+0x22a>
 8001cca:	2306      	movs	r3, #6
 8001ccc:	e00c      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cce:	2307      	movs	r3, #7
 8001cd0:	e00a      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	e008      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e004      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001cde:	2302      	movs	r3, #2
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_GPIO_Init+0x244>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	f002 0203 	and.w	r2, r2, #3
 8001cee:	0092      	lsls	r2, r2, #2
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cf8:	4937      	ldr	r1, [pc, #220]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d06:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d2a:	4a32      	ldr	r2, [pc, #200]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d30:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d54:	4a27      	ldr	r2, [pc, #156]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d5a:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d7e:	4a1d      	ldr	r2, [pc, #116]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d84:	4b1b      	ldr	r3, [pc, #108]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001da8:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <HAL_GPIO_Init+0x350>)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	3301      	adds	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f47f ae78 	bne.w	8001ab4 <HAL_GPIO_Init+0x10>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	371c      	adds	r7, #28
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	48000400 	.word	0x48000400
 8001de0:	48000800 	.word	0x48000800
 8001de4:	48000c00 	.word	0x48000c00
 8001de8:	48001000 	.word	0x48001000
 8001dec:	48001400 	.word	0x48001400
 8001df0:	48001800 	.word	0x48001800
 8001df4:	40010400 	.word	0x40010400

08001df8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691a      	ldr	r2, [r3, #16]
 8001e08:	887b      	ldrh	r3, [r7, #2]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e10:	2301      	movs	r3, #1
 8001e12:	73fb      	strb	r3, [r7, #15]
 8001e14:	e001      	b.n	8001e1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e16:	2300      	movs	r3, #0
 8001e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e2c:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40007000 	.word	0x40007000

08001e44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e52:	d130      	bne.n	8001eb6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e54:	4b23      	ldr	r3, [pc, #140]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e60:	d038      	beq.n	8001ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e62:	4b20      	ldr	r3, [pc, #128]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e6a:	4a1e      	ldr	r2, [pc, #120]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e70:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e72:	4b1d      	ldr	r3, [pc, #116]	; (8001ee8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2232      	movs	r2, #50	; 0x32
 8001e78:	fb02 f303 	mul.w	r3, r2, r3
 8001e7c:	4a1b      	ldr	r2, [pc, #108]	; (8001eec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	0c9b      	lsrs	r3, r3, #18
 8001e84:	3301      	adds	r3, #1
 8001e86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e88:	e002      	b.n	8001e90 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9c:	d102      	bne.n	8001ea4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f2      	bne.n	8001e8a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ea4:	4b0f      	ldr	r3, [pc, #60]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb0:	d110      	bne.n	8001ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e00f      	b.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec2:	d007      	beq.n	8001ed4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ec4:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ecc:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40007000 	.word	0x40007000
 8001ee8:	20000000 	.word	0x20000000
 8001eec:	431bde83 	.word	0x431bde83

08001ef0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e3ca      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f02:	4b97      	ldr	r3, [pc, #604]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f0c:	4b94      	ldr	r3, [pc, #592]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0310 	and.w	r3, r3, #16
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80e4 	beq.w	80020ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d007      	beq.n	8001f3a <HAL_RCC_OscConfig+0x4a>
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	2b0c      	cmp	r3, #12
 8001f2e:	f040 808b 	bne.w	8002048 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	f040 8087 	bne.w	8002048 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f3a:	4b89      	ldr	r3, [pc, #548]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d005      	beq.n	8001f52 <HAL_RCC_OscConfig+0x62>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e3a2      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1a      	ldr	r2, [r3, #32]
 8001f56:	4b82      	ldr	r3, [pc, #520]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d004      	beq.n	8001f6c <HAL_RCC_OscConfig+0x7c>
 8001f62:	4b7f      	ldr	r3, [pc, #508]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f6a:	e005      	b.n	8001f78 <HAL_RCC_OscConfig+0x88>
 8001f6c:	4b7c      	ldr	r3, [pc, #496]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d223      	bcs.n	8001fc4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fd55 	bl	8002a30 <RCC_SetFlashLatencyFromMSIRange>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e383      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f90:	4b73      	ldr	r3, [pc, #460]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a72      	ldr	r2, [pc, #456]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001f96:	f043 0308 	orr.w	r3, r3, #8
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	4b70      	ldr	r3, [pc, #448]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	496d      	ldr	r1, [pc, #436]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fae:	4b6c      	ldr	r3, [pc, #432]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	021b      	lsls	r3, r3, #8
 8001fbc:	4968      	ldr	r1, [pc, #416]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
 8001fc2:	e025      	b.n	8002010 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fc4:	4b66      	ldr	r3, [pc, #408]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a65      	ldr	r2, [pc, #404]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001fca:	f043 0308 	orr.w	r3, r3, #8
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	4b63      	ldr	r3, [pc, #396]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4960      	ldr	r1, [pc, #384]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe2:	4b5f      	ldr	r3, [pc, #380]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	021b      	lsls	r3, r3, #8
 8001ff0:	495b      	ldr	r1, [pc, #364]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d109      	bne.n	8002010 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4618      	mov	r0, r3
 8002002:	f000 fd15 	bl	8002a30 <RCC_SetFlashLatencyFromMSIRange>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e343      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002010:	f000 fc4a 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b52      	ldr	r3, [pc, #328]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	091b      	lsrs	r3, r3, #4
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	4950      	ldr	r1, [pc, #320]	; (8002164 <HAL_RCC_OscConfig+0x274>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
 800202c:	4a4e      	ldr	r2, [pc, #312]	; (8002168 <HAL_RCC_OscConfig+0x278>)
 800202e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002030:	4b4e      	ldr	r3, [pc, #312]	; (800216c <HAL_RCC_OscConfig+0x27c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fa61 	bl	80014fc <HAL_InitTick>
 800203a:	4603      	mov	r3, r0
 800203c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d052      	beq.n	80020ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002044:	7bfb      	ldrb	r3, [r7, #15]
 8002046:	e327      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d032      	beq.n	80020b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002050:	4b43      	ldr	r3, [pc, #268]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a42      	ldr	r2, [pc, #264]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8002056:	f043 0301 	orr.w	r3, r3, #1
 800205a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800205c:	f7ff fa9e 	bl	800159c <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002064:	f7ff fa9a 	bl	800159c <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e310      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002076:	4b3a      	ldr	r3, [pc, #232]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002082:	4b37      	ldr	r3, [pc, #220]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a36      	ldr	r2, [pc, #216]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8002088:	f043 0308 	orr.w	r3, r3, #8
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b34      	ldr	r3, [pc, #208]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	4931      	ldr	r1, [pc, #196]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 800209c:	4313      	orrs	r3, r2
 800209e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020a0:	4b2f      	ldr	r3, [pc, #188]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	492c      	ldr	r1, [pc, #176]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	604b      	str	r3, [r1, #4]
 80020b4:	e01a      	b.n	80020ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020b6:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a29      	ldr	r2, [pc, #164]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020c2:	f7ff fa6b 	bl	800159c <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ca:	f7ff fa67 	bl	800159c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e2dd      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020dc:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <HAL_RCC_OscConfig+0x1da>
 80020e8:	e000      	b.n	80020ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d074      	beq.n	80021e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d005      	beq.n	800210a <HAL_RCC_OscConfig+0x21a>
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b0c      	cmp	r3, #12
 8002102:	d10e      	bne.n	8002122 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d10b      	bne.n	8002122 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210a:	4b15      	ldr	r3, [pc, #84]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d064      	beq.n	80021e0 <HAL_RCC_OscConfig+0x2f0>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d160      	bne.n	80021e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e2ba      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x24a>
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0b      	ldr	r2, [pc, #44]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8002132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	e026      	b.n	8002188 <HAL_RCC_OscConfig+0x298>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002142:	d115      	bne.n	8002170 <HAL_RCC_OscConfig+0x280>
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a05      	ldr	r2, [pc, #20]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 800214a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a02      	ldr	r2, [pc, #8]	; (8002160 <HAL_RCC_OscConfig+0x270>)
 8002156:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	e014      	b.n	8002188 <HAL_RCC_OscConfig+0x298>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	08004f90 	.word	0x08004f90
 8002168:	20000000 	.word	0x20000000
 800216c:	20000004 	.word	0x20000004
 8002170:	4ba0      	ldr	r3, [pc, #640]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a9f      	ldr	r2, [pc, #636]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 8002176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	4b9d      	ldr	r3, [pc, #628]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a9c      	ldr	r2, [pc, #624]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 8002182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002186:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d013      	beq.n	80021b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7ff fa04 	bl	800159c <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7ff fa00 	bl	800159c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e276      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021aa:	4b92      	ldr	r3, [pc, #584]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x2a8>
 80021b6:	e014      	b.n	80021e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b8:	f7ff f9f0 	bl	800159c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c0:	f7ff f9ec 	bl	800159c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	; 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e262      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021d2:	4b88      	ldr	r3, [pc, #544]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f0      	bne.n	80021c0 <HAL_RCC_OscConfig+0x2d0>
 80021de:	e000      	b.n	80021e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d060      	beq.n	80022b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d005      	beq.n	8002200 <HAL_RCC_OscConfig+0x310>
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b0c      	cmp	r3, #12
 80021f8:	d119      	bne.n	800222e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d116      	bne.n	800222e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002200:	4b7c      	ldr	r3, [pc, #496]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_OscConfig+0x328>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e23f      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002218:	4b76      	ldr	r3, [pc, #472]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	061b      	lsls	r3, r3, #24
 8002226:	4973      	ldr	r1, [pc, #460]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800222c:	e040      	b.n	80022b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d023      	beq.n	800227e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002236:	4b6f      	ldr	r3, [pc, #444]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a6e      	ldr	r2, [pc, #440]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7ff f9ab 	bl	800159c <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224a:	f7ff f9a7 	bl	800159c <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e21d      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800225c:	4b65      	ldr	r3, [pc, #404]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002268:	4b62      	ldr	r3, [pc, #392]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	061b      	lsls	r3, r3, #24
 8002276:	495f      	ldr	r1, [pc, #380]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]
 800227c:	e018      	b.n	80022b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227e:	4b5d      	ldr	r3, [pc, #372]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a5c      	ldr	r2, [pc, #368]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 8002284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228a:	f7ff f987 	bl	800159c <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002292:	f7ff f983 	bl	800159c <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e1f9      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a4:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1f0      	bne.n	8002292 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d03c      	beq.n	8002336 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d01c      	beq.n	80022fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c4:	4b4b      	ldr	r3, [pc, #300]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 80022c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ca:	4a4a      	ldr	r2, [pc, #296]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d4:	f7ff f962 	bl	800159c <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022dc:	f7ff f95e 	bl	800159c <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1d4      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ee:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 80022f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0ef      	beq.n	80022dc <HAL_RCC_OscConfig+0x3ec>
 80022fc:	e01b      	b.n	8002336 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022fe:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 8002300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002304:	4a3b      	ldr	r2, [pc, #236]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 8002306:	f023 0301 	bic.w	r3, r3, #1
 800230a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230e:	f7ff f945 	bl	800159c <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002316:	f7ff f941 	bl	800159c <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e1b7      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002328:	4b32      	ldr	r3, [pc, #200]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 800232a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1ef      	bne.n	8002316 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 80a6 	beq.w	8002490 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002344:	2300      	movs	r3, #0
 8002346:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002348:	4b2a      	ldr	r3, [pc, #168]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10d      	bne.n	8002370 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002354:	4b27      	ldr	r3, [pc, #156]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	4a26      	ldr	r2, [pc, #152]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 800235a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235e:	6593      	str	r3, [r2, #88]	; 0x58
 8002360:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236c:	2301      	movs	r3, #1
 800236e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002370:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <HAL_RCC_OscConfig+0x508>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d118      	bne.n	80023ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800237c:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <HAL_RCC_OscConfig+0x508>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <HAL_RCC_OscConfig+0x508>)
 8002382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002386:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002388:	f7ff f908 	bl	800159c <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002390:	f7ff f904 	bl	800159c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e17a      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_RCC_OscConfig+0x508>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d0f0      	beq.n	8002390 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d108      	bne.n	80023c8 <HAL_RCC_OscConfig+0x4d8>
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023bc:	4a0d      	ldr	r2, [pc, #52]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c6:	e029      	b.n	800241c <HAL_RCC_OscConfig+0x52c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d115      	bne.n	80023fc <HAL_RCC_OscConfig+0x50c>
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 80023d8:	f043 0304 	orr.w	r3, r3, #4
 80023dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e6:	4a03      	ldr	r2, [pc, #12]	; (80023f4 <HAL_RCC_OscConfig+0x504>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023f0:	e014      	b.n	800241c <HAL_RCC_OscConfig+0x52c>
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40007000 	.word	0x40007000
 80023fc:	4b9c      	ldr	r3, [pc, #624]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	4a9b      	ldr	r2, [pc, #620]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800240c:	4b98      	ldr	r3, [pc, #608]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002412:	4a97      	ldr	r2, [pc, #604]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 8002414:	f023 0304 	bic.w	r3, r3, #4
 8002418:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d016      	beq.n	8002452 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002424:	f7ff f8ba 	bl	800159c <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800242a:	e00a      	b.n	8002442 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242c:	f7ff f8b6 	bl	800159c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	f241 3288 	movw	r2, #5000	; 0x1388
 800243a:	4293      	cmp	r3, r2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e12a      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002442:	4b8b      	ldr	r3, [pc, #556]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ed      	beq.n	800242c <HAL_RCC_OscConfig+0x53c>
 8002450:	e015      	b.n	800247e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002452:	f7ff f8a3 	bl	800159c <HAL_GetTick>
 8002456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002458:	e00a      	b.n	8002470 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245a:	f7ff f89f 	bl	800159c <HAL_GetTick>
 800245e:	4602      	mov	r2, r0
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	f241 3288 	movw	r2, #5000	; 0x1388
 8002468:	4293      	cmp	r3, r2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e113      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002470:	4b7f      	ldr	r3, [pc, #508]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 8002472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1ed      	bne.n	800245a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800247e:	7ffb      	ldrb	r3, [r7, #31]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d105      	bne.n	8002490 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002484:	4b7a      	ldr	r3, [pc, #488]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	4a79      	ldr	r2, [pc, #484]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 800248a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80fe 	beq.w	8002696 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249e:	2b02      	cmp	r3, #2
 80024a0:	f040 80d0 	bne.w	8002644 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024a4:	4b72      	ldr	r3, [pc, #456]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f003 0203 	and.w	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d130      	bne.n	800251a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	3b01      	subs	r3, #1
 80024c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d127      	bne.n	800251a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d11f      	bne.n	800251a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024e4:	2a07      	cmp	r2, #7
 80024e6:	bf14      	ite	ne
 80024e8:	2201      	movne	r2, #1
 80024ea:	2200      	moveq	r2, #0
 80024ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d113      	bne.n	800251a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fc:	085b      	lsrs	r3, r3, #1
 80024fe:	3b01      	subs	r3, #1
 8002500:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d109      	bne.n	800251a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	085b      	lsrs	r3, r3, #1
 8002512:	3b01      	subs	r3, #1
 8002514:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d06e      	beq.n	80025f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	2b0c      	cmp	r3, #12
 800251e:	d069      	beq.n	80025f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002520:	4b53      	ldr	r3, [pc, #332]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d105      	bne.n	8002538 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800252c:	4b50      	ldr	r3, [pc, #320]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0ad      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800253c:	4b4c      	ldr	r3, [pc, #304]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a4b      	ldr	r2, [pc, #300]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 8002542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002546:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002548:	f7ff f828 	bl	800159c <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002550:	f7ff f824 	bl	800159c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e09a      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002562:	4b43      	ldr	r3, [pc, #268]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800256e:	4b40      	ldr	r3, [pc, #256]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	4b40      	ldr	r3, [pc, #256]	; (8002674 <HAL_RCC_OscConfig+0x784>)
 8002574:	4013      	ands	r3, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800257e:	3a01      	subs	r2, #1
 8002580:	0112      	lsls	r2, r2, #4
 8002582:	4311      	orrs	r1, r2
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002588:	0212      	lsls	r2, r2, #8
 800258a:	4311      	orrs	r1, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002590:	0852      	lsrs	r2, r2, #1
 8002592:	3a01      	subs	r2, #1
 8002594:	0552      	lsls	r2, r2, #21
 8002596:	4311      	orrs	r1, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800259c:	0852      	lsrs	r2, r2, #1
 800259e:	3a01      	subs	r2, #1
 80025a0:	0652      	lsls	r2, r2, #25
 80025a2:	4311      	orrs	r1, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025a8:	0912      	lsrs	r2, r2, #4
 80025aa:	0452      	lsls	r2, r2, #17
 80025ac:	430a      	orrs	r2, r1
 80025ae:	4930      	ldr	r1, [pc, #192]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025b4:	4b2e      	ldr	r3, [pc, #184]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2d      	ldr	r2, [pc, #180]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 80025ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025c0:	4b2b      	ldr	r3, [pc, #172]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4a2a      	ldr	r2, [pc, #168]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 80025c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025cc:	f7fe ffe6 	bl	800159c <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d4:	f7fe ffe2 	bl	800159c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e058      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e6:	4b22      	ldr	r3, [pc, #136]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025f2:	e050      	b.n	8002696 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e04f      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f8:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d148      	bne.n	8002696 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002604:	4b1a      	ldr	r3, [pc, #104]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a19      	ldr	r2, [pc, #100]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 800260a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800260e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002610:	4b17      	ldr	r3, [pc, #92]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4a16      	ldr	r2, [pc, #88]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 8002616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800261a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800261c:	f7fe ffbe 	bl	800159c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002624:	f7fe ffba 	bl	800159c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e030      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x734>
 8002642:	e028      	b.n	8002696 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	2b0c      	cmp	r3, #12
 8002648:	d023      	beq.n	8002692 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a08      	ldr	r2, [pc, #32]	; (8002670 <HAL_RCC_OscConfig+0x780>)
 8002650:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7fe ffa1 	bl	800159c <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800265c:	e00c      	b.n	8002678 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265e:	f7fe ff9d 	bl	800159c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d905      	bls.n	8002678 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e013      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
 8002670:	40021000 	.word	0x40021000
 8002674:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <HAL_RCC_OscConfig+0x7b0>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1ec      	bne.n	800265e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_RCC_OscConfig+0x7b0>)
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	4905      	ldr	r1, [pc, #20]	; (80026a0 <HAL_RCC_OscConfig+0x7b0>)
 800268a:	4b06      	ldr	r3, [pc, #24]	; (80026a4 <HAL_RCC_OscConfig+0x7b4>)
 800268c:	4013      	ands	r3, r2
 800268e:	60cb      	str	r3, [r1, #12]
 8002690:	e001      	b.n	8002696 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3720      	adds	r7, #32
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	feeefffc 	.word	0xfeeefffc

080026a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0e7      	b.n	800288c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026bc:	4b75      	ldr	r3, [pc, #468]	; (8002894 <HAL_RCC_ClockConfig+0x1ec>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d910      	bls.n	80026ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b72      	ldr	r3, [pc, #456]	; (8002894 <HAL_RCC_ClockConfig+0x1ec>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 0207 	bic.w	r2, r3, #7
 80026d2:	4970      	ldr	r1, [pc, #448]	; (8002894 <HAL_RCC_ClockConfig+0x1ec>)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b6e      	ldr	r3, [pc, #440]	; (8002894 <HAL_RCC_ClockConfig+0x1ec>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0cf      	b.n	800288c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d010      	beq.n	800271a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	4b66      	ldr	r3, [pc, #408]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002704:	429a      	cmp	r2, r3
 8002706:	d908      	bls.n	800271a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b63      	ldr	r3, [pc, #396]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4960      	ldr	r1, [pc, #384]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d04c      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b03      	cmp	r3, #3
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272e:	4b5a      	ldr	r3, [pc, #360]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d121      	bne.n	800277e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e0a6      	b.n	800288c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002746:	4b54      	ldr	r3, [pc, #336]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d115      	bne.n	800277e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e09a      	b.n	800288c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800275e:	4b4e      	ldr	r3, [pc, #312]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e08e      	b.n	800288c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800276e:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e086      	b.n	800288c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800277e:	4b46      	ldr	r3, [pc, #280]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f023 0203 	bic.w	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4943      	ldr	r1, [pc, #268]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 800278c:	4313      	orrs	r3, r2
 800278e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002790:	f7fe ff04 	bl	800159c <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	e00a      	b.n	80027ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002798:	f7fe ff00 	bl	800159c <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e06e      	b.n	800288c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	4b3a      	ldr	r3, [pc, #232]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 020c 	and.w	r2, r3, #12
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	429a      	cmp	r2, r3
 80027be:	d1eb      	bne.n	8002798 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d010      	beq.n	80027ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	4b31      	ldr	r3, [pc, #196]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d8:	429a      	cmp	r2, r3
 80027da:	d208      	bcs.n	80027ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027dc:	4b2e      	ldr	r3, [pc, #184]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	492b      	ldr	r1, [pc, #172]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027ee:	4b29      	ldr	r3, [pc, #164]	; (8002894 <HAL_RCC_ClockConfig+0x1ec>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d210      	bcs.n	800281e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fc:	4b25      	ldr	r3, [pc, #148]	; (8002894 <HAL_RCC_ClockConfig+0x1ec>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f023 0207 	bic.w	r2, r3, #7
 8002804:	4923      	ldr	r1, [pc, #140]	; (8002894 <HAL_RCC_ClockConfig+0x1ec>)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280c:	4b21      	ldr	r3, [pc, #132]	; (8002894 <HAL_RCC_ClockConfig+0x1ec>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d001      	beq.n	800281e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e036      	b.n	800288c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800282a:	4b1b      	ldr	r3, [pc, #108]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	4918      	ldr	r1, [pc, #96]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d009      	beq.n	800285c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002848:	4b13      	ldr	r3, [pc, #76]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4910      	ldr	r1, [pc, #64]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800285c:	f000 f824 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	091b      	lsrs	r3, r3, #4
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	490b      	ldr	r1, [pc, #44]	; (800289c <HAL_RCC_ClockConfig+0x1f4>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
 8002878:	4a09      	ldr	r2, [pc, #36]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 800287a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800287c:	4b09      	ldr	r3, [pc, #36]	; (80028a4 <HAL_RCC_ClockConfig+0x1fc>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7fe fe3b 	bl	80014fc <HAL_InitTick>
 8002886:	4603      	mov	r3, r0
 8002888:	72fb      	strb	r3, [r7, #11]

  return status;
 800288a:	7afb      	ldrb	r3, [r7, #11]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40022000 	.word	0x40022000
 8002898:	40021000 	.word	0x40021000
 800289c:	08004f90 	.word	0x08004f90
 80028a0:	20000000 	.word	0x20000000
 80028a4:	20000004 	.word	0x20000004

080028a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b089      	sub	sp, #36	; 0x24
 80028ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
 80028b2:	2300      	movs	r3, #0
 80028b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028b6:	4b3e      	ldr	r3, [pc, #248]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028c0:	4b3b      	ldr	r3, [pc, #236]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d005      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x34>
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	d121      	bne.n	800291a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d11e      	bne.n	800291a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028dc:	4b34      	ldr	r3, [pc, #208]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d107      	bne.n	80028f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028e8:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	e005      	b.n	8002904 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028f8:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002904:	4a2b      	ldr	r2, [pc, #172]	; (80029b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10d      	bne.n	8002930 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002918:	e00a      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	2b04      	cmp	r3, #4
 800291e:	d102      	bne.n	8002926 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002920:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002922:	61bb      	str	r3, [r7, #24]
 8002924:	e004      	b.n	8002930 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b08      	cmp	r3, #8
 800292a:	d101      	bne.n	8002930 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800292c:	4b23      	ldr	r3, [pc, #140]	; (80029bc <HAL_RCC_GetSysClockFreq+0x114>)
 800292e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b0c      	cmp	r3, #12
 8002934:	d134      	bne.n	80029a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002936:	4b1e      	ldr	r3, [pc, #120]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f003 0303 	and.w	r3, r3, #3
 800293e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d003      	beq.n	800294e <HAL_RCC_GetSysClockFreq+0xa6>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	2b03      	cmp	r3, #3
 800294a:	d003      	beq.n	8002954 <HAL_RCC_GetSysClockFreq+0xac>
 800294c:	e005      	b.n	800295a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002950:	617b      	str	r3, [r7, #20]
      break;
 8002952:	e005      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_GetSysClockFreq+0x114>)
 8002956:	617b      	str	r3, [r7, #20]
      break;
 8002958:	e002      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	617b      	str	r3, [r7, #20]
      break;
 800295e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002960:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	3301      	adds	r3, #1
 800296c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800296e:	4b10      	ldr	r3, [pc, #64]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	fb03 f202 	mul.w	r2, r3, r2
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	fbb2 f3f3 	udiv	r3, r2, r3
 8002984:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	0e5b      	lsrs	r3, r3, #25
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	3301      	adds	r3, #1
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	fbb2 f3f3 	udiv	r3, r2, r3
 800299e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029a0:	69bb      	ldr	r3, [r7, #24]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3724      	adds	r7, #36	; 0x24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	40021000 	.word	0x40021000
 80029b4:	08004fa8 	.word	0x08004fa8
 80029b8:	00f42400 	.word	0x00f42400
 80029bc:	007a1200 	.word	0x007a1200

080029c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c4:	4b03      	ldr	r3, [pc, #12]	; (80029d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000000 	.word	0x20000000

080029d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029dc:	f7ff fff0 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	0a1b      	lsrs	r3, r3, #8
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	4904      	ldr	r1, [pc, #16]	; (8002a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029ee:	5ccb      	ldrb	r3, [r1, r3]
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000
 8002a00:	08004fa0 	.word	0x08004fa0

08002a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a08:	f7ff ffda 	bl	80029c0 <HAL_RCC_GetHCLKFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	0adb      	lsrs	r3, r3, #11
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	4904      	ldr	r1, [pc, #16]	; (8002a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	08004fa0 	.word	0x08004fa0

08002a30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a48:	f7ff f9ee 	bl	8001e28 <HAL_PWREx_GetVoltageRange>
 8002a4c:	6178      	str	r0, [r7, #20]
 8002a4e:	e014      	b.n	8002a7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a50:	4b25      	ldr	r3, [pc, #148]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	4a24      	ldr	r2, [pc, #144]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002a5c:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a68:	f7ff f9de 	bl	8001e28 <HAL_PWREx_GetVoltageRange>
 8002a6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	4a1d      	ldr	r2, [pc, #116]	; (8002ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a80:	d10b      	bne.n	8002a9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b80      	cmp	r3, #128	; 0x80
 8002a86:	d919      	bls.n	8002abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2ba0      	cmp	r3, #160	; 0xa0
 8002a8c:	d902      	bls.n	8002a94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a8e:	2302      	movs	r3, #2
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	e013      	b.n	8002abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a94:	2301      	movs	r3, #1
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	e010      	b.n	8002abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b80      	cmp	r3, #128	; 0x80
 8002a9e:	d902      	bls.n	8002aa6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	e00a      	b.n	8002abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b80      	cmp	r3, #128	; 0x80
 8002aaa:	d102      	bne.n	8002ab2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aac:	2302      	movs	r3, #2
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	e004      	b.n	8002abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b70      	cmp	r3, #112	; 0x70
 8002ab6:	d101      	bne.n	8002abc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ab8:	2301      	movs	r3, #1
 8002aba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002abc:	4b0b      	ldr	r3, [pc, #44]	; (8002aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f023 0207 	bic.w	r2, r3, #7
 8002ac4:	4909      	ldr	r1, [pc, #36]	; (8002aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002acc:	4b07      	ldr	r3, [pc, #28]	; (8002aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d001      	beq.n	8002ade <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3718      	adds	r7, #24
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	40022000 	.word	0x40022000

08002af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002af8:	2300      	movs	r3, #0
 8002afa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002afc:	2300      	movs	r3, #0
 8002afe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d041      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b14:	d02a      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b1a:	d824      	bhi.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b20:	d008      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b26:	d81e      	bhi.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00a      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b30:	d010      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b32:	e018      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b34:	4b86      	ldr	r3, [pc, #536]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4a85      	ldr	r2, [pc, #532]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b40:	e015      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2100      	movs	r1, #0
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 fabb 	bl	80030c4 <RCCEx_PLLSAI1_Config>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b52:	e00c      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3320      	adds	r3, #32
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fba6 	bl	80032ac <RCCEx_PLLSAI2_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b64:	e003      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	74fb      	strb	r3, [r7, #19]
      break;
 8002b6a:	e000      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b6e:	7cfb      	ldrb	r3, [r7, #19]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b74:	4b76      	ldr	r3, [pc, #472]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b82:	4973      	ldr	r1, [pc, #460]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b8a:	e001      	b.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b8c:	7cfb      	ldrb	r3, [r7, #19]
 8002b8e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d041      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ba0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ba4:	d02a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ba6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002baa:	d824      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bb0:	d008      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bb6:	d81e      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bc0:	d010      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002bc2:	e018      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bc4:	4b62      	ldr	r3, [pc, #392]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	4a61      	ldr	r2, [pc, #388]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bce:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bd0:	e015      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 fa73 	bl	80030c4 <RCCEx_PLLSAI1_Config>
 8002bde:	4603      	mov	r3, r0
 8002be0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002be2:	e00c      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3320      	adds	r3, #32
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f000 fb5e 	bl	80032ac <RCCEx_PLLSAI2_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bf4:	e003      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	74fb      	strb	r3, [r7, #19]
      break;
 8002bfa:	e000      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bfe:	7cfb      	ldrb	r3, [r7, #19]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10b      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c04:	4b52      	ldr	r3, [pc, #328]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c12:	494f      	ldr	r1, [pc, #316]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c1a:	e001      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c1c:	7cfb      	ldrb	r3, [r7, #19]
 8002c1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 80a0 	beq.w	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c32:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c42:	2300      	movs	r3, #0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c48:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	4a40      	ldr	r2, [pc, #256]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c52:	6593      	str	r3, [r2, #88]	; 0x58
 8002c54:	4b3e      	ldr	r3, [pc, #248]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c60:	2301      	movs	r3, #1
 8002c62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a3a      	ldr	r2, [pc, #232]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c70:	f7fe fc94 	bl	800159c <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c76:	e009      	b.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c78:	f7fe fc90 	bl	800159c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d902      	bls.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	74fb      	strb	r3, [r7, #19]
        break;
 8002c8a:	e005      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c8c:	4b31      	ldr	r3, [pc, #196]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d0ef      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c98:	7cfb      	ldrb	r3, [r7, #19]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d15c      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c9e:	4b2c      	ldr	r3, [pc, #176]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d01f      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d019      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cbc:	4b24      	ldr	r3, [pc, #144]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cc8:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	4a20      	ldr	r2, [pc, #128]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cde:	4a1c      	ldr	r2, [pc, #112]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ce8:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d016      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7fe fc4f 	bl	800159c <HAL_GetTick>
 8002cfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d00:	e00b      	b.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d02:	f7fe fc4b 	bl	800159c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d902      	bls.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	74fb      	strb	r3, [r7, #19]
            break;
 8002d18:	e006      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d0ec      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d28:	7cfb      	ldrb	r3, [r7, #19]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d3e:	4904      	ldr	r1, [pc, #16]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d46:	e009      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	74bb      	strb	r3, [r7, #18]
 8002d4c:	e006      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d5c:	7c7b      	ldrb	r3, [r7, #17]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d105      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d62:	4b9e      	ldr	r3, [pc, #632]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	4a9d      	ldr	r2, [pc, #628]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d7a:	4b98      	ldr	r3, [pc, #608]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d80:	f023 0203 	bic.w	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	4994      	ldr	r1, [pc, #592]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d9c:	4b8f      	ldr	r3, [pc, #572]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	f023 020c 	bic.w	r2, r3, #12
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002daa:	498c      	ldr	r1, [pc, #560]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dbe:	4b87      	ldr	r3, [pc, #540]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	4983      	ldr	r1, [pc, #524]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002de0:	4b7e      	ldr	r3, [pc, #504]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dee:	497b      	ldr	r1, [pc, #492]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e02:	4b76      	ldr	r3, [pc, #472]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e10:	4972      	ldr	r1, [pc, #456]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e24:	4b6d      	ldr	r3, [pc, #436]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e32:	496a      	ldr	r1, [pc, #424]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e46:	4b65      	ldr	r3, [pc, #404]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e54:	4961      	ldr	r1, [pc, #388]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e68:	4b5c      	ldr	r3, [pc, #368]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e76:	4959      	ldr	r1, [pc, #356]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e8a:	4b54      	ldr	r3, [pc, #336]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e98:	4950      	ldr	r1, [pc, #320]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eac:	4b4b      	ldr	r3, [pc, #300]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	4948      	ldr	r1, [pc, #288]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ece:	4b43      	ldr	r3, [pc, #268]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	493f      	ldr	r1, [pc, #252]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d028      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ef0:	4b3a      	ldr	r3, [pc, #232]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002efe:	4937      	ldr	r1, [pc, #220]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f10:	4b32      	ldr	r3, [pc, #200]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4a31      	ldr	r2, [pc, #196]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f1a:	60d3      	str	r3, [r2, #12]
 8002f1c:	e011      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f26:	d10c      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f8c8 	bl	80030c4 <RCCEx_PLLSAI1_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f38:	7cfb      	ldrb	r3, [r7, #19]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f3e:	7cfb      	ldrb	r3, [r7, #19]
 8002f40:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d028      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f4e:	4b23      	ldr	r3, [pc, #140]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f54:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f5c:	491f      	ldr	r1, [pc, #124]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f6c:	d106      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f6e:	4b1b      	ldr	r3, [pc, #108]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	4a1a      	ldr	r2, [pc, #104]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f78:	60d3      	str	r3, [r2, #12]
 8002f7a:	e011      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 f899 	bl	80030c4 <RCCEx_PLLSAI1_Config>
 8002f92:	4603      	mov	r3, r0
 8002f94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f96:	7cfb      	ldrb	r3, [r7, #19]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f9c:	7cfb      	ldrb	r3, [r7, #19]
 8002f9e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02b      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fba:	4908      	ldr	r1, [pc, #32]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fca:	d109      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fcc:	4b03      	ldr	r3, [pc, #12]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	4a02      	ldr	r2, [pc, #8]	; (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fd6:	60d3      	str	r3, [r2, #12]
 8002fd8:	e014      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002fda:	bf00      	nop
 8002fdc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fe8:	d10c      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	2101      	movs	r1, #1
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 f867 	bl	80030c4 <RCCEx_PLLSAI1_Config>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ffa:	7cfb      	ldrb	r3, [r7, #19]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003000:	7cfb      	ldrb	r3, [r7, #19]
 8003002:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d02f      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003010:	4b2b      	ldr	r3, [pc, #172]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800301e:	4928      	ldr	r1, [pc, #160]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800302a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800302e:	d10d      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3304      	adds	r3, #4
 8003034:	2102      	movs	r1, #2
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f844 	bl	80030c4 <RCCEx_PLLSAI1_Config>
 800303c:	4603      	mov	r3, r0
 800303e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d014      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003046:	7cfb      	ldrb	r3, [r7, #19]
 8003048:	74bb      	strb	r3, [r7, #18]
 800304a:	e011      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003054:	d10c      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3320      	adds	r3, #32
 800305a:	2102      	movs	r1, #2
 800305c:	4618      	mov	r0, r3
 800305e:	f000 f925 	bl	80032ac <RCCEx_PLLSAI2_Config>
 8003062:	4603      	mov	r3, r0
 8003064:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003066:	7cfb      	ldrb	r3, [r7, #19]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800306c:	7cfb      	ldrb	r3, [r7, #19]
 800306e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800307c:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003082:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800308a:	490d      	ldr	r1, [pc, #52]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800309e:	4b08      	ldr	r3, [pc, #32]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ae:	4904      	ldr	r1, [pc, #16]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030b6:	7cbb      	ldrb	r3, [r7, #18]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3718      	adds	r7, #24
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40021000 	.word	0x40021000

080030c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030d2:	4b75      	ldr	r3, [pc, #468]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d018      	beq.n	8003110 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80030de:	4b72      	ldr	r3, [pc, #456]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f003 0203 	and.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d10d      	bne.n	800310a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
       ||
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d009      	beq.n	800310a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030f6:	4b6c      	ldr	r3, [pc, #432]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	1c5a      	adds	r2, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
       ||
 8003106:	429a      	cmp	r2, r3
 8003108:	d047      	beq.n	800319a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	e044      	b.n	800319a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d018      	beq.n	800314a <RCCEx_PLLSAI1_Config+0x86>
 8003118:	2b03      	cmp	r3, #3
 800311a:	d825      	bhi.n	8003168 <RCCEx_PLLSAI1_Config+0xa4>
 800311c:	2b01      	cmp	r3, #1
 800311e:	d002      	beq.n	8003126 <RCCEx_PLLSAI1_Config+0x62>
 8003120:	2b02      	cmp	r3, #2
 8003122:	d009      	beq.n	8003138 <RCCEx_PLLSAI1_Config+0x74>
 8003124:	e020      	b.n	8003168 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003126:	4b60      	ldr	r3, [pc, #384]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d11d      	bne.n	800316e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003136:	e01a      	b.n	800316e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003138:	4b5b      	ldr	r3, [pc, #364]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d116      	bne.n	8003172 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003148:	e013      	b.n	8003172 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800314a:	4b57      	ldr	r3, [pc, #348]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10f      	bne.n	8003176 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003156:	4b54      	ldr	r3, [pc, #336]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003166:	e006      	b.n	8003176 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      break;
 800316c:	e004      	b.n	8003178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800316e:	bf00      	nop
 8003170:	e002      	b.n	8003178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003172:	bf00      	nop
 8003174:	e000      	b.n	8003178 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003176:	bf00      	nop
    }

    if(status == HAL_OK)
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10d      	bne.n	800319a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800317e:	4b4a      	ldr	r3, [pc, #296]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6819      	ldr	r1, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	3b01      	subs	r3, #1
 8003190:	011b      	lsls	r3, r3, #4
 8003192:	430b      	orrs	r3, r1
 8003194:	4944      	ldr	r1, [pc, #272]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003196:	4313      	orrs	r3, r2
 8003198:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800319a:	7bfb      	ldrb	r3, [r7, #15]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d17d      	bne.n	800329c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031a0:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a40      	ldr	r2, [pc, #256]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ac:	f7fe f9f6 	bl	800159c <HAL_GetTick>
 80031b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031b2:	e009      	b.n	80031c8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031b4:	f7fe f9f2 	bl	800159c <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d902      	bls.n	80031c8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	73fb      	strb	r3, [r7, #15]
        break;
 80031c6:	e005      	b.n	80031d4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031c8:	4b37      	ldr	r3, [pc, #220]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1ef      	bne.n	80031b4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d160      	bne.n	800329c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d111      	bne.n	8003204 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031e0:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6892      	ldr	r2, [r2, #8]
 80031f0:	0211      	lsls	r1, r2, #8
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68d2      	ldr	r2, [r2, #12]
 80031f6:	0912      	lsrs	r2, r2, #4
 80031f8:	0452      	lsls	r2, r2, #17
 80031fa:	430a      	orrs	r2, r1
 80031fc:	492a      	ldr	r1, [pc, #168]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	610b      	str	r3, [r1, #16]
 8003202:	e027      	b.n	8003254 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d112      	bne.n	8003230 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800320a:	4b27      	ldr	r3, [pc, #156]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003212:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6892      	ldr	r2, [r2, #8]
 800321a:	0211      	lsls	r1, r2, #8
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6912      	ldr	r2, [r2, #16]
 8003220:	0852      	lsrs	r2, r2, #1
 8003222:	3a01      	subs	r2, #1
 8003224:	0552      	lsls	r2, r2, #21
 8003226:	430a      	orrs	r2, r1
 8003228:	491f      	ldr	r1, [pc, #124]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322a:	4313      	orrs	r3, r2
 800322c:	610b      	str	r3, [r1, #16]
 800322e:	e011      	b.n	8003254 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003230:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003238:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6892      	ldr	r2, [r2, #8]
 8003240:	0211      	lsls	r1, r2, #8
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6952      	ldr	r2, [r2, #20]
 8003246:	0852      	lsrs	r2, r2, #1
 8003248:	3a01      	subs	r2, #1
 800324a:	0652      	lsls	r2, r2, #25
 800324c:	430a      	orrs	r2, r1
 800324e:	4916      	ldr	r1, [pc, #88]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003250:	4313      	orrs	r3, r2
 8003252:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003254:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800325a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800325e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe f99c 	bl	800159c <HAL_GetTick>
 8003264:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003266:	e009      	b.n	800327c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003268:	f7fe f998 	bl	800159c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d902      	bls.n	800327c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	73fb      	strb	r3, [r7, #15]
          break;
 800327a:	e005      	b.n	8003288 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800327c:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0ef      	beq.n	8003268 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800328e:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003290:	691a      	ldr	r2, [r3, #16]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	4904      	ldr	r1, [pc, #16]	; (80032a8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003298:	4313      	orrs	r3, r2
 800329a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000

080032ac <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032ba:	4b6a      	ldr	r3, [pc, #424]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d018      	beq.n	80032f8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032c6:	4b67      	ldr	r3, [pc, #412]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f003 0203 	and.w	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d10d      	bne.n	80032f2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
       ||
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d009      	beq.n	80032f2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80032de:	4b61      	ldr	r3, [pc, #388]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
       ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d047      	beq.n	8003382 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	73fb      	strb	r3, [r7, #15]
 80032f6:	e044      	b.n	8003382 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b03      	cmp	r3, #3
 80032fe:	d018      	beq.n	8003332 <RCCEx_PLLSAI2_Config+0x86>
 8003300:	2b03      	cmp	r3, #3
 8003302:	d825      	bhi.n	8003350 <RCCEx_PLLSAI2_Config+0xa4>
 8003304:	2b01      	cmp	r3, #1
 8003306:	d002      	beq.n	800330e <RCCEx_PLLSAI2_Config+0x62>
 8003308:	2b02      	cmp	r3, #2
 800330a:	d009      	beq.n	8003320 <RCCEx_PLLSAI2_Config+0x74>
 800330c:	e020      	b.n	8003350 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800330e:	4b55      	ldr	r3, [pc, #340]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d11d      	bne.n	8003356 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331e:	e01a      	b.n	8003356 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003320:	4b50      	ldr	r3, [pc, #320]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003328:	2b00      	cmp	r3, #0
 800332a:	d116      	bne.n	800335a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003330:	e013      	b.n	800335a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003332:	4b4c      	ldr	r3, [pc, #304]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10f      	bne.n	800335e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800333e:	4b49      	ldr	r3, [pc, #292]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d109      	bne.n	800335e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800334e:	e006      	b.n	800335e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
      break;
 8003354:	e004      	b.n	8003360 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003356:	bf00      	nop
 8003358:	e002      	b.n	8003360 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800335e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10d      	bne.n	8003382 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003366:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6819      	ldr	r1, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	3b01      	subs	r3, #1
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	430b      	orrs	r3, r1
 800337c:	4939      	ldr	r1, [pc, #228]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800337e:	4313      	orrs	r3, r2
 8003380:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003382:	7bfb      	ldrb	r3, [r7, #15]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d167      	bne.n	8003458 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003388:	4b36      	ldr	r3, [pc, #216]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a35      	ldr	r2, [pc, #212]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800338e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003394:	f7fe f902 	bl	800159c <HAL_GetTick>
 8003398:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800339a:	e009      	b.n	80033b0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800339c:	f7fe f8fe 	bl	800159c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d902      	bls.n	80033b0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	73fb      	strb	r3, [r7, #15]
        break;
 80033ae:	e005      	b.n	80033bc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033b0:	4b2c      	ldr	r3, [pc, #176]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ef      	bne.n	800339c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d14a      	bne.n	8003458 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d111      	bne.n	80033ec <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033c8:	4b26      	ldr	r3, [pc, #152]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80033d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6892      	ldr	r2, [r2, #8]
 80033d8:	0211      	lsls	r1, r2, #8
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	68d2      	ldr	r2, [r2, #12]
 80033de:	0912      	lsrs	r2, r2, #4
 80033e0:	0452      	lsls	r2, r2, #17
 80033e2:	430a      	orrs	r2, r1
 80033e4:	491f      	ldr	r1, [pc, #124]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	614b      	str	r3, [r1, #20]
 80033ea:	e011      	b.n	8003410 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6892      	ldr	r2, [r2, #8]
 80033fc:	0211      	lsls	r1, r2, #8
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6912      	ldr	r2, [r2, #16]
 8003402:	0852      	lsrs	r2, r2, #1
 8003404:	3a01      	subs	r2, #1
 8003406:	0652      	lsls	r2, r2, #25
 8003408:	430a      	orrs	r2, r1
 800340a:	4916      	ldr	r1, [pc, #88]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800340c:	4313      	orrs	r3, r2
 800340e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003410:	4b14      	ldr	r3, [pc, #80]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a13      	ldr	r2, [pc, #76]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800341c:	f7fe f8be 	bl	800159c <HAL_GetTick>
 8003420:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003422:	e009      	b.n	8003438 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003424:	f7fe f8ba 	bl	800159c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d902      	bls.n	8003438 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	73fb      	strb	r3, [r7, #15]
          break;
 8003436:	e005      	b.n	8003444 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003438:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0ef      	beq.n	8003424 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003444:	7bfb      	ldrb	r3, [r7, #15]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d106      	bne.n	8003458 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	4904      	ldr	r1, [pc, #16]	; (8003464 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003454:	4313      	orrs	r3, r2
 8003456:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003458:	7bfb      	ldrb	r3, [r7, #15]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40021000 	.word	0x40021000

08003468 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e040      	b.n	80034fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d106      	bne.n	8003490 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7fd ff54 	bl	8001338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2224      	movs	r2, #36	; 0x24
 8003494:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0201 	bic.w	r2, r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fae0 	bl	8003a74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f825 	bl	8003504 <UART_SetConfig>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e01b      	b.n	80034fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fb5f 	bl	8003bb8 <UART_CheckIdleState>
 80034fa:	4603      	mov	r3, r0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003508:	b08a      	sub	sp, #40	; 0x28
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	431a      	orrs	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	431a      	orrs	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	4313      	orrs	r3, r2
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4ba4      	ldr	r3, [pc, #656]	; (80037c4 <UART_SetConfig+0x2c0>)
 8003534:	4013      	ands	r3, r2
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	6812      	ldr	r2, [r2, #0]
 800353a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800353c:	430b      	orrs	r3, r1
 800353e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a99      	ldr	r2, [pc, #612]	; (80037c8 <UART_SetConfig+0x2c4>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d004      	beq.n	8003570 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800356c:	4313      	orrs	r3, r2
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003580:	430a      	orrs	r2, r1
 8003582:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a90      	ldr	r2, [pc, #576]	; (80037cc <UART_SetConfig+0x2c8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d126      	bne.n	80035dc <UART_SetConfig+0xd8>
 800358e:	4b90      	ldr	r3, [pc, #576]	; (80037d0 <UART_SetConfig+0x2cc>)
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003594:	f003 0303 	and.w	r3, r3, #3
 8003598:	2b03      	cmp	r3, #3
 800359a:	d81b      	bhi.n	80035d4 <UART_SetConfig+0xd0>
 800359c:	a201      	add	r2, pc, #4	; (adr r2, 80035a4 <UART_SetConfig+0xa0>)
 800359e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a2:	bf00      	nop
 80035a4:	080035b5 	.word	0x080035b5
 80035a8:	080035c5 	.word	0x080035c5
 80035ac:	080035bd 	.word	0x080035bd
 80035b0:	080035cd 	.word	0x080035cd
 80035b4:	2301      	movs	r3, #1
 80035b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ba:	e116      	b.n	80037ea <UART_SetConfig+0x2e6>
 80035bc:	2302      	movs	r3, #2
 80035be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c2:	e112      	b.n	80037ea <UART_SetConfig+0x2e6>
 80035c4:	2304      	movs	r3, #4
 80035c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ca:	e10e      	b.n	80037ea <UART_SetConfig+0x2e6>
 80035cc:	2308      	movs	r3, #8
 80035ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d2:	e10a      	b.n	80037ea <UART_SetConfig+0x2e6>
 80035d4:	2310      	movs	r3, #16
 80035d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035da:	e106      	b.n	80037ea <UART_SetConfig+0x2e6>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a7c      	ldr	r2, [pc, #496]	; (80037d4 <UART_SetConfig+0x2d0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d138      	bne.n	8003658 <UART_SetConfig+0x154>
 80035e6:	4b7a      	ldr	r3, [pc, #488]	; (80037d0 <UART_SetConfig+0x2cc>)
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b0c      	cmp	r3, #12
 80035f2:	d82d      	bhi.n	8003650 <UART_SetConfig+0x14c>
 80035f4:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <UART_SetConfig+0xf8>)
 80035f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	08003631 	.word	0x08003631
 8003600:	08003651 	.word	0x08003651
 8003604:	08003651 	.word	0x08003651
 8003608:	08003651 	.word	0x08003651
 800360c:	08003641 	.word	0x08003641
 8003610:	08003651 	.word	0x08003651
 8003614:	08003651 	.word	0x08003651
 8003618:	08003651 	.word	0x08003651
 800361c:	08003639 	.word	0x08003639
 8003620:	08003651 	.word	0x08003651
 8003624:	08003651 	.word	0x08003651
 8003628:	08003651 	.word	0x08003651
 800362c:	08003649 	.word	0x08003649
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003636:	e0d8      	b.n	80037ea <UART_SetConfig+0x2e6>
 8003638:	2302      	movs	r3, #2
 800363a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363e:	e0d4      	b.n	80037ea <UART_SetConfig+0x2e6>
 8003640:	2304      	movs	r3, #4
 8003642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003646:	e0d0      	b.n	80037ea <UART_SetConfig+0x2e6>
 8003648:	2308      	movs	r3, #8
 800364a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800364e:	e0cc      	b.n	80037ea <UART_SetConfig+0x2e6>
 8003650:	2310      	movs	r3, #16
 8003652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003656:	e0c8      	b.n	80037ea <UART_SetConfig+0x2e6>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a5e      	ldr	r2, [pc, #376]	; (80037d8 <UART_SetConfig+0x2d4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d125      	bne.n	80036ae <UART_SetConfig+0x1aa>
 8003662:	4b5b      	ldr	r3, [pc, #364]	; (80037d0 <UART_SetConfig+0x2cc>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003668:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800366c:	2b30      	cmp	r3, #48	; 0x30
 800366e:	d016      	beq.n	800369e <UART_SetConfig+0x19a>
 8003670:	2b30      	cmp	r3, #48	; 0x30
 8003672:	d818      	bhi.n	80036a6 <UART_SetConfig+0x1a2>
 8003674:	2b20      	cmp	r3, #32
 8003676:	d00a      	beq.n	800368e <UART_SetConfig+0x18a>
 8003678:	2b20      	cmp	r3, #32
 800367a:	d814      	bhi.n	80036a6 <UART_SetConfig+0x1a2>
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <UART_SetConfig+0x182>
 8003680:	2b10      	cmp	r3, #16
 8003682:	d008      	beq.n	8003696 <UART_SetConfig+0x192>
 8003684:	e00f      	b.n	80036a6 <UART_SetConfig+0x1a2>
 8003686:	2300      	movs	r3, #0
 8003688:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800368c:	e0ad      	b.n	80037ea <UART_SetConfig+0x2e6>
 800368e:	2302      	movs	r3, #2
 8003690:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003694:	e0a9      	b.n	80037ea <UART_SetConfig+0x2e6>
 8003696:	2304      	movs	r3, #4
 8003698:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369c:	e0a5      	b.n	80037ea <UART_SetConfig+0x2e6>
 800369e:	2308      	movs	r3, #8
 80036a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a4:	e0a1      	b.n	80037ea <UART_SetConfig+0x2e6>
 80036a6:	2310      	movs	r3, #16
 80036a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ac:	e09d      	b.n	80037ea <UART_SetConfig+0x2e6>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a4a      	ldr	r2, [pc, #296]	; (80037dc <UART_SetConfig+0x2d8>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d125      	bne.n	8003704 <UART_SetConfig+0x200>
 80036b8:	4b45      	ldr	r3, [pc, #276]	; (80037d0 <UART_SetConfig+0x2cc>)
 80036ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80036c2:	2bc0      	cmp	r3, #192	; 0xc0
 80036c4:	d016      	beq.n	80036f4 <UART_SetConfig+0x1f0>
 80036c6:	2bc0      	cmp	r3, #192	; 0xc0
 80036c8:	d818      	bhi.n	80036fc <UART_SetConfig+0x1f8>
 80036ca:	2b80      	cmp	r3, #128	; 0x80
 80036cc:	d00a      	beq.n	80036e4 <UART_SetConfig+0x1e0>
 80036ce:	2b80      	cmp	r3, #128	; 0x80
 80036d0:	d814      	bhi.n	80036fc <UART_SetConfig+0x1f8>
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <UART_SetConfig+0x1d8>
 80036d6:	2b40      	cmp	r3, #64	; 0x40
 80036d8:	d008      	beq.n	80036ec <UART_SetConfig+0x1e8>
 80036da:	e00f      	b.n	80036fc <UART_SetConfig+0x1f8>
 80036dc:	2300      	movs	r3, #0
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e2:	e082      	b.n	80037ea <UART_SetConfig+0x2e6>
 80036e4:	2302      	movs	r3, #2
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ea:	e07e      	b.n	80037ea <UART_SetConfig+0x2e6>
 80036ec:	2304      	movs	r3, #4
 80036ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f2:	e07a      	b.n	80037ea <UART_SetConfig+0x2e6>
 80036f4:	2308      	movs	r3, #8
 80036f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fa:	e076      	b.n	80037ea <UART_SetConfig+0x2e6>
 80036fc:	2310      	movs	r3, #16
 80036fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003702:	e072      	b.n	80037ea <UART_SetConfig+0x2e6>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a35      	ldr	r2, [pc, #212]	; (80037e0 <UART_SetConfig+0x2dc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d12a      	bne.n	8003764 <UART_SetConfig+0x260>
 800370e:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <UART_SetConfig+0x2cc>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003714:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800371c:	d01a      	beq.n	8003754 <UART_SetConfig+0x250>
 800371e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003722:	d81b      	bhi.n	800375c <UART_SetConfig+0x258>
 8003724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003728:	d00c      	beq.n	8003744 <UART_SetConfig+0x240>
 800372a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800372e:	d815      	bhi.n	800375c <UART_SetConfig+0x258>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <UART_SetConfig+0x238>
 8003734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003738:	d008      	beq.n	800374c <UART_SetConfig+0x248>
 800373a:	e00f      	b.n	800375c <UART_SetConfig+0x258>
 800373c:	2300      	movs	r3, #0
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003742:	e052      	b.n	80037ea <UART_SetConfig+0x2e6>
 8003744:	2302      	movs	r3, #2
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374a:	e04e      	b.n	80037ea <UART_SetConfig+0x2e6>
 800374c:	2304      	movs	r3, #4
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003752:	e04a      	b.n	80037ea <UART_SetConfig+0x2e6>
 8003754:	2308      	movs	r3, #8
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375a:	e046      	b.n	80037ea <UART_SetConfig+0x2e6>
 800375c:	2310      	movs	r3, #16
 800375e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003762:	e042      	b.n	80037ea <UART_SetConfig+0x2e6>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a17      	ldr	r2, [pc, #92]	; (80037c8 <UART_SetConfig+0x2c4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d13a      	bne.n	80037e4 <UART_SetConfig+0x2e0>
 800376e:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <UART_SetConfig+0x2cc>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003778:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800377c:	d01a      	beq.n	80037b4 <UART_SetConfig+0x2b0>
 800377e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003782:	d81b      	bhi.n	80037bc <UART_SetConfig+0x2b8>
 8003784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003788:	d00c      	beq.n	80037a4 <UART_SetConfig+0x2a0>
 800378a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800378e:	d815      	bhi.n	80037bc <UART_SetConfig+0x2b8>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <UART_SetConfig+0x298>
 8003794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003798:	d008      	beq.n	80037ac <UART_SetConfig+0x2a8>
 800379a:	e00f      	b.n	80037bc <UART_SetConfig+0x2b8>
 800379c:	2300      	movs	r3, #0
 800379e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a2:	e022      	b.n	80037ea <UART_SetConfig+0x2e6>
 80037a4:	2302      	movs	r3, #2
 80037a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037aa:	e01e      	b.n	80037ea <UART_SetConfig+0x2e6>
 80037ac:	2304      	movs	r3, #4
 80037ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b2:	e01a      	b.n	80037ea <UART_SetConfig+0x2e6>
 80037b4:	2308      	movs	r3, #8
 80037b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ba:	e016      	b.n	80037ea <UART_SetConfig+0x2e6>
 80037bc:	2310      	movs	r3, #16
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037c2:	e012      	b.n	80037ea <UART_SetConfig+0x2e6>
 80037c4:	efff69f3 	.word	0xefff69f3
 80037c8:	40008000 	.word	0x40008000
 80037cc:	40013800 	.word	0x40013800
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40004400 	.word	0x40004400
 80037d8:	40004800 	.word	0x40004800
 80037dc:	40004c00 	.word	0x40004c00
 80037e0:	40005000 	.word	0x40005000
 80037e4:	2310      	movs	r3, #16
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a9f      	ldr	r2, [pc, #636]	; (8003a6c <UART_SetConfig+0x568>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d17a      	bne.n	80038ea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d824      	bhi.n	8003846 <UART_SetConfig+0x342>
 80037fc:	a201      	add	r2, pc, #4	; (adr r2, 8003804 <UART_SetConfig+0x300>)
 80037fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003802:	bf00      	nop
 8003804:	08003829 	.word	0x08003829
 8003808:	08003847 	.word	0x08003847
 800380c:	08003831 	.word	0x08003831
 8003810:	08003847 	.word	0x08003847
 8003814:	08003837 	.word	0x08003837
 8003818:	08003847 	.word	0x08003847
 800381c:	08003847 	.word	0x08003847
 8003820:	08003847 	.word	0x08003847
 8003824:	0800383f 	.word	0x0800383f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003828:	f7ff f8d6 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 800382c:	61f8      	str	r0, [r7, #28]
        break;
 800382e:	e010      	b.n	8003852 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003830:	4b8f      	ldr	r3, [pc, #572]	; (8003a70 <UART_SetConfig+0x56c>)
 8003832:	61fb      	str	r3, [r7, #28]
        break;
 8003834:	e00d      	b.n	8003852 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003836:	f7ff f837 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 800383a:	61f8      	str	r0, [r7, #28]
        break;
 800383c:	e009      	b.n	8003852 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800383e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003842:	61fb      	str	r3, [r7, #28]
        break;
 8003844:	e005      	b.n	8003852 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003850:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 80fb 	beq.w	8003a50 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	4413      	add	r3, r2
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	429a      	cmp	r2, r3
 8003868:	d305      	bcc.n	8003876 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003870:	69fa      	ldr	r2, [r7, #28]
 8003872:	429a      	cmp	r2, r3
 8003874:	d903      	bls.n	800387e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800387c:	e0e8      	b.n	8003a50 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	2200      	movs	r2, #0
 8003882:	461c      	mov	r4, r3
 8003884:	4615      	mov	r5, r2
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	022b      	lsls	r3, r5, #8
 8003890:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003894:	0222      	lsls	r2, r4, #8
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	6849      	ldr	r1, [r1, #4]
 800389a:	0849      	lsrs	r1, r1, #1
 800389c:	2000      	movs	r0, #0
 800389e:	4688      	mov	r8, r1
 80038a0:	4681      	mov	r9, r0
 80038a2:	eb12 0a08 	adds.w	sl, r2, r8
 80038a6:	eb43 0b09 	adc.w	fp, r3, r9
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038b8:	4650      	mov	r0, sl
 80038ba:	4659      	mov	r1, fp
 80038bc:	f7fd f952 	bl	8000b64 <__aeabi_uldivmod>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4613      	mov	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ce:	d308      	bcc.n	80038e2 <UART_SetConfig+0x3de>
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d6:	d204      	bcs.n	80038e2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	60da      	str	r2, [r3, #12]
 80038e0:	e0b6      	b.n	8003a50 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038e8:	e0b2      	b.n	8003a50 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f2:	d15e      	bne.n	80039b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80038f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d828      	bhi.n	800394e <UART_SetConfig+0x44a>
 80038fc:	a201      	add	r2, pc, #4	; (adr r2, 8003904 <UART_SetConfig+0x400>)
 80038fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003902:	bf00      	nop
 8003904:	08003929 	.word	0x08003929
 8003908:	08003931 	.word	0x08003931
 800390c:	08003939 	.word	0x08003939
 8003910:	0800394f 	.word	0x0800394f
 8003914:	0800393f 	.word	0x0800393f
 8003918:	0800394f 	.word	0x0800394f
 800391c:	0800394f 	.word	0x0800394f
 8003920:	0800394f 	.word	0x0800394f
 8003924:	08003947 	.word	0x08003947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003928:	f7ff f856 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 800392c:	61f8      	str	r0, [r7, #28]
        break;
 800392e:	e014      	b.n	800395a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003930:	f7ff f868 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 8003934:	61f8      	str	r0, [r7, #28]
        break;
 8003936:	e010      	b.n	800395a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003938:	4b4d      	ldr	r3, [pc, #308]	; (8003a70 <UART_SetConfig+0x56c>)
 800393a:	61fb      	str	r3, [r7, #28]
        break;
 800393c:	e00d      	b.n	800395a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800393e:	f7fe ffb3 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 8003942:	61f8      	str	r0, [r7, #28]
        break;
 8003944:	e009      	b.n	800395a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800394a:	61fb      	str	r3, [r7, #28]
        break;
 800394c:	e005      	b.n	800395a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003958:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d077      	beq.n	8003a50 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	005a      	lsls	r2, r3, #1
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	085b      	lsrs	r3, r3, #1
 800396a:	441a      	add	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	2b0f      	cmp	r3, #15
 800397a:	d916      	bls.n	80039aa <UART_SetConfig+0x4a6>
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003982:	d212      	bcs.n	80039aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	b29b      	uxth	r3, r3
 8003988:	f023 030f 	bic.w	r3, r3, #15
 800398c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	b29b      	uxth	r3, r3
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	b29a      	uxth	r2, r3
 800399a:	8afb      	ldrh	r3, [r7, #22]
 800399c:	4313      	orrs	r3, r2
 800399e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	8afa      	ldrh	r2, [r7, #22]
 80039a6:	60da      	str	r2, [r3, #12]
 80039a8:	e052      	b.n	8003a50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039b0:	e04e      	b.n	8003a50 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d827      	bhi.n	8003a0a <UART_SetConfig+0x506>
 80039ba:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <UART_SetConfig+0x4bc>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039e5 	.word	0x080039e5
 80039c4:	080039ed 	.word	0x080039ed
 80039c8:	080039f5 	.word	0x080039f5
 80039cc:	08003a0b 	.word	0x08003a0b
 80039d0:	080039fb 	.word	0x080039fb
 80039d4:	08003a0b 	.word	0x08003a0b
 80039d8:	08003a0b 	.word	0x08003a0b
 80039dc:	08003a0b 	.word	0x08003a0b
 80039e0:	08003a03 	.word	0x08003a03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039e4:	f7fe fff8 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 80039e8:	61f8      	str	r0, [r7, #28]
        break;
 80039ea:	e014      	b.n	8003a16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039ec:	f7ff f80a 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 80039f0:	61f8      	str	r0, [r7, #28]
        break;
 80039f2:	e010      	b.n	8003a16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039f4:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <UART_SetConfig+0x56c>)
 80039f6:	61fb      	str	r3, [r7, #28]
        break;
 80039f8:	e00d      	b.n	8003a16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039fa:	f7fe ff55 	bl	80028a8 <HAL_RCC_GetSysClockFreq>
 80039fe:	61f8      	str	r0, [r7, #28]
        break;
 8003a00:	e009      	b.n	8003a16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a06:	61fb      	str	r3, [r7, #28]
        break;
 8003a08:	e005      	b.n	8003a16 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a14:	bf00      	nop
    }

    if (pclk != 0U)
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d019      	beq.n	8003a50 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	085a      	lsrs	r2, r3, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	441a      	add	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b0f      	cmp	r3, #15
 8003a34:	d909      	bls.n	8003a4a <UART_SetConfig+0x546>
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a3c:	d205      	bcs.n	8003a4a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	60da      	str	r2, [r3, #12]
 8003a48:	e002      	b.n	8003a50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3728      	adds	r7, #40	; 0x28
 8003a64:	46bd      	mov	sp, r7
 8003a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40008000 	.word	0x40008000
 8003a70:	00f42400 	.word	0x00f42400

08003a74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00a      	beq.n	8003a9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00a      	beq.n	8003ac0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00a      	beq.n	8003ae2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00a      	beq.n	8003b26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01a      	beq.n	8003b8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b72:	d10a      	bne.n	8003b8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	605a      	str	r2, [r3, #4]
  }
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b098      	sub	sp, #96	; 0x60
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bc8:	f7fd fce8 	bl	800159c <HAL_GetTick>
 8003bcc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d12e      	bne.n	8003c3a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003be4:	2200      	movs	r2, #0
 8003be6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f88c 	bl	8003d08 <UART_WaitOnFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d021      	beq.n	8003c3a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c0a:	653b      	str	r3, [r7, #80]	; 0x50
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
 8003c16:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c1c:	e841 2300 	strex	r3, r2, [r1]
 8003c20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e6      	bne.n	8003bf6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e062      	b.n	8003d00 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d149      	bne.n	8003cdc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c50:	2200      	movs	r2, #0
 8003c52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 f856 	bl	8003d08 <UART_WaitOnFlagUntilTimeout>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d03c      	beq.n	8003cdc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	e853 3f00 	ldrex	r3, [r3]
 8003c6e:	623b      	str	r3, [r7, #32]
   return(result);
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c80:	633b      	str	r3, [r7, #48]	; 0x30
 8003c82:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c88:	e841 2300 	strex	r3, r2, [r1]
 8003c8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e6      	bne.n	8003c62 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3308      	adds	r3, #8
 8003c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0301 	bic.w	r3, r3, #1
 8003caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cb4:	61fa      	str	r2, [r7, #28]
 8003cb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	69b9      	ldr	r1, [r7, #24]
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e5      	bne.n	8003c94 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e011      	b.n	8003d00 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3758      	adds	r7, #88	; 0x58
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d18:	e049      	b.n	8003dae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d045      	beq.n	8003dae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d22:	f7fd fc3b 	bl	800159c <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	69ba      	ldr	r2, [r7, #24]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e048      	b.n	8003dce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d031      	beq.n	8003dae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d110      	bne.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2208      	movs	r2, #8
 8003d5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 f838 	bl	8003dd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2208      	movs	r2, #8
 8003d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e029      	b.n	8003dce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d88:	d111      	bne.n	8003dae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f81e 	bl	8003dd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e00f      	b.n	8003dce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4013      	ands	r3, r2
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	bf0c      	ite	eq
 8003dbe:	2301      	moveq	r3, #1
 8003dc0:	2300      	movne	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d0a6      	beq.n	8003d1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b095      	sub	sp, #84	; 0x54
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003df2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8003dfe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e6      	bne.n	8003dde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3308      	adds	r3, #8
 8003e16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	e853 3f00 	ldrex	r3, [r3]
 8003e1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e5      	bne.n	8003e10 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d118      	bne.n	8003e7e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	e853 3f00 	ldrex	r3, [r3]
 8003e58:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f023 0310 	bic.w	r3, r3, #16
 8003e60:	647b      	str	r3, [r7, #68]	; 0x44
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e6a:	61bb      	str	r3, [r7, #24]
 8003e6c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6e:	6979      	ldr	r1, [r7, #20]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	e841 2300 	strex	r3, r2, [r1]
 8003e76:	613b      	str	r3, [r7, #16]
   return(result);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1e6      	bne.n	8003e4c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003e92:	bf00      	nop
 8003e94:	3754      	adds	r7, #84	; 0x54
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <memset>:
 8003e9e:	4402      	add	r2, r0
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d100      	bne.n	8003ea8 <memset+0xa>
 8003ea6:	4770      	bx	lr
 8003ea8:	f803 1b01 	strb.w	r1, [r3], #1
 8003eac:	e7f9      	b.n	8003ea2 <memset+0x4>
	...

08003eb0 <__libc_init_array>:
 8003eb0:	b570      	push	{r4, r5, r6, lr}
 8003eb2:	4d0d      	ldr	r5, [pc, #52]	; (8003ee8 <__libc_init_array+0x38>)
 8003eb4:	4c0d      	ldr	r4, [pc, #52]	; (8003eec <__libc_init_array+0x3c>)
 8003eb6:	1b64      	subs	r4, r4, r5
 8003eb8:	10a4      	asrs	r4, r4, #2
 8003eba:	2600      	movs	r6, #0
 8003ebc:	42a6      	cmp	r6, r4
 8003ebe:	d109      	bne.n	8003ed4 <__libc_init_array+0x24>
 8003ec0:	4d0b      	ldr	r5, [pc, #44]	; (8003ef0 <__libc_init_array+0x40>)
 8003ec2:	4c0c      	ldr	r4, [pc, #48]	; (8003ef4 <__libc_init_array+0x44>)
 8003ec4:	f001 f858 	bl	8004f78 <_init>
 8003ec8:	1b64      	subs	r4, r4, r5
 8003eca:	10a4      	asrs	r4, r4, #2
 8003ecc:	2600      	movs	r6, #0
 8003ece:	42a6      	cmp	r6, r4
 8003ed0:	d105      	bne.n	8003ede <__libc_init_array+0x2e>
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}
 8003ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed8:	4798      	blx	r3
 8003eda:	3601      	adds	r6, #1
 8003edc:	e7ee      	b.n	8003ebc <__libc_init_array+0xc>
 8003ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ee2:	4798      	blx	r3
 8003ee4:	3601      	adds	r6, #1
 8003ee6:	e7f2      	b.n	8003ece <__libc_init_array+0x1e>
 8003ee8:	080051b8 	.word	0x080051b8
 8003eec:	080051b8 	.word	0x080051b8
 8003ef0:	080051b8 	.word	0x080051b8
 8003ef4:	080051bc 	.word	0x080051bc

08003ef8 <sin>:
 8003ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003efa:	ec53 2b10 	vmov	r2, r3, d0
 8003efe:	4828      	ldr	r0, [pc, #160]	; (8003fa0 <sin+0xa8>)
 8003f00:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003f04:	4281      	cmp	r1, r0
 8003f06:	dc07      	bgt.n	8003f18 <sin+0x20>
 8003f08:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003f98 <sin+0xa0>
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	b005      	add	sp, #20
 8003f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f14:	f000 b910 	b.w	8004138 <__kernel_sin>
 8003f18:	4822      	ldr	r0, [pc, #136]	; (8003fa4 <sin+0xac>)
 8003f1a:	4281      	cmp	r1, r0
 8003f1c:	dd09      	ble.n	8003f32 <sin+0x3a>
 8003f1e:	ee10 0a10 	vmov	r0, s0
 8003f22:	4619      	mov	r1, r3
 8003f24:	f7fc f954 	bl	80001d0 <__aeabi_dsub>
 8003f28:	ec41 0b10 	vmov	d0, r0, r1
 8003f2c:	b005      	add	sp, #20
 8003f2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f32:	4668      	mov	r0, sp
 8003f34:	f000 f9c0 	bl	80042b8 <__ieee754_rem_pio2>
 8003f38:	f000 0003 	and.w	r0, r0, #3
 8003f3c:	2801      	cmp	r0, #1
 8003f3e:	d00c      	beq.n	8003f5a <sin+0x62>
 8003f40:	2802      	cmp	r0, #2
 8003f42:	d011      	beq.n	8003f68 <sin+0x70>
 8003f44:	b9f0      	cbnz	r0, 8003f84 <sin+0x8c>
 8003f46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f4a:	ed9d 0b00 	vldr	d0, [sp]
 8003f4e:	2001      	movs	r0, #1
 8003f50:	f000 f8f2 	bl	8004138 <__kernel_sin>
 8003f54:	ec51 0b10 	vmov	r0, r1, d0
 8003f58:	e7e6      	b.n	8003f28 <sin+0x30>
 8003f5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f5e:	ed9d 0b00 	vldr	d0, [sp]
 8003f62:	f000 f821 	bl	8003fa8 <__kernel_cos>
 8003f66:	e7f5      	b.n	8003f54 <sin+0x5c>
 8003f68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f6c:	ed9d 0b00 	vldr	d0, [sp]
 8003f70:	2001      	movs	r0, #1
 8003f72:	f000 f8e1 	bl	8004138 <__kernel_sin>
 8003f76:	ec53 2b10 	vmov	r2, r3, d0
 8003f7a:	ee10 0a10 	vmov	r0, s0
 8003f7e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003f82:	e7d1      	b.n	8003f28 <sin+0x30>
 8003f84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003f88:	ed9d 0b00 	vldr	d0, [sp]
 8003f8c:	f000 f80c 	bl	8003fa8 <__kernel_cos>
 8003f90:	e7f1      	b.n	8003f76 <sin+0x7e>
 8003f92:	bf00      	nop
 8003f94:	f3af 8000 	nop.w
	...
 8003fa0:	3fe921fb 	.word	0x3fe921fb
 8003fa4:	7fefffff 	.word	0x7fefffff

08003fa8 <__kernel_cos>:
 8003fa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fac:	ec57 6b10 	vmov	r6, r7, d0
 8003fb0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003fb4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003fb8:	ed8d 1b00 	vstr	d1, [sp]
 8003fbc:	da07      	bge.n	8003fce <__kernel_cos+0x26>
 8003fbe:	ee10 0a10 	vmov	r0, s0
 8003fc2:	4639      	mov	r1, r7
 8003fc4:	f7fc fd56 	bl	8000a74 <__aeabi_d2iz>
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	f000 8088 	beq.w	80040de <__kernel_cos+0x136>
 8003fce:	4632      	mov	r2, r6
 8003fd0:	463b      	mov	r3, r7
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	4639      	mov	r1, r7
 8003fd6:	f7fc fab3 	bl	8000540 <__aeabi_dmul>
 8003fda:	4b51      	ldr	r3, [pc, #324]	; (8004120 <__kernel_cos+0x178>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	4604      	mov	r4, r0
 8003fe0:	460d      	mov	r5, r1
 8003fe2:	f7fc faad 	bl	8000540 <__aeabi_dmul>
 8003fe6:	a340      	add	r3, pc, #256	; (adr r3, 80040e8 <__kernel_cos+0x140>)
 8003fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fec:	4682      	mov	sl, r0
 8003fee:	468b      	mov	fp, r1
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	f7fc faa4 	bl	8000540 <__aeabi_dmul>
 8003ff8:	a33d      	add	r3, pc, #244	; (adr r3, 80040f0 <__kernel_cos+0x148>)
 8003ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffe:	f7fc f8e9 	bl	80001d4 <__adddf3>
 8004002:	4622      	mov	r2, r4
 8004004:	462b      	mov	r3, r5
 8004006:	f7fc fa9b 	bl	8000540 <__aeabi_dmul>
 800400a:	a33b      	add	r3, pc, #236	; (adr r3, 80040f8 <__kernel_cos+0x150>)
 800400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004010:	f7fc f8de 	bl	80001d0 <__aeabi_dsub>
 8004014:	4622      	mov	r2, r4
 8004016:	462b      	mov	r3, r5
 8004018:	f7fc fa92 	bl	8000540 <__aeabi_dmul>
 800401c:	a338      	add	r3, pc, #224	; (adr r3, 8004100 <__kernel_cos+0x158>)
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f7fc f8d7 	bl	80001d4 <__adddf3>
 8004026:	4622      	mov	r2, r4
 8004028:	462b      	mov	r3, r5
 800402a:	f7fc fa89 	bl	8000540 <__aeabi_dmul>
 800402e:	a336      	add	r3, pc, #216	; (adr r3, 8004108 <__kernel_cos+0x160>)
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f7fc f8cc 	bl	80001d0 <__aeabi_dsub>
 8004038:	4622      	mov	r2, r4
 800403a:	462b      	mov	r3, r5
 800403c:	f7fc fa80 	bl	8000540 <__aeabi_dmul>
 8004040:	a333      	add	r3, pc, #204	; (adr r3, 8004110 <__kernel_cos+0x168>)
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f7fc f8c5 	bl	80001d4 <__adddf3>
 800404a:	4622      	mov	r2, r4
 800404c:	462b      	mov	r3, r5
 800404e:	f7fc fa77 	bl	8000540 <__aeabi_dmul>
 8004052:	4622      	mov	r2, r4
 8004054:	462b      	mov	r3, r5
 8004056:	f7fc fa73 	bl	8000540 <__aeabi_dmul>
 800405a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800405e:	4604      	mov	r4, r0
 8004060:	460d      	mov	r5, r1
 8004062:	4630      	mov	r0, r6
 8004064:	4639      	mov	r1, r7
 8004066:	f7fc fa6b 	bl	8000540 <__aeabi_dmul>
 800406a:	460b      	mov	r3, r1
 800406c:	4602      	mov	r2, r0
 800406e:	4629      	mov	r1, r5
 8004070:	4620      	mov	r0, r4
 8004072:	f7fc f8ad 	bl	80001d0 <__aeabi_dsub>
 8004076:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <__kernel_cos+0x17c>)
 8004078:	4598      	cmp	r8, r3
 800407a:	4606      	mov	r6, r0
 800407c:	460f      	mov	r7, r1
 800407e:	dc10      	bgt.n	80040a2 <__kernel_cos+0xfa>
 8004080:	4602      	mov	r2, r0
 8004082:	460b      	mov	r3, r1
 8004084:	4650      	mov	r0, sl
 8004086:	4659      	mov	r1, fp
 8004088:	f7fc f8a2 	bl	80001d0 <__aeabi_dsub>
 800408c:	460b      	mov	r3, r1
 800408e:	4926      	ldr	r1, [pc, #152]	; (8004128 <__kernel_cos+0x180>)
 8004090:	4602      	mov	r2, r0
 8004092:	2000      	movs	r0, #0
 8004094:	f7fc f89c 	bl	80001d0 <__aeabi_dsub>
 8004098:	ec41 0b10 	vmov	d0, r0, r1
 800409c:	b003      	add	sp, #12
 800409e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a2:	4b22      	ldr	r3, [pc, #136]	; (800412c <__kernel_cos+0x184>)
 80040a4:	4920      	ldr	r1, [pc, #128]	; (8004128 <__kernel_cos+0x180>)
 80040a6:	4598      	cmp	r8, r3
 80040a8:	bfcc      	ite	gt
 80040aa:	4d21      	ldrgt	r5, [pc, #132]	; (8004130 <__kernel_cos+0x188>)
 80040ac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80040b0:	2400      	movs	r4, #0
 80040b2:	4622      	mov	r2, r4
 80040b4:	462b      	mov	r3, r5
 80040b6:	2000      	movs	r0, #0
 80040b8:	f7fc f88a 	bl	80001d0 <__aeabi_dsub>
 80040bc:	4622      	mov	r2, r4
 80040be:	4680      	mov	r8, r0
 80040c0:	4689      	mov	r9, r1
 80040c2:	462b      	mov	r3, r5
 80040c4:	4650      	mov	r0, sl
 80040c6:	4659      	mov	r1, fp
 80040c8:	f7fc f882 	bl	80001d0 <__aeabi_dsub>
 80040cc:	4632      	mov	r2, r6
 80040ce:	463b      	mov	r3, r7
 80040d0:	f7fc f87e 	bl	80001d0 <__aeabi_dsub>
 80040d4:	4602      	mov	r2, r0
 80040d6:	460b      	mov	r3, r1
 80040d8:	4640      	mov	r0, r8
 80040da:	4649      	mov	r1, r9
 80040dc:	e7da      	b.n	8004094 <__kernel_cos+0xec>
 80040de:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004118 <__kernel_cos+0x170>
 80040e2:	e7db      	b.n	800409c <__kernel_cos+0xf4>
 80040e4:	f3af 8000 	nop.w
 80040e8:	be8838d4 	.word	0xbe8838d4
 80040ec:	bda8fae9 	.word	0xbda8fae9
 80040f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80040f4:	3e21ee9e 	.word	0x3e21ee9e
 80040f8:	809c52ad 	.word	0x809c52ad
 80040fc:	3e927e4f 	.word	0x3e927e4f
 8004100:	19cb1590 	.word	0x19cb1590
 8004104:	3efa01a0 	.word	0x3efa01a0
 8004108:	16c15177 	.word	0x16c15177
 800410c:	3f56c16c 	.word	0x3f56c16c
 8004110:	5555554c 	.word	0x5555554c
 8004114:	3fa55555 	.word	0x3fa55555
 8004118:	00000000 	.word	0x00000000
 800411c:	3ff00000 	.word	0x3ff00000
 8004120:	3fe00000 	.word	0x3fe00000
 8004124:	3fd33332 	.word	0x3fd33332
 8004128:	3ff00000 	.word	0x3ff00000
 800412c:	3fe90000 	.word	0x3fe90000
 8004130:	3fd20000 	.word	0x3fd20000
 8004134:	00000000 	.word	0x00000000

08004138 <__kernel_sin>:
 8004138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413c:	ed2d 8b04 	vpush	{d8-d9}
 8004140:	eeb0 8a41 	vmov.f32	s16, s2
 8004144:	eef0 8a61 	vmov.f32	s17, s3
 8004148:	ec55 4b10 	vmov	r4, r5, d0
 800414c:	b083      	sub	sp, #12
 800414e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004152:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004156:	9001      	str	r0, [sp, #4]
 8004158:	da06      	bge.n	8004168 <__kernel_sin+0x30>
 800415a:	ee10 0a10 	vmov	r0, s0
 800415e:	4629      	mov	r1, r5
 8004160:	f7fc fc88 	bl	8000a74 <__aeabi_d2iz>
 8004164:	2800      	cmp	r0, #0
 8004166:	d051      	beq.n	800420c <__kernel_sin+0xd4>
 8004168:	4622      	mov	r2, r4
 800416a:	462b      	mov	r3, r5
 800416c:	4620      	mov	r0, r4
 800416e:	4629      	mov	r1, r5
 8004170:	f7fc f9e6 	bl	8000540 <__aeabi_dmul>
 8004174:	4682      	mov	sl, r0
 8004176:	468b      	mov	fp, r1
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4620      	mov	r0, r4
 800417e:	4629      	mov	r1, r5
 8004180:	f7fc f9de 	bl	8000540 <__aeabi_dmul>
 8004184:	a341      	add	r3, pc, #260	; (adr r3, 800428c <__kernel_sin+0x154>)
 8004186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418a:	4680      	mov	r8, r0
 800418c:	4689      	mov	r9, r1
 800418e:	4650      	mov	r0, sl
 8004190:	4659      	mov	r1, fp
 8004192:	f7fc f9d5 	bl	8000540 <__aeabi_dmul>
 8004196:	a33f      	add	r3, pc, #252	; (adr r3, 8004294 <__kernel_sin+0x15c>)
 8004198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419c:	f7fc f818 	bl	80001d0 <__aeabi_dsub>
 80041a0:	4652      	mov	r2, sl
 80041a2:	465b      	mov	r3, fp
 80041a4:	f7fc f9cc 	bl	8000540 <__aeabi_dmul>
 80041a8:	a33c      	add	r3, pc, #240	; (adr r3, 800429c <__kernel_sin+0x164>)
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	f7fc f811 	bl	80001d4 <__adddf3>
 80041b2:	4652      	mov	r2, sl
 80041b4:	465b      	mov	r3, fp
 80041b6:	f7fc f9c3 	bl	8000540 <__aeabi_dmul>
 80041ba:	a33a      	add	r3, pc, #232	; (adr r3, 80042a4 <__kernel_sin+0x16c>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f7fc f806 	bl	80001d0 <__aeabi_dsub>
 80041c4:	4652      	mov	r2, sl
 80041c6:	465b      	mov	r3, fp
 80041c8:	f7fc f9ba 	bl	8000540 <__aeabi_dmul>
 80041cc:	a337      	add	r3, pc, #220	; (adr r3, 80042ac <__kernel_sin+0x174>)
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f7fb ffff 	bl	80001d4 <__adddf3>
 80041d6:	9b01      	ldr	r3, [sp, #4]
 80041d8:	4606      	mov	r6, r0
 80041da:	460f      	mov	r7, r1
 80041dc:	b9eb      	cbnz	r3, 800421a <__kernel_sin+0xe2>
 80041de:	4602      	mov	r2, r0
 80041e0:	460b      	mov	r3, r1
 80041e2:	4650      	mov	r0, sl
 80041e4:	4659      	mov	r1, fp
 80041e6:	f7fc f9ab 	bl	8000540 <__aeabi_dmul>
 80041ea:	a325      	add	r3, pc, #148	; (adr r3, 8004280 <__kernel_sin+0x148>)
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f7fb ffee 	bl	80001d0 <__aeabi_dsub>
 80041f4:	4642      	mov	r2, r8
 80041f6:	464b      	mov	r3, r9
 80041f8:	f7fc f9a2 	bl	8000540 <__aeabi_dmul>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4620      	mov	r0, r4
 8004202:	4629      	mov	r1, r5
 8004204:	f7fb ffe6 	bl	80001d4 <__adddf3>
 8004208:	4604      	mov	r4, r0
 800420a:	460d      	mov	r5, r1
 800420c:	ec45 4b10 	vmov	d0, r4, r5
 8004210:	b003      	add	sp, #12
 8004212:	ecbd 8b04 	vpop	{d8-d9}
 8004216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800421a:	4b1b      	ldr	r3, [pc, #108]	; (8004288 <__kernel_sin+0x150>)
 800421c:	ec51 0b18 	vmov	r0, r1, d8
 8004220:	2200      	movs	r2, #0
 8004222:	f7fc f98d 	bl	8000540 <__aeabi_dmul>
 8004226:	4632      	mov	r2, r6
 8004228:	ec41 0b19 	vmov	d9, r0, r1
 800422c:	463b      	mov	r3, r7
 800422e:	4640      	mov	r0, r8
 8004230:	4649      	mov	r1, r9
 8004232:	f7fc f985 	bl	8000540 <__aeabi_dmul>
 8004236:	4602      	mov	r2, r0
 8004238:	460b      	mov	r3, r1
 800423a:	ec51 0b19 	vmov	r0, r1, d9
 800423e:	f7fb ffc7 	bl	80001d0 <__aeabi_dsub>
 8004242:	4652      	mov	r2, sl
 8004244:	465b      	mov	r3, fp
 8004246:	f7fc f97b 	bl	8000540 <__aeabi_dmul>
 800424a:	ec53 2b18 	vmov	r2, r3, d8
 800424e:	f7fb ffbf 	bl	80001d0 <__aeabi_dsub>
 8004252:	a30b      	add	r3, pc, #44	; (adr r3, 8004280 <__kernel_sin+0x148>)
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	4606      	mov	r6, r0
 800425a:	460f      	mov	r7, r1
 800425c:	4640      	mov	r0, r8
 800425e:	4649      	mov	r1, r9
 8004260:	f7fc f96e 	bl	8000540 <__aeabi_dmul>
 8004264:	4602      	mov	r2, r0
 8004266:	460b      	mov	r3, r1
 8004268:	4630      	mov	r0, r6
 800426a:	4639      	mov	r1, r7
 800426c:	f7fb ffb2 	bl	80001d4 <__adddf3>
 8004270:	4602      	mov	r2, r0
 8004272:	460b      	mov	r3, r1
 8004274:	4620      	mov	r0, r4
 8004276:	4629      	mov	r1, r5
 8004278:	f7fb ffaa 	bl	80001d0 <__aeabi_dsub>
 800427c:	e7c4      	b.n	8004208 <__kernel_sin+0xd0>
 800427e:	bf00      	nop
 8004280:	55555549 	.word	0x55555549
 8004284:	3fc55555 	.word	0x3fc55555
 8004288:	3fe00000 	.word	0x3fe00000
 800428c:	5acfd57c 	.word	0x5acfd57c
 8004290:	3de5d93a 	.word	0x3de5d93a
 8004294:	8a2b9ceb 	.word	0x8a2b9ceb
 8004298:	3e5ae5e6 	.word	0x3e5ae5e6
 800429c:	57b1fe7d 	.word	0x57b1fe7d
 80042a0:	3ec71de3 	.word	0x3ec71de3
 80042a4:	19c161d5 	.word	0x19c161d5
 80042a8:	3f2a01a0 	.word	0x3f2a01a0
 80042ac:	1110f8a6 	.word	0x1110f8a6
 80042b0:	3f811111 	.word	0x3f811111
 80042b4:	00000000 	.word	0x00000000

080042b8 <__ieee754_rem_pio2>:
 80042b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042bc:	ed2d 8b02 	vpush	{d8}
 80042c0:	ec55 4b10 	vmov	r4, r5, d0
 80042c4:	4bca      	ldr	r3, [pc, #808]	; (80045f0 <__ieee754_rem_pio2+0x338>)
 80042c6:	b08b      	sub	sp, #44	; 0x2c
 80042c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80042cc:	4598      	cmp	r8, r3
 80042ce:	4682      	mov	sl, r0
 80042d0:	9502      	str	r5, [sp, #8]
 80042d2:	dc08      	bgt.n	80042e6 <__ieee754_rem_pio2+0x2e>
 80042d4:	2200      	movs	r2, #0
 80042d6:	2300      	movs	r3, #0
 80042d8:	ed80 0b00 	vstr	d0, [r0]
 80042dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80042e0:	f04f 0b00 	mov.w	fp, #0
 80042e4:	e028      	b.n	8004338 <__ieee754_rem_pio2+0x80>
 80042e6:	4bc3      	ldr	r3, [pc, #780]	; (80045f4 <__ieee754_rem_pio2+0x33c>)
 80042e8:	4598      	cmp	r8, r3
 80042ea:	dc78      	bgt.n	80043de <__ieee754_rem_pio2+0x126>
 80042ec:	9b02      	ldr	r3, [sp, #8]
 80042ee:	4ec2      	ldr	r6, [pc, #776]	; (80045f8 <__ieee754_rem_pio2+0x340>)
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	ee10 0a10 	vmov	r0, s0
 80042f6:	a3b0      	add	r3, pc, #704	; (adr r3, 80045b8 <__ieee754_rem_pio2+0x300>)
 80042f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fc:	4629      	mov	r1, r5
 80042fe:	dd39      	ble.n	8004374 <__ieee754_rem_pio2+0xbc>
 8004300:	f7fb ff66 	bl	80001d0 <__aeabi_dsub>
 8004304:	45b0      	cmp	r8, r6
 8004306:	4604      	mov	r4, r0
 8004308:	460d      	mov	r5, r1
 800430a:	d01b      	beq.n	8004344 <__ieee754_rem_pio2+0x8c>
 800430c:	a3ac      	add	r3, pc, #688	; (adr r3, 80045c0 <__ieee754_rem_pio2+0x308>)
 800430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004312:	f7fb ff5d 	bl	80001d0 <__aeabi_dsub>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	e9ca 2300 	strd	r2, r3, [sl]
 800431e:	4620      	mov	r0, r4
 8004320:	4629      	mov	r1, r5
 8004322:	f7fb ff55 	bl	80001d0 <__aeabi_dsub>
 8004326:	a3a6      	add	r3, pc, #664	; (adr r3, 80045c0 <__ieee754_rem_pio2+0x308>)
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f7fb ff50 	bl	80001d0 <__aeabi_dsub>
 8004330:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004334:	f04f 0b01 	mov.w	fp, #1
 8004338:	4658      	mov	r0, fp
 800433a:	b00b      	add	sp, #44	; 0x2c
 800433c:	ecbd 8b02 	vpop	{d8}
 8004340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004344:	a3a0      	add	r3, pc, #640	; (adr r3, 80045c8 <__ieee754_rem_pio2+0x310>)
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	f7fb ff41 	bl	80001d0 <__aeabi_dsub>
 800434e:	a3a0      	add	r3, pc, #640	; (adr r3, 80045d0 <__ieee754_rem_pio2+0x318>)
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	4604      	mov	r4, r0
 8004356:	460d      	mov	r5, r1
 8004358:	f7fb ff3a 	bl	80001d0 <__aeabi_dsub>
 800435c:	4602      	mov	r2, r0
 800435e:	460b      	mov	r3, r1
 8004360:	e9ca 2300 	strd	r2, r3, [sl]
 8004364:	4620      	mov	r0, r4
 8004366:	4629      	mov	r1, r5
 8004368:	f7fb ff32 	bl	80001d0 <__aeabi_dsub>
 800436c:	a398      	add	r3, pc, #608	; (adr r3, 80045d0 <__ieee754_rem_pio2+0x318>)
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	e7db      	b.n	800432c <__ieee754_rem_pio2+0x74>
 8004374:	f7fb ff2e 	bl	80001d4 <__adddf3>
 8004378:	45b0      	cmp	r8, r6
 800437a:	4604      	mov	r4, r0
 800437c:	460d      	mov	r5, r1
 800437e:	d016      	beq.n	80043ae <__ieee754_rem_pio2+0xf6>
 8004380:	a38f      	add	r3, pc, #572	; (adr r3, 80045c0 <__ieee754_rem_pio2+0x308>)
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	f7fb ff25 	bl	80001d4 <__adddf3>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	e9ca 2300 	strd	r2, r3, [sl]
 8004392:	4620      	mov	r0, r4
 8004394:	4629      	mov	r1, r5
 8004396:	f7fb ff1b 	bl	80001d0 <__aeabi_dsub>
 800439a:	a389      	add	r3, pc, #548	; (adr r3, 80045c0 <__ieee754_rem_pio2+0x308>)
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f7fb ff18 	bl	80001d4 <__adddf3>
 80043a4:	f04f 3bff 	mov.w	fp, #4294967295
 80043a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80043ac:	e7c4      	b.n	8004338 <__ieee754_rem_pio2+0x80>
 80043ae:	a386      	add	r3, pc, #536	; (adr r3, 80045c8 <__ieee754_rem_pio2+0x310>)
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f7fb ff0e 	bl	80001d4 <__adddf3>
 80043b8:	a385      	add	r3, pc, #532	; (adr r3, 80045d0 <__ieee754_rem_pio2+0x318>)
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	4604      	mov	r4, r0
 80043c0:	460d      	mov	r5, r1
 80043c2:	f7fb ff07 	bl	80001d4 <__adddf3>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	e9ca 2300 	strd	r2, r3, [sl]
 80043ce:	4620      	mov	r0, r4
 80043d0:	4629      	mov	r1, r5
 80043d2:	f7fb fefd 	bl	80001d0 <__aeabi_dsub>
 80043d6:	a37e      	add	r3, pc, #504	; (adr r3, 80045d0 <__ieee754_rem_pio2+0x318>)
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	e7e0      	b.n	80043a0 <__ieee754_rem_pio2+0xe8>
 80043de:	4b87      	ldr	r3, [pc, #540]	; (80045fc <__ieee754_rem_pio2+0x344>)
 80043e0:	4598      	cmp	r8, r3
 80043e2:	f300 80d8 	bgt.w	8004596 <__ieee754_rem_pio2+0x2de>
 80043e6:	f000 f96d 	bl	80046c4 <fabs>
 80043ea:	ec55 4b10 	vmov	r4, r5, d0
 80043ee:	ee10 0a10 	vmov	r0, s0
 80043f2:	a379      	add	r3, pc, #484	; (adr r3, 80045d8 <__ieee754_rem_pio2+0x320>)
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	4629      	mov	r1, r5
 80043fa:	f7fc f8a1 	bl	8000540 <__aeabi_dmul>
 80043fe:	4b80      	ldr	r3, [pc, #512]	; (8004600 <__ieee754_rem_pio2+0x348>)
 8004400:	2200      	movs	r2, #0
 8004402:	f7fb fee7 	bl	80001d4 <__adddf3>
 8004406:	f7fc fb35 	bl	8000a74 <__aeabi_d2iz>
 800440a:	4683      	mov	fp, r0
 800440c:	f7fc f82e 	bl	800046c <__aeabi_i2d>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	ec43 2b18 	vmov	d8, r2, r3
 8004418:	a367      	add	r3, pc, #412	; (adr r3, 80045b8 <__ieee754_rem_pio2+0x300>)
 800441a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441e:	f7fc f88f 	bl	8000540 <__aeabi_dmul>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4620      	mov	r0, r4
 8004428:	4629      	mov	r1, r5
 800442a:	f7fb fed1 	bl	80001d0 <__aeabi_dsub>
 800442e:	a364      	add	r3, pc, #400	; (adr r3, 80045c0 <__ieee754_rem_pio2+0x308>)
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	4606      	mov	r6, r0
 8004436:	460f      	mov	r7, r1
 8004438:	ec51 0b18 	vmov	r0, r1, d8
 800443c:	f7fc f880 	bl	8000540 <__aeabi_dmul>
 8004440:	f1bb 0f1f 	cmp.w	fp, #31
 8004444:	4604      	mov	r4, r0
 8004446:	460d      	mov	r5, r1
 8004448:	dc0d      	bgt.n	8004466 <__ieee754_rem_pio2+0x1ae>
 800444a:	4b6e      	ldr	r3, [pc, #440]	; (8004604 <__ieee754_rem_pio2+0x34c>)
 800444c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004454:	4543      	cmp	r3, r8
 8004456:	d006      	beq.n	8004466 <__ieee754_rem_pio2+0x1ae>
 8004458:	4622      	mov	r2, r4
 800445a:	462b      	mov	r3, r5
 800445c:	4630      	mov	r0, r6
 800445e:	4639      	mov	r1, r7
 8004460:	f7fb feb6 	bl	80001d0 <__aeabi_dsub>
 8004464:	e00e      	b.n	8004484 <__ieee754_rem_pio2+0x1cc>
 8004466:	462b      	mov	r3, r5
 8004468:	4622      	mov	r2, r4
 800446a:	4630      	mov	r0, r6
 800446c:	4639      	mov	r1, r7
 800446e:	f7fb feaf 	bl	80001d0 <__aeabi_dsub>
 8004472:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004476:	9303      	str	r3, [sp, #12]
 8004478:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800447c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004480:	2b10      	cmp	r3, #16
 8004482:	dc02      	bgt.n	800448a <__ieee754_rem_pio2+0x1d2>
 8004484:	e9ca 0100 	strd	r0, r1, [sl]
 8004488:	e039      	b.n	80044fe <__ieee754_rem_pio2+0x246>
 800448a:	a34f      	add	r3, pc, #316	; (adr r3, 80045c8 <__ieee754_rem_pio2+0x310>)
 800448c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004490:	ec51 0b18 	vmov	r0, r1, d8
 8004494:	f7fc f854 	bl	8000540 <__aeabi_dmul>
 8004498:	4604      	mov	r4, r0
 800449a:	460d      	mov	r5, r1
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4630      	mov	r0, r6
 80044a2:	4639      	mov	r1, r7
 80044a4:	f7fb fe94 	bl	80001d0 <__aeabi_dsub>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4680      	mov	r8, r0
 80044ae:	4689      	mov	r9, r1
 80044b0:	4630      	mov	r0, r6
 80044b2:	4639      	mov	r1, r7
 80044b4:	f7fb fe8c 	bl	80001d0 <__aeabi_dsub>
 80044b8:	4622      	mov	r2, r4
 80044ba:	462b      	mov	r3, r5
 80044bc:	f7fb fe88 	bl	80001d0 <__aeabi_dsub>
 80044c0:	a343      	add	r3, pc, #268	; (adr r3, 80045d0 <__ieee754_rem_pio2+0x318>)
 80044c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c6:	4604      	mov	r4, r0
 80044c8:	460d      	mov	r5, r1
 80044ca:	ec51 0b18 	vmov	r0, r1, d8
 80044ce:	f7fc f837 	bl	8000540 <__aeabi_dmul>
 80044d2:	4622      	mov	r2, r4
 80044d4:	462b      	mov	r3, r5
 80044d6:	f7fb fe7b 	bl	80001d0 <__aeabi_dsub>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4604      	mov	r4, r0
 80044e0:	460d      	mov	r5, r1
 80044e2:	4640      	mov	r0, r8
 80044e4:	4649      	mov	r1, r9
 80044e6:	f7fb fe73 	bl	80001d0 <__aeabi_dsub>
 80044ea:	9a03      	ldr	r2, [sp, #12]
 80044ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b31      	cmp	r3, #49	; 0x31
 80044f4:	dc24      	bgt.n	8004540 <__ieee754_rem_pio2+0x288>
 80044f6:	e9ca 0100 	strd	r0, r1, [sl]
 80044fa:	4646      	mov	r6, r8
 80044fc:	464f      	mov	r7, r9
 80044fe:	e9da 8900 	ldrd	r8, r9, [sl]
 8004502:	4630      	mov	r0, r6
 8004504:	4642      	mov	r2, r8
 8004506:	464b      	mov	r3, r9
 8004508:	4639      	mov	r1, r7
 800450a:	f7fb fe61 	bl	80001d0 <__aeabi_dsub>
 800450e:	462b      	mov	r3, r5
 8004510:	4622      	mov	r2, r4
 8004512:	f7fb fe5d 	bl	80001d0 <__aeabi_dsub>
 8004516:	9b02      	ldr	r3, [sp, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800451e:	f6bf af0b 	bge.w	8004338 <__ieee754_rem_pio2+0x80>
 8004522:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004526:	f8ca 3004 	str.w	r3, [sl, #4]
 800452a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800452e:	f8ca 8000 	str.w	r8, [sl]
 8004532:	f8ca 0008 	str.w	r0, [sl, #8]
 8004536:	f8ca 300c 	str.w	r3, [sl, #12]
 800453a:	f1cb 0b00 	rsb	fp, fp, #0
 800453e:	e6fb      	b.n	8004338 <__ieee754_rem_pio2+0x80>
 8004540:	a327      	add	r3, pc, #156	; (adr r3, 80045e0 <__ieee754_rem_pio2+0x328>)
 8004542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004546:	ec51 0b18 	vmov	r0, r1, d8
 800454a:	f7fb fff9 	bl	8000540 <__aeabi_dmul>
 800454e:	4604      	mov	r4, r0
 8004550:	460d      	mov	r5, r1
 8004552:	4602      	mov	r2, r0
 8004554:	460b      	mov	r3, r1
 8004556:	4640      	mov	r0, r8
 8004558:	4649      	mov	r1, r9
 800455a:	f7fb fe39 	bl	80001d0 <__aeabi_dsub>
 800455e:	4602      	mov	r2, r0
 8004560:	460b      	mov	r3, r1
 8004562:	4606      	mov	r6, r0
 8004564:	460f      	mov	r7, r1
 8004566:	4640      	mov	r0, r8
 8004568:	4649      	mov	r1, r9
 800456a:	f7fb fe31 	bl	80001d0 <__aeabi_dsub>
 800456e:	4622      	mov	r2, r4
 8004570:	462b      	mov	r3, r5
 8004572:	f7fb fe2d 	bl	80001d0 <__aeabi_dsub>
 8004576:	a31c      	add	r3, pc, #112	; (adr r3, 80045e8 <__ieee754_rem_pio2+0x330>)
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	4604      	mov	r4, r0
 800457e:	460d      	mov	r5, r1
 8004580:	ec51 0b18 	vmov	r0, r1, d8
 8004584:	f7fb ffdc 	bl	8000540 <__aeabi_dmul>
 8004588:	4622      	mov	r2, r4
 800458a:	462b      	mov	r3, r5
 800458c:	f7fb fe20 	bl	80001d0 <__aeabi_dsub>
 8004590:	4604      	mov	r4, r0
 8004592:	460d      	mov	r5, r1
 8004594:	e760      	b.n	8004458 <__ieee754_rem_pio2+0x1a0>
 8004596:	4b1c      	ldr	r3, [pc, #112]	; (8004608 <__ieee754_rem_pio2+0x350>)
 8004598:	4598      	cmp	r8, r3
 800459a:	dd37      	ble.n	800460c <__ieee754_rem_pio2+0x354>
 800459c:	ee10 2a10 	vmov	r2, s0
 80045a0:	462b      	mov	r3, r5
 80045a2:	4620      	mov	r0, r4
 80045a4:	4629      	mov	r1, r5
 80045a6:	f7fb fe13 	bl	80001d0 <__aeabi_dsub>
 80045aa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80045ae:	e9ca 0100 	strd	r0, r1, [sl]
 80045b2:	e695      	b.n	80042e0 <__ieee754_rem_pio2+0x28>
 80045b4:	f3af 8000 	nop.w
 80045b8:	54400000 	.word	0x54400000
 80045bc:	3ff921fb 	.word	0x3ff921fb
 80045c0:	1a626331 	.word	0x1a626331
 80045c4:	3dd0b461 	.word	0x3dd0b461
 80045c8:	1a600000 	.word	0x1a600000
 80045cc:	3dd0b461 	.word	0x3dd0b461
 80045d0:	2e037073 	.word	0x2e037073
 80045d4:	3ba3198a 	.word	0x3ba3198a
 80045d8:	6dc9c883 	.word	0x6dc9c883
 80045dc:	3fe45f30 	.word	0x3fe45f30
 80045e0:	2e000000 	.word	0x2e000000
 80045e4:	3ba3198a 	.word	0x3ba3198a
 80045e8:	252049c1 	.word	0x252049c1
 80045ec:	397b839a 	.word	0x397b839a
 80045f0:	3fe921fb 	.word	0x3fe921fb
 80045f4:	4002d97b 	.word	0x4002d97b
 80045f8:	3ff921fb 	.word	0x3ff921fb
 80045fc:	413921fb 	.word	0x413921fb
 8004600:	3fe00000 	.word	0x3fe00000
 8004604:	08004fd8 	.word	0x08004fd8
 8004608:	7fefffff 	.word	0x7fefffff
 800460c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8004610:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8004614:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8004618:	4620      	mov	r0, r4
 800461a:	460d      	mov	r5, r1
 800461c:	f7fc fa2a 	bl	8000a74 <__aeabi_d2iz>
 8004620:	f7fb ff24 	bl	800046c <__aeabi_i2d>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4620      	mov	r0, r4
 800462a:	4629      	mov	r1, r5
 800462c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004630:	f7fb fdce 	bl	80001d0 <__aeabi_dsub>
 8004634:	4b21      	ldr	r3, [pc, #132]	; (80046bc <__ieee754_rem_pio2+0x404>)
 8004636:	2200      	movs	r2, #0
 8004638:	f7fb ff82 	bl	8000540 <__aeabi_dmul>
 800463c:	460d      	mov	r5, r1
 800463e:	4604      	mov	r4, r0
 8004640:	f7fc fa18 	bl	8000a74 <__aeabi_d2iz>
 8004644:	f7fb ff12 	bl	800046c <__aeabi_i2d>
 8004648:	4602      	mov	r2, r0
 800464a:	460b      	mov	r3, r1
 800464c:	4620      	mov	r0, r4
 800464e:	4629      	mov	r1, r5
 8004650:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004654:	f7fb fdbc 	bl	80001d0 <__aeabi_dsub>
 8004658:	4b18      	ldr	r3, [pc, #96]	; (80046bc <__ieee754_rem_pio2+0x404>)
 800465a:	2200      	movs	r2, #0
 800465c:	f7fb ff70 	bl	8000540 <__aeabi_dmul>
 8004660:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004664:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8004668:	2703      	movs	r7, #3
 800466a:	2400      	movs	r4, #0
 800466c:	2500      	movs	r5, #0
 800466e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8004672:	4622      	mov	r2, r4
 8004674:	462b      	mov	r3, r5
 8004676:	46b9      	mov	r9, r7
 8004678:	3f01      	subs	r7, #1
 800467a:	f7fc f9c9 	bl	8000a10 <__aeabi_dcmpeq>
 800467e:	2800      	cmp	r0, #0
 8004680:	d1f5      	bne.n	800466e <__ieee754_rem_pio2+0x3b6>
 8004682:	4b0f      	ldr	r3, [pc, #60]	; (80046c0 <__ieee754_rem_pio2+0x408>)
 8004684:	9301      	str	r3, [sp, #4]
 8004686:	2302      	movs	r3, #2
 8004688:	9300      	str	r3, [sp, #0]
 800468a:	4632      	mov	r2, r6
 800468c:	464b      	mov	r3, r9
 800468e:	4651      	mov	r1, sl
 8004690:	a804      	add	r0, sp, #16
 8004692:	f000 f821 	bl	80046d8 <__kernel_rem_pio2>
 8004696:	9b02      	ldr	r3, [sp, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	4683      	mov	fp, r0
 800469c:	f6bf ae4c 	bge.w	8004338 <__ieee754_rem_pio2+0x80>
 80046a0:	e9da 2100 	ldrd	r2, r1, [sl]
 80046a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046a8:	e9ca 2300 	strd	r2, r3, [sl]
 80046ac:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80046b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046b4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80046b8:	e73f      	b.n	800453a <__ieee754_rem_pio2+0x282>
 80046ba:	bf00      	nop
 80046bc:	41700000 	.word	0x41700000
 80046c0:	08005058 	.word	0x08005058

080046c4 <fabs>:
 80046c4:	ec51 0b10 	vmov	r0, r1, d0
 80046c8:	ee10 2a10 	vmov	r2, s0
 80046cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80046d0:	ec43 2b10 	vmov	d0, r2, r3
 80046d4:	4770      	bx	lr
	...

080046d8 <__kernel_rem_pio2>:
 80046d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046dc:	ed2d 8b02 	vpush	{d8}
 80046e0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80046e4:	f112 0f14 	cmn.w	r2, #20
 80046e8:	9306      	str	r3, [sp, #24]
 80046ea:	9104      	str	r1, [sp, #16]
 80046ec:	4bc2      	ldr	r3, [pc, #776]	; (80049f8 <__kernel_rem_pio2+0x320>)
 80046ee:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80046f0:	9009      	str	r0, [sp, #36]	; 0x24
 80046f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	9b06      	ldr	r3, [sp, #24]
 80046fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80046fe:	bfa8      	it	ge
 8004700:	1ed4      	subge	r4, r2, #3
 8004702:	9305      	str	r3, [sp, #20]
 8004704:	bfb2      	itee	lt
 8004706:	2400      	movlt	r4, #0
 8004708:	2318      	movge	r3, #24
 800470a:	fb94 f4f3 	sdivge	r4, r4, r3
 800470e:	f06f 0317 	mvn.w	r3, #23
 8004712:	fb04 3303 	mla	r3, r4, r3, r3
 8004716:	eb03 0a02 	add.w	sl, r3, r2
 800471a:	9b00      	ldr	r3, [sp, #0]
 800471c:	9a05      	ldr	r2, [sp, #20]
 800471e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80049e8 <__kernel_rem_pio2+0x310>
 8004722:	eb03 0802 	add.w	r8, r3, r2
 8004726:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004728:	1aa7      	subs	r7, r4, r2
 800472a:	ae20      	add	r6, sp, #128	; 0x80
 800472c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004730:	2500      	movs	r5, #0
 8004732:	4545      	cmp	r5, r8
 8004734:	dd13      	ble.n	800475e <__kernel_rem_pio2+0x86>
 8004736:	9b06      	ldr	r3, [sp, #24]
 8004738:	aa20      	add	r2, sp, #128	; 0x80
 800473a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800473e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8004742:	f04f 0800 	mov.w	r8, #0
 8004746:	9b00      	ldr	r3, [sp, #0]
 8004748:	4598      	cmp	r8, r3
 800474a:	dc31      	bgt.n	80047b0 <__kernel_rem_pio2+0xd8>
 800474c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80049e8 <__kernel_rem_pio2+0x310>
 8004750:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004754:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004758:	462f      	mov	r7, r5
 800475a:	2600      	movs	r6, #0
 800475c:	e01b      	b.n	8004796 <__kernel_rem_pio2+0xbe>
 800475e:	42ef      	cmn	r7, r5
 8004760:	d407      	bmi.n	8004772 <__kernel_rem_pio2+0x9a>
 8004762:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004766:	f7fb fe81 	bl	800046c <__aeabi_i2d>
 800476a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800476e:	3501      	adds	r5, #1
 8004770:	e7df      	b.n	8004732 <__kernel_rem_pio2+0x5a>
 8004772:	ec51 0b18 	vmov	r0, r1, d8
 8004776:	e7f8      	b.n	800476a <__kernel_rem_pio2+0x92>
 8004778:	e9d7 2300 	ldrd	r2, r3, [r7]
 800477c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004780:	f7fb fede 	bl	8000540 <__aeabi_dmul>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800478c:	f7fb fd22 	bl	80001d4 <__adddf3>
 8004790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004794:	3601      	adds	r6, #1
 8004796:	9b05      	ldr	r3, [sp, #20]
 8004798:	429e      	cmp	r6, r3
 800479a:	f1a7 0708 	sub.w	r7, r7, #8
 800479e:	ddeb      	ble.n	8004778 <__kernel_rem_pio2+0xa0>
 80047a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80047a4:	f108 0801 	add.w	r8, r8, #1
 80047a8:	ecab 7b02 	vstmia	fp!, {d7}
 80047ac:	3508      	adds	r5, #8
 80047ae:	e7ca      	b.n	8004746 <__kernel_rem_pio2+0x6e>
 80047b0:	9b00      	ldr	r3, [sp, #0]
 80047b2:	aa0c      	add	r2, sp, #48	; 0x30
 80047b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80047b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80047ba:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80047bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80047c0:	9c00      	ldr	r4, [sp, #0]
 80047c2:	930a      	str	r3, [sp, #40]	; 0x28
 80047c4:	00e3      	lsls	r3, r4, #3
 80047c6:	9308      	str	r3, [sp, #32]
 80047c8:	ab98      	add	r3, sp, #608	; 0x260
 80047ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80047ce:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80047d2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80047d6:	ab70      	add	r3, sp, #448	; 0x1c0
 80047d8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80047dc:	46c3      	mov	fp, r8
 80047de:	46a1      	mov	r9, r4
 80047e0:	f1b9 0f00 	cmp.w	r9, #0
 80047e4:	f1a5 0508 	sub.w	r5, r5, #8
 80047e8:	dc77      	bgt.n	80048da <__kernel_rem_pio2+0x202>
 80047ea:	ec47 6b10 	vmov	d0, r6, r7
 80047ee:	4650      	mov	r0, sl
 80047f0:	f000 fac2 	bl	8004d78 <scalbn>
 80047f4:	ec57 6b10 	vmov	r6, r7, d0
 80047f8:	2200      	movs	r2, #0
 80047fa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80047fe:	ee10 0a10 	vmov	r0, s0
 8004802:	4639      	mov	r1, r7
 8004804:	f7fb fe9c 	bl	8000540 <__aeabi_dmul>
 8004808:	ec41 0b10 	vmov	d0, r0, r1
 800480c:	f000 fb34 	bl	8004e78 <floor>
 8004810:	4b7a      	ldr	r3, [pc, #488]	; (80049fc <__kernel_rem_pio2+0x324>)
 8004812:	ec51 0b10 	vmov	r0, r1, d0
 8004816:	2200      	movs	r2, #0
 8004818:	f7fb fe92 	bl	8000540 <__aeabi_dmul>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4630      	mov	r0, r6
 8004822:	4639      	mov	r1, r7
 8004824:	f7fb fcd4 	bl	80001d0 <__aeabi_dsub>
 8004828:	460f      	mov	r7, r1
 800482a:	4606      	mov	r6, r0
 800482c:	f7fc f922 	bl	8000a74 <__aeabi_d2iz>
 8004830:	9002      	str	r0, [sp, #8]
 8004832:	f7fb fe1b 	bl	800046c <__aeabi_i2d>
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4630      	mov	r0, r6
 800483c:	4639      	mov	r1, r7
 800483e:	f7fb fcc7 	bl	80001d0 <__aeabi_dsub>
 8004842:	f1ba 0f00 	cmp.w	sl, #0
 8004846:	4606      	mov	r6, r0
 8004848:	460f      	mov	r7, r1
 800484a:	dd6d      	ble.n	8004928 <__kernel_rem_pio2+0x250>
 800484c:	1e61      	subs	r1, r4, #1
 800484e:	ab0c      	add	r3, sp, #48	; 0x30
 8004850:	9d02      	ldr	r5, [sp, #8]
 8004852:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004856:	f1ca 0018 	rsb	r0, sl, #24
 800485a:	fa43 f200 	asr.w	r2, r3, r0
 800485e:	4415      	add	r5, r2
 8004860:	4082      	lsls	r2, r0
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	aa0c      	add	r2, sp, #48	; 0x30
 8004866:	9502      	str	r5, [sp, #8]
 8004868:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800486c:	f1ca 0217 	rsb	r2, sl, #23
 8004870:	fa43 fb02 	asr.w	fp, r3, r2
 8004874:	f1bb 0f00 	cmp.w	fp, #0
 8004878:	dd65      	ble.n	8004946 <__kernel_rem_pio2+0x26e>
 800487a:	9b02      	ldr	r3, [sp, #8]
 800487c:	2200      	movs	r2, #0
 800487e:	3301      	adds	r3, #1
 8004880:	9302      	str	r3, [sp, #8]
 8004882:	4615      	mov	r5, r2
 8004884:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004888:	4294      	cmp	r4, r2
 800488a:	f300 809f 	bgt.w	80049cc <__kernel_rem_pio2+0x2f4>
 800488e:	f1ba 0f00 	cmp.w	sl, #0
 8004892:	dd07      	ble.n	80048a4 <__kernel_rem_pio2+0x1cc>
 8004894:	f1ba 0f01 	cmp.w	sl, #1
 8004898:	f000 80c1 	beq.w	8004a1e <__kernel_rem_pio2+0x346>
 800489c:	f1ba 0f02 	cmp.w	sl, #2
 80048a0:	f000 80c7 	beq.w	8004a32 <__kernel_rem_pio2+0x35a>
 80048a4:	f1bb 0f02 	cmp.w	fp, #2
 80048a8:	d14d      	bne.n	8004946 <__kernel_rem_pio2+0x26e>
 80048aa:	4632      	mov	r2, r6
 80048ac:	463b      	mov	r3, r7
 80048ae:	4954      	ldr	r1, [pc, #336]	; (8004a00 <__kernel_rem_pio2+0x328>)
 80048b0:	2000      	movs	r0, #0
 80048b2:	f7fb fc8d 	bl	80001d0 <__aeabi_dsub>
 80048b6:	4606      	mov	r6, r0
 80048b8:	460f      	mov	r7, r1
 80048ba:	2d00      	cmp	r5, #0
 80048bc:	d043      	beq.n	8004946 <__kernel_rem_pio2+0x26e>
 80048be:	4650      	mov	r0, sl
 80048c0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80049f0 <__kernel_rem_pio2+0x318>
 80048c4:	f000 fa58 	bl	8004d78 <scalbn>
 80048c8:	4630      	mov	r0, r6
 80048ca:	4639      	mov	r1, r7
 80048cc:	ec53 2b10 	vmov	r2, r3, d0
 80048d0:	f7fb fc7e 	bl	80001d0 <__aeabi_dsub>
 80048d4:	4606      	mov	r6, r0
 80048d6:	460f      	mov	r7, r1
 80048d8:	e035      	b.n	8004946 <__kernel_rem_pio2+0x26e>
 80048da:	4b4a      	ldr	r3, [pc, #296]	; (8004a04 <__kernel_rem_pio2+0x32c>)
 80048dc:	2200      	movs	r2, #0
 80048de:	4630      	mov	r0, r6
 80048e0:	4639      	mov	r1, r7
 80048e2:	f7fb fe2d 	bl	8000540 <__aeabi_dmul>
 80048e6:	f7fc f8c5 	bl	8000a74 <__aeabi_d2iz>
 80048ea:	f7fb fdbf 	bl	800046c <__aeabi_i2d>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	ec43 2b18 	vmov	d8, r2, r3
 80048f6:	4b44      	ldr	r3, [pc, #272]	; (8004a08 <__kernel_rem_pio2+0x330>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	f7fb fe21 	bl	8000540 <__aeabi_dmul>
 80048fe:	4602      	mov	r2, r0
 8004900:	460b      	mov	r3, r1
 8004902:	4630      	mov	r0, r6
 8004904:	4639      	mov	r1, r7
 8004906:	f7fb fc63 	bl	80001d0 <__aeabi_dsub>
 800490a:	f7fc f8b3 	bl	8000a74 <__aeabi_d2iz>
 800490e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004912:	f84b 0b04 	str.w	r0, [fp], #4
 8004916:	ec51 0b18 	vmov	r0, r1, d8
 800491a:	f7fb fc5b 	bl	80001d4 <__adddf3>
 800491e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004922:	4606      	mov	r6, r0
 8004924:	460f      	mov	r7, r1
 8004926:	e75b      	b.n	80047e0 <__kernel_rem_pio2+0x108>
 8004928:	d106      	bne.n	8004938 <__kernel_rem_pio2+0x260>
 800492a:	1e63      	subs	r3, r4, #1
 800492c:	aa0c      	add	r2, sp, #48	; 0x30
 800492e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004932:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8004936:	e79d      	b.n	8004874 <__kernel_rem_pio2+0x19c>
 8004938:	4b34      	ldr	r3, [pc, #208]	; (8004a0c <__kernel_rem_pio2+0x334>)
 800493a:	2200      	movs	r2, #0
 800493c:	f7fc f886 	bl	8000a4c <__aeabi_dcmpge>
 8004940:	2800      	cmp	r0, #0
 8004942:	d140      	bne.n	80049c6 <__kernel_rem_pio2+0x2ee>
 8004944:	4683      	mov	fp, r0
 8004946:	2200      	movs	r2, #0
 8004948:	2300      	movs	r3, #0
 800494a:	4630      	mov	r0, r6
 800494c:	4639      	mov	r1, r7
 800494e:	f7fc f85f 	bl	8000a10 <__aeabi_dcmpeq>
 8004952:	2800      	cmp	r0, #0
 8004954:	f000 80c1 	beq.w	8004ada <__kernel_rem_pio2+0x402>
 8004958:	1e65      	subs	r5, r4, #1
 800495a:	462b      	mov	r3, r5
 800495c:	2200      	movs	r2, #0
 800495e:	9900      	ldr	r1, [sp, #0]
 8004960:	428b      	cmp	r3, r1
 8004962:	da6d      	bge.n	8004a40 <__kernel_rem_pio2+0x368>
 8004964:	2a00      	cmp	r2, #0
 8004966:	f000 808a 	beq.w	8004a7e <__kernel_rem_pio2+0x3a6>
 800496a:	ab0c      	add	r3, sp, #48	; 0x30
 800496c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004970:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 80ae 	beq.w	8004ad6 <__kernel_rem_pio2+0x3fe>
 800497a:	4650      	mov	r0, sl
 800497c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80049f0 <__kernel_rem_pio2+0x318>
 8004980:	f000 f9fa 	bl	8004d78 <scalbn>
 8004984:	1c6b      	adds	r3, r5, #1
 8004986:	00da      	lsls	r2, r3, #3
 8004988:	9205      	str	r2, [sp, #20]
 800498a:	ec57 6b10 	vmov	r6, r7, d0
 800498e:	aa70      	add	r2, sp, #448	; 0x1c0
 8004990:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8004a04 <__kernel_rem_pio2+0x32c>
 8004994:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8004998:	462c      	mov	r4, r5
 800499a:	f04f 0800 	mov.w	r8, #0
 800499e:	2c00      	cmp	r4, #0
 80049a0:	f280 80d4 	bge.w	8004b4c <__kernel_rem_pio2+0x474>
 80049a4:	462c      	mov	r4, r5
 80049a6:	2c00      	cmp	r4, #0
 80049a8:	f2c0 8102 	blt.w	8004bb0 <__kernel_rem_pio2+0x4d8>
 80049ac:	4b18      	ldr	r3, [pc, #96]	; (8004a10 <__kernel_rem_pio2+0x338>)
 80049ae:	461e      	mov	r6, r3
 80049b0:	ab70      	add	r3, sp, #448	; 0x1c0
 80049b2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80049b6:	1b2b      	subs	r3, r5, r4
 80049b8:	f04f 0900 	mov.w	r9, #0
 80049bc:	f04f 0a00 	mov.w	sl, #0
 80049c0:	2700      	movs	r7, #0
 80049c2:	9306      	str	r3, [sp, #24]
 80049c4:	e0e6      	b.n	8004b94 <__kernel_rem_pio2+0x4bc>
 80049c6:	f04f 0b02 	mov.w	fp, #2
 80049ca:	e756      	b.n	800487a <__kernel_rem_pio2+0x1a2>
 80049cc:	f8d8 3000 	ldr.w	r3, [r8]
 80049d0:	bb05      	cbnz	r5, 8004a14 <__kernel_rem_pio2+0x33c>
 80049d2:	b123      	cbz	r3, 80049de <__kernel_rem_pio2+0x306>
 80049d4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80049d8:	f8c8 3000 	str.w	r3, [r8]
 80049dc:	2301      	movs	r3, #1
 80049de:	3201      	adds	r2, #1
 80049e0:	f108 0804 	add.w	r8, r8, #4
 80049e4:	461d      	mov	r5, r3
 80049e6:	e74f      	b.n	8004888 <__kernel_rem_pio2+0x1b0>
	...
 80049f4:	3ff00000 	.word	0x3ff00000
 80049f8:	080051a0 	.word	0x080051a0
 80049fc:	40200000 	.word	0x40200000
 8004a00:	3ff00000 	.word	0x3ff00000
 8004a04:	3e700000 	.word	0x3e700000
 8004a08:	41700000 	.word	0x41700000
 8004a0c:	3fe00000 	.word	0x3fe00000
 8004a10:	08005160 	.word	0x08005160
 8004a14:	1acb      	subs	r3, r1, r3
 8004a16:	f8c8 3000 	str.w	r3, [r8]
 8004a1a:	462b      	mov	r3, r5
 8004a1c:	e7df      	b.n	80049de <__kernel_rem_pio2+0x306>
 8004a1e:	1e62      	subs	r2, r4, #1
 8004a20:	ab0c      	add	r3, sp, #48	; 0x30
 8004a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a26:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004a2a:	a90c      	add	r1, sp, #48	; 0x30
 8004a2c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004a30:	e738      	b.n	80048a4 <__kernel_rem_pio2+0x1cc>
 8004a32:	1e62      	subs	r2, r4, #1
 8004a34:	ab0c      	add	r3, sp, #48	; 0x30
 8004a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004a3e:	e7f4      	b.n	8004a2a <__kernel_rem_pio2+0x352>
 8004a40:	a90c      	add	r1, sp, #48	; 0x30
 8004a42:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	e788      	b.n	800495e <__kernel_rem_pio2+0x286>
 8004a4c:	3301      	adds	r3, #1
 8004a4e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004a52:	2900      	cmp	r1, #0
 8004a54:	d0fa      	beq.n	8004a4c <__kernel_rem_pio2+0x374>
 8004a56:	9a08      	ldr	r2, [sp, #32]
 8004a58:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8004a5c:	446a      	add	r2, sp
 8004a5e:	3a98      	subs	r2, #152	; 0x98
 8004a60:	9208      	str	r2, [sp, #32]
 8004a62:	9a06      	ldr	r2, [sp, #24]
 8004a64:	a920      	add	r1, sp, #128	; 0x80
 8004a66:	18a2      	adds	r2, r4, r2
 8004a68:	18e3      	adds	r3, r4, r3
 8004a6a:	f104 0801 	add.w	r8, r4, #1
 8004a6e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8004a72:	9302      	str	r3, [sp, #8]
 8004a74:	9b02      	ldr	r3, [sp, #8]
 8004a76:	4543      	cmp	r3, r8
 8004a78:	da04      	bge.n	8004a84 <__kernel_rem_pio2+0x3ac>
 8004a7a:	461c      	mov	r4, r3
 8004a7c:	e6a2      	b.n	80047c4 <__kernel_rem_pio2+0xec>
 8004a7e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a80:	2301      	movs	r3, #1
 8004a82:	e7e4      	b.n	8004a4e <__kernel_rem_pio2+0x376>
 8004a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a86:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004a8a:	f7fb fcef 	bl	800046c <__aeabi_i2d>
 8004a8e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a94:	46ab      	mov	fp, r5
 8004a96:	461c      	mov	r4, r3
 8004a98:	f04f 0900 	mov.w	r9, #0
 8004a9c:	2600      	movs	r6, #0
 8004a9e:	2700      	movs	r7, #0
 8004aa0:	9b05      	ldr	r3, [sp, #20]
 8004aa2:	4599      	cmp	r9, r3
 8004aa4:	dd06      	ble.n	8004ab4 <__kernel_rem_pio2+0x3dc>
 8004aa6:	9b08      	ldr	r3, [sp, #32]
 8004aa8:	e8e3 6702 	strd	r6, r7, [r3], #8
 8004aac:	f108 0801 	add.w	r8, r8, #1
 8004ab0:	9308      	str	r3, [sp, #32]
 8004ab2:	e7df      	b.n	8004a74 <__kernel_rem_pio2+0x39c>
 8004ab4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004ab8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004abc:	f7fb fd40 	bl	8000540 <__aeabi_dmul>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	4639      	mov	r1, r7
 8004ac8:	f7fb fb84 	bl	80001d4 <__adddf3>
 8004acc:	f109 0901 	add.w	r9, r9, #1
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	460f      	mov	r7, r1
 8004ad4:	e7e4      	b.n	8004aa0 <__kernel_rem_pio2+0x3c8>
 8004ad6:	3d01      	subs	r5, #1
 8004ad8:	e747      	b.n	800496a <__kernel_rem_pio2+0x292>
 8004ada:	ec47 6b10 	vmov	d0, r6, r7
 8004ade:	f1ca 0000 	rsb	r0, sl, #0
 8004ae2:	f000 f949 	bl	8004d78 <scalbn>
 8004ae6:	ec57 6b10 	vmov	r6, r7, d0
 8004aea:	4ba0      	ldr	r3, [pc, #640]	; (8004d6c <__kernel_rem_pio2+0x694>)
 8004aec:	ee10 0a10 	vmov	r0, s0
 8004af0:	2200      	movs	r2, #0
 8004af2:	4639      	mov	r1, r7
 8004af4:	f7fb ffaa 	bl	8000a4c <__aeabi_dcmpge>
 8004af8:	b1f8      	cbz	r0, 8004b3a <__kernel_rem_pio2+0x462>
 8004afa:	4b9d      	ldr	r3, [pc, #628]	; (8004d70 <__kernel_rem_pio2+0x698>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	4630      	mov	r0, r6
 8004b00:	4639      	mov	r1, r7
 8004b02:	f7fb fd1d 	bl	8000540 <__aeabi_dmul>
 8004b06:	f7fb ffb5 	bl	8000a74 <__aeabi_d2iz>
 8004b0a:	4680      	mov	r8, r0
 8004b0c:	f7fb fcae 	bl	800046c <__aeabi_i2d>
 8004b10:	4b96      	ldr	r3, [pc, #600]	; (8004d6c <__kernel_rem_pio2+0x694>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	f7fb fd14 	bl	8000540 <__aeabi_dmul>
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	4639      	mov	r1, r7
 8004b1e:	4630      	mov	r0, r6
 8004b20:	f7fb fb56 	bl	80001d0 <__aeabi_dsub>
 8004b24:	f7fb ffa6 	bl	8000a74 <__aeabi_d2iz>
 8004b28:	1c65      	adds	r5, r4, #1
 8004b2a:	ab0c      	add	r3, sp, #48	; 0x30
 8004b2c:	f10a 0a18 	add.w	sl, sl, #24
 8004b30:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004b34:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004b38:	e71f      	b.n	800497a <__kernel_rem_pio2+0x2a2>
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	4639      	mov	r1, r7
 8004b3e:	f7fb ff99 	bl	8000a74 <__aeabi_d2iz>
 8004b42:	ab0c      	add	r3, sp, #48	; 0x30
 8004b44:	4625      	mov	r5, r4
 8004b46:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004b4a:	e716      	b.n	800497a <__kernel_rem_pio2+0x2a2>
 8004b4c:	ab0c      	add	r3, sp, #48	; 0x30
 8004b4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004b52:	f7fb fc8b 	bl	800046c <__aeabi_i2d>
 8004b56:	4632      	mov	r2, r6
 8004b58:	463b      	mov	r3, r7
 8004b5a:	f7fb fcf1 	bl	8000540 <__aeabi_dmul>
 8004b5e:	4642      	mov	r2, r8
 8004b60:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004b64:	464b      	mov	r3, r9
 8004b66:	4630      	mov	r0, r6
 8004b68:	4639      	mov	r1, r7
 8004b6a:	f7fb fce9 	bl	8000540 <__aeabi_dmul>
 8004b6e:	3c01      	subs	r4, #1
 8004b70:	4606      	mov	r6, r0
 8004b72:	460f      	mov	r7, r1
 8004b74:	e713      	b.n	800499e <__kernel_rem_pio2+0x2c6>
 8004b76:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8004b7a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8004b7e:	f7fb fcdf 	bl	8000540 <__aeabi_dmul>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4648      	mov	r0, r9
 8004b88:	4651      	mov	r1, sl
 8004b8a:	f7fb fb23 	bl	80001d4 <__adddf3>
 8004b8e:	3701      	adds	r7, #1
 8004b90:	4681      	mov	r9, r0
 8004b92:	468a      	mov	sl, r1
 8004b94:	9b00      	ldr	r3, [sp, #0]
 8004b96:	429f      	cmp	r7, r3
 8004b98:	dc02      	bgt.n	8004ba0 <__kernel_rem_pio2+0x4c8>
 8004b9a:	9b06      	ldr	r3, [sp, #24]
 8004b9c:	429f      	cmp	r7, r3
 8004b9e:	ddea      	ble.n	8004b76 <__kernel_rem_pio2+0x49e>
 8004ba0:	9a06      	ldr	r2, [sp, #24]
 8004ba2:	ab48      	add	r3, sp, #288	; 0x120
 8004ba4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8004ba8:	e9c6 9a00 	strd	r9, sl, [r6]
 8004bac:	3c01      	subs	r4, #1
 8004bae:	e6fa      	b.n	80049a6 <__kernel_rem_pio2+0x2ce>
 8004bb0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	dc0b      	bgt.n	8004bce <__kernel_rem_pio2+0x4f6>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	dc39      	bgt.n	8004c2e <__kernel_rem_pio2+0x556>
 8004bba:	d05d      	beq.n	8004c78 <__kernel_rem_pio2+0x5a0>
 8004bbc:	9b02      	ldr	r3, [sp, #8]
 8004bbe:	f003 0007 	and.w	r0, r3, #7
 8004bc2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004bc6:	ecbd 8b02 	vpop	{d8}
 8004bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d1f3      	bne.n	8004bbc <__kernel_rem_pio2+0x4e4>
 8004bd4:	9b05      	ldr	r3, [sp, #20]
 8004bd6:	9500      	str	r5, [sp, #0]
 8004bd8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004bdc:	eb0d 0403 	add.w	r4, sp, r3
 8004be0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8004be4:	46a2      	mov	sl, r4
 8004be6:	9b00      	ldr	r3, [sp, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f1aa 0a08 	sub.w	sl, sl, #8
 8004bee:	dc69      	bgt.n	8004cc4 <__kernel_rem_pio2+0x5ec>
 8004bf0:	46aa      	mov	sl, r5
 8004bf2:	f1ba 0f01 	cmp.w	sl, #1
 8004bf6:	f1a4 0408 	sub.w	r4, r4, #8
 8004bfa:	f300 8083 	bgt.w	8004d04 <__kernel_rem_pio2+0x62c>
 8004bfe:	9c05      	ldr	r4, [sp, #20]
 8004c00:	ab48      	add	r3, sp, #288	; 0x120
 8004c02:	441c      	add	r4, r3
 8004c04:	2000      	movs	r0, #0
 8004c06:	2100      	movs	r1, #0
 8004c08:	2d01      	cmp	r5, #1
 8004c0a:	f300 809a 	bgt.w	8004d42 <__kernel_rem_pio2+0x66a>
 8004c0e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8004c12:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8004c16:	f1bb 0f00 	cmp.w	fp, #0
 8004c1a:	f040 8098 	bne.w	8004d4e <__kernel_rem_pio2+0x676>
 8004c1e:	9b04      	ldr	r3, [sp, #16]
 8004c20:	e9c3 7800 	strd	r7, r8, [r3]
 8004c24:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004c28:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004c2c:	e7c6      	b.n	8004bbc <__kernel_rem_pio2+0x4e4>
 8004c2e:	9e05      	ldr	r6, [sp, #20]
 8004c30:	ab48      	add	r3, sp, #288	; 0x120
 8004c32:	441e      	add	r6, r3
 8004c34:	462c      	mov	r4, r5
 8004c36:	2000      	movs	r0, #0
 8004c38:	2100      	movs	r1, #0
 8004c3a:	2c00      	cmp	r4, #0
 8004c3c:	da33      	bge.n	8004ca6 <__kernel_rem_pio2+0x5ce>
 8004c3e:	f1bb 0f00 	cmp.w	fp, #0
 8004c42:	d036      	beq.n	8004cb2 <__kernel_rem_pio2+0x5da>
 8004c44:	4602      	mov	r2, r0
 8004c46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c4a:	9c04      	ldr	r4, [sp, #16]
 8004c4c:	e9c4 2300 	strd	r2, r3, [r4]
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004c58:	f7fb faba 	bl	80001d0 <__aeabi_dsub>
 8004c5c:	ae4a      	add	r6, sp, #296	; 0x128
 8004c5e:	2401      	movs	r4, #1
 8004c60:	42a5      	cmp	r5, r4
 8004c62:	da29      	bge.n	8004cb8 <__kernel_rem_pio2+0x5e0>
 8004c64:	f1bb 0f00 	cmp.w	fp, #0
 8004c68:	d002      	beq.n	8004c70 <__kernel_rem_pio2+0x598>
 8004c6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c6e:	4619      	mov	r1, r3
 8004c70:	9b04      	ldr	r3, [sp, #16]
 8004c72:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004c76:	e7a1      	b.n	8004bbc <__kernel_rem_pio2+0x4e4>
 8004c78:	9c05      	ldr	r4, [sp, #20]
 8004c7a:	ab48      	add	r3, sp, #288	; 0x120
 8004c7c:	441c      	add	r4, r3
 8004c7e:	2000      	movs	r0, #0
 8004c80:	2100      	movs	r1, #0
 8004c82:	2d00      	cmp	r5, #0
 8004c84:	da09      	bge.n	8004c9a <__kernel_rem_pio2+0x5c2>
 8004c86:	f1bb 0f00 	cmp.w	fp, #0
 8004c8a:	d002      	beq.n	8004c92 <__kernel_rem_pio2+0x5ba>
 8004c8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c90:	4619      	mov	r1, r3
 8004c92:	9b04      	ldr	r3, [sp, #16]
 8004c94:	e9c3 0100 	strd	r0, r1, [r3]
 8004c98:	e790      	b.n	8004bbc <__kernel_rem_pio2+0x4e4>
 8004c9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004c9e:	f7fb fa99 	bl	80001d4 <__adddf3>
 8004ca2:	3d01      	subs	r5, #1
 8004ca4:	e7ed      	b.n	8004c82 <__kernel_rem_pio2+0x5aa>
 8004ca6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004caa:	f7fb fa93 	bl	80001d4 <__adddf3>
 8004cae:	3c01      	subs	r4, #1
 8004cb0:	e7c3      	b.n	8004c3a <__kernel_rem_pio2+0x562>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	e7c8      	b.n	8004c4a <__kernel_rem_pio2+0x572>
 8004cb8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004cbc:	f7fb fa8a 	bl	80001d4 <__adddf3>
 8004cc0:	3401      	adds	r4, #1
 8004cc2:	e7cd      	b.n	8004c60 <__kernel_rem_pio2+0x588>
 8004cc4:	e9da 8900 	ldrd	r8, r9, [sl]
 8004cc8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004ccc:	9b00      	ldr	r3, [sp, #0]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	4632      	mov	r2, r6
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	4649      	mov	r1, r9
 8004cda:	f7fb fa7b 	bl	80001d4 <__adddf3>
 8004cde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	4640      	mov	r0, r8
 8004ce8:	4649      	mov	r1, r9
 8004cea:	f7fb fa71 	bl	80001d0 <__aeabi_dsub>
 8004cee:	4632      	mov	r2, r6
 8004cf0:	463b      	mov	r3, r7
 8004cf2:	f7fb fa6f 	bl	80001d4 <__adddf3>
 8004cf6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004cfa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004cfe:	ed8a 7b00 	vstr	d7, [sl]
 8004d02:	e770      	b.n	8004be6 <__kernel_rem_pio2+0x50e>
 8004d04:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004d08:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	4632      	mov	r2, r6
 8004d10:	463b      	mov	r3, r7
 8004d12:	4649      	mov	r1, r9
 8004d14:	f7fb fa5e 	bl	80001d4 <__adddf3>
 8004d18:	e9cd 0100 	strd	r0, r1, [sp]
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4640      	mov	r0, r8
 8004d22:	4649      	mov	r1, r9
 8004d24:	f7fb fa54 	bl	80001d0 <__aeabi_dsub>
 8004d28:	4632      	mov	r2, r6
 8004d2a:	463b      	mov	r3, r7
 8004d2c:	f7fb fa52 	bl	80001d4 <__adddf3>
 8004d30:	ed9d 7b00 	vldr	d7, [sp]
 8004d34:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004d38:	ed84 7b00 	vstr	d7, [r4]
 8004d3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d40:	e757      	b.n	8004bf2 <__kernel_rem_pio2+0x51a>
 8004d42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004d46:	f7fb fa45 	bl	80001d4 <__adddf3>
 8004d4a:	3d01      	subs	r5, #1
 8004d4c:	e75c      	b.n	8004c08 <__kernel_rem_pio2+0x530>
 8004d4e:	9b04      	ldr	r3, [sp, #16]
 8004d50:	9a04      	ldr	r2, [sp, #16]
 8004d52:	601f      	str	r7, [r3, #0]
 8004d54:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004d58:	605c      	str	r4, [r3, #4]
 8004d5a:	609d      	str	r5, [r3, #8]
 8004d5c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004d60:	60d3      	str	r3, [r2, #12]
 8004d62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d66:	6110      	str	r0, [r2, #16]
 8004d68:	6153      	str	r3, [r2, #20]
 8004d6a:	e727      	b.n	8004bbc <__kernel_rem_pio2+0x4e4>
 8004d6c:	41700000 	.word	0x41700000
 8004d70:	3e700000 	.word	0x3e700000
 8004d74:	00000000 	.word	0x00000000

08004d78 <scalbn>:
 8004d78:	b570      	push	{r4, r5, r6, lr}
 8004d7a:	ec55 4b10 	vmov	r4, r5, d0
 8004d7e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004d82:	4606      	mov	r6, r0
 8004d84:	462b      	mov	r3, r5
 8004d86:	b999      	cbnz	r1, 8004db0 <scalbn+0x38>
 8004d88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004d8c:	4323      	orrs	r3, r4
 8004d8e:	d03f      	beq.n	8004e10 <scalbn+0x98>
 8004d90:	4b35      	ldr	r3, [pc, #212]	; (8004e68 <scalbn+0xf0>)
 8004d92:	4629      	mov	r1, r5
 8004d94:	ee10 0a10 	vmov	r0, s0
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f7fb fbd1 	bl	8000540 <__aeabi_dmul>
 8004d9e:	4b33      	ldr	r3, [pc, #204]	; (8004e6c <scalbn+0xf4>)
 8004da0:	429e      	cmp	r6, r3
 8004da2:	4604      	mov	r4, r0
 8004da4:	460d      	mov	r5, r1
 8004da6:	da10      	bge.n	8004dca <scalbn+0x52>
 8004da8:	a327      	add	r3, pc, #156	; (adr r3, 8004e48 <scalbn+0xd0>)
 8004daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dae:	e01f      	b.n	8004df0 <scalbn+0x78>
 8004db0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004db4:	4291      	cmp	r1, r2
 8004db6:	d10c      	bne.n	8004dd2 <scalbn+0x5a>
 8004db8:	ee10 2a10 	vmov	r2, s0
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	f7fb fa08 	bl	80001d4 <__adddf3>
 8004dc4:	4604      	mov	r4, r0
 8004dc6:	460d      	mov	r5, r1
 8004dc8:	e022      	b.n	8004e10 <scalbn+0x98>
 8004dca:	460b      	mov	r3, r1
 8004dcc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004dd0:	3936      	subs	r1, #54	; 0x36
 8004dd2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004dd6:	4296      	cmp	r6, r2
 8004dd8:	dd0d      	ble.n	8004df6 <scalbn+0x7e>
 8004dda:	2d00      	cmp	r5, #0
 8004ddc:	a11c      	add	r1, pc, #112	; (adr r1, 8004e50 <scalbn+0xd8>)
 8004dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004de2:	da02      	bge.n	8004dea <scalbn+0x72>
 8004de4:	a11c      	add	r1, pc, #112	; (adr r1, 8004e58 <scalbn+0xe0>)
 8004de6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dea:	a319      	add	r3, pc, #100	; (adr r3, 8004e50 <scalbn+0xd8>)
 8004dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df0:	f7fb fba6 	bl	8000540 <__aeabi_dmul>
 8004df4:	e7e6      	b.n	8004dc4 <scalbn+0x4c>
 8004df6:	1872      	adds	r2, r6, r1
 8004df8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004dfc:	428a      	cmp	r2, r1
 8004dfe:	dcec      	bgt.n	8004dda <scalbn+0x62>
 8004e00:	2a00      	cmp	r2, #0
 8004e02:	dd08      	ble.n	8004e16 <scalbn+0x9e>
 8004e04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004e08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004e0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004e10:	ec45 4b10 	vmov	d0, r4, r5
 8004e14:	bd70      	pop	{r4, r5, r6, pc}
 8004e16:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004e1a:	da08      	bge.n	8004e2e <scalbn+0xb6>
 8004e1c:	2d00      	cmp	r5, #0
 8004e1e:	a10a      	add	r1, pc, #40	; (adr r1, 8004e48 <scalbn+0xd0>)
 8004e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e24:	dac0      	bge.n	8004da8 <scalbn+0x30>
 8004e26:	a10e      	add	r1, pc, #56	; (adr r1, 8004e60 <scalbn+0xe8>)
 8004e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e2c:	e7bc      	b.n	8004da8 <scalbn+0x30>
 8004e2e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004e32:	3236      	adds	r2, #54	; 0x36
 8004e34:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004e38:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	4b0c      	ldr	r3, [pc, #48]	; (8004e70 <scalbn+0xf8>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	e7d5      	b.n	8004df0 <scalbn+0x78>
 8004e44:	f3af 8000 	nop.w
 8004e48:	c2f8f359 	.word	0xc2f8f359
 8004e4c:	01a56e1f 	.word	0x01a56e1f
 8004e50:	8800759c 	.word	0x8800759c
 8004e54:	7e37e43c 	.word	0x7e37e43c
 8004e58:	8800759c 	.word	0x8800759c
 8004e5c:	fe37e43c 	.word	0xfe37e43c
 8004e60:	c2f8f359 	.word	0xc2f8f359
 8004e64:	81a56e1f 	.word	0x81a56e1f
 8004e68:	43500000 	.word	0x43500000
 8004e6c:	ffff3cb0 	.word	0xffff3cb0
 8004e70:	3c900000 	.word	0x3c900000
 8004e74:	00000000 	.word	0x00000000

08004e78 <floor>:
 8004e78:	ec51 0b10 	vmov	r0, r1, d0
 8004e7c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e84:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8004e88:	2e13      	cmp	r6, #19
 8004e8a:	ee10 5a10 	vmov	r5, s0
 8004e8e:	ee10 8a10 	vmov	r8, s0
 8004e92:	460c      	mov	r4, r1
 8004e94:	dc31      	bgt.n	8004efa <floor+0x82>
 8004e96:	2e00      	cmp	r6, #0
 8004e98:	da14      	bge.n	8004ec4 <floor+0x4c>
 8004e9a:	a333      	add	r3, pc, #204	; (adr r3, 8004f68 <floor+0xf0>)
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	f7fb f998 	bl	80001d4 <__adddf3>
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f7fb fdda 	bl	8000a60 <__aeabi_dcmpgt>
 8004eac:	b138      	cbz	r0, 8004ebe <floor+0x46>
 8004eae:	2c00      	cmp	r4, #0
 8004eb0:	da53      	bge.n	8004f5a <floor+0xe2>
 8004eb2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004eb6:	4325      	orrs	r5, r4
 8004eb8:	d052      	beq.n	8004f60 <floor+0xe8>
 8004eba:	4c2d      	ldr	r4, [pc, #180]	; (8004f70 <floor+0xf8>)
 8004ebc:	2500      	movs	r5, #0
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	4628      	mov	r0, r5
 8004ec2:	e024      	b.n	8004f0e <floor+0x96>
 8004ec4:	4f2b      	ldr	r7, [pc, #172]	; (8004f74 <floor+0xfc>)
 8004ec6:	4137      	asrs	r7, r6
 8004ec8:	ea01 0307 	and.w	r3, r1, r7
 8004ecc:	4303      	orrs	r3, r0
 8004ece:	d01e      	beq.n	8004f0e <floor+0x96>
 8004ed0:	a325      	add	r3, pc, #148	; (adr r3, 8004f68 <floor+0xf0>)
 8004ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed6:	f7fb f97d 	bl	80001d4 <__adddf3>
 8004eda:	2200      	movs	r2, #0
 8004edc:	2300      	movs	r3, #0
 8004ede:	f7fb fdbf 	bl	8000a60 <__aeabi_dcmpgt>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d0eb      	beq.n	8004ebe <floor+0x46>
 8004ee6:	2c00      	cmp	r4, #0
 8004ee8:	bfbe      	ittt	lt
 8004eea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004eee:	4133      	asrlt	r3, r6
 8004ef0:	18e4      	addlt	r4, r4, r3
 8004ef2:	ea24 0407 	bic.w	r4, r4, r7
 8004ef6:	2500      	movs	r5, #0
 8004ef8:	e7e1      	b.n	8004ebe <floor+0x46>
 8004efa:	2e33      	cmp	r6, #51	; 0x33
 8004efc:	dd0b      	ble.n	8004f16 <floor+0x9e>
 8004efe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004f02:	d104      	bne.n	8004f0e <floor+0x96>
 8004f04:	ee10 2a10 	vmov	r2, s0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	f7fb f963 	bl	80001d4 <__adddf3>
 8004f0e:	ec41 0b10 	vmov	d0, r0, r1
 8004f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f16:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8004f1a:	f04f 37ff 	mov.w	r7, #4294967295
 8004f1e:	40df      	lsrs	r7, r3
 8004f20:	4238      	tst	r0, r7
 8004f22:	d0f4      	beq.n	8004f0e <floor+0x96>
 8004f24:	a310      	add	r3, pc, #64	; (adr r3, 8004f68 <floor+0xf0>)
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	f7fb f953 	bl	80001d4 <__adddf3>
 8004f2e:	2200      	movs	r2, #0
 8004f30:	2300      	movs	r3, #0
 8004f32:	f7fb fd95 	bl	8000a60 <__aeabi_dcmpgt>
 8004f36:	2800      	cmp	r0, #0
 8004f38:	d0c1      	beq.n	8004ebe <floor+0x46>
 8004f3a:	2c00      	cmp	r4, #0
 8004f3c:	da0a      	bge.n	8004f54 <floor+0xdc>
 8004f3e:	2e14      	cmp	r6, #20
 8004f40:	d101      	bne.n	8004f46 <floor+0xce>
 8004f42:	3401      	adds	r4, #1
 8004f44:	e006      	b.n	8004f54 <floor+0xdc>
 8004f46:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	40b3      	lsls	r3, r6
 8004f4e:	441d      	add	r5, r3
 8004f50:	45a8      	cmp	r8, r5
 8004f52:	d8f6      	bhi.n	8004f42 <floor+0xca>
 8004f54:	ea25 0507 	bic.w	r5, r5, r7
 8004f58:	e7b1      	b.n	8004ebe <floor+0x46>
 8004f5a:	2500      	movs	r5, #0
 8004f5c:	462c      	mov	r4, r5
 8004f5e:	e7ae      	b.n	8004ebe <floor+0x46>
 8004f60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004f64:	e7ab      	b.n	8004ebe <floor+0x46>
 8004f66:	bf00      	nop
 8004f68:	8800759c 	.word	0x8800759c
 8004f6c:	7e37e43c 	.word	0x7e37e43c
 8004f70:	bff00000 	.word	0xbff00000
 8004f74:	000fffff 	.word	0x000fffff

08004f78 <_init>:
 8004f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f7a:	bf00      	nop
 8004f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f7e:	bc08      	pop	{r3}
 8004f80:	469e      	mov	lr, r3
 8004f82:	4770      	bx	lr

08004f84 <_fini>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	bf00      	nop
 8004f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f8a:	bc08      	pop	{r3}
 8004f8c:	469e      	mov	lr, r3
 8004f8e:	4770      	bx	lr
