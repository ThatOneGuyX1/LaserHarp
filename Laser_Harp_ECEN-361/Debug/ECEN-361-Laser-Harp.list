
ECEN-361-Laser-Harp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003598  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b1c  08007b1c  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b1c  08007b1c  00017b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b24  08007b24  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b24  08007b24  00017b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b28  08007b28  00017b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08007b2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000003c  08007b68  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08007b68  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113e8  00000000  00000000  000200af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000223d  00000000  00000000  00031497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  000336d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c2e  00000000  00000000  00034670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026517  00000000  00000000  0003529e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012268  00000000  00000000  0005b7b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0923  00000000  00000000  0006da1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000041f0  00000000  00000000  0015e340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00162530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800456c 	.word	0x0800456c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	0800456c 	.word	0x0800456c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fdb6 	bl	8001038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f814 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f920 	bl	8000714 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f8ee 	bl	80006b4 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80004d8:	f000 f860 	bl	800059c <MX_DAC1_Init>
  MX_TIM15_Init();
 80004dc:	f000 f89a 	bl	8000614 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim15); // Start the Music Interrupt Timer
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <main+0x2c>)
 80004e2:	f002 febd 	bl	8003260 <HAL_TIM_Base_Start_IT>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2); // Start one of the dac channels
 80004e6:	2110      	movs	r1, #16
 80004e8:	4802      	ldr	r0, [pc, #8]	; (80004f4 <main+0x30>)
 80004ea:	f000 ff78 	bl	80013de <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <main+0x2a>
 80004f0:	2000006c 	.word	0x2000006c
 80004f4:	20000058 	.word	0x20000058

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b096      	sub	sp, #88	; 0x58
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	2244      	movs	r2, #68	; 0x44
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f004 f803 	bl	8004512 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	463b      	mov	r3, r7
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800051a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800051e:	f001 fb35 	bl	8001b8c <HAL_PWREx_ControlVoltageScaling>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000528:	f000 fc0a 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052c:	2302      	movs	r3, #2
 800052e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000534:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000536:	2310      	movs	r3, #16
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053e:	2302      	movs	r3, #2
 8000540:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000542:	2301      	movs	r3, #1
 8000544:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000546:	230a      	movs	r3, #10
 8000548:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800054a:	2307      	movs	r3, #7
 800054c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800054e:	2302      	movs	r3, #2
 8000550:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000552:	2302      	movs	r3, #2
 8000554:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fb6c 	bl	8001c38 <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000566:	f000 fbeb 	bl	8000d40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2303      	movs	r3, #3
 8000570:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	2104      	movs	r1, #4
 8000582:	4618      	mov	r0, r3
 8000584:	f001 ff34 	bl	80023f0 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800058e:	f000 fbd7 	bl	8000d40 <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3758      	adds	r7, #88	; 0x58
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2224      	movs	r2, #36	; 0x24
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 ffb2 	bl	8004512 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <MX_DAC1_Init+0x70>)
 80005b0:	4a17      	ldr	r2, [pc, #92]	; (8000610 <MX_DAC1_Init+0x74>)
 80005b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005b4:	4815      	ldr	r0, [pc, #84]	; (800060c <MX_DAC1_Init+0x70>)
 80005b6:	f000 fef0 	bl	800139a <HAL_DAC_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005c0:	f000 fbbe 	bl	8000d40 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	4619      	mov	r1, r3
 80005de:	480b      	ldr	r0, [pc, #44]	; (800060c <MX_DAC1_Init+0x70>)
 80005e0:	f000 ffd3 	bl	800158a <HAL_DAC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005ea:	f000 fba9 	bl	8000d40 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2210      	movs	r2, #16
 80005f2:	4619      	mov	r1, r3
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_DAC1_Init+0x70>)
 80005f6:	f000 ffc8 	bl	800158a <HAL_DAC_ConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000600:	f000 fb9e 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	; 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000058 	.word	0x20000058
 8000610:	40007400 	.word	0x40007400

08000614 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_TIM15_Init+0x98>)
 8000634:	4a1e      	ldr	r2, [pc, #120]	; (80006b0 <MX_TIM15_Init+0x9c>)
 8000636:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_TIM15_Init+0x98>)
 800063a:	224f      	movs	r2, #79	; 0x4f
 800063c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_TIM15_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10;
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_TIM15_Init+0x98>)
 8000646:	220a      	movs	r2, #10
 8000648:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_TIM15_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_TIM15_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_TIM15_Init+0x98>)
 8000658:	2280      	movs	r2, #128	; 0x80
 800065a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800065c:	4813      	ldr	r0, [pc, #76]	; (80006ac <MX_TIM15_Init+0x98>)
 800065e:	f002 fda7 	bl	80031b0 <HAL_TIM_Base_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8000668:	f000 fb6a 	bl	8000d40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4619      	mov	r1, r3
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <MX_TIM15_Init+0x98>)
 800067a:	f002 ff63 	bl	8003544 <HAL_TIM_ConfigClockSource>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8000684:	f000 fb5c 	bl	8000d40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_TIM15_Init+0x98>)
 8000696:	f003 f97b 	bl	8003990 <HAL_TIMEx_MasterConfigSynchronization>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80006a0:	f000 fb4e 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000006c 	.word	0x2000006c
 80006b0:	40014000 	.word	0x40014000

080006b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ba:	4a15      	ldr	r2, [pc, #84]	; (8000710 <MX_USART2_UART_Init+0x5c>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006f8:	f003 f9f0 	bl	8003adc <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000702:	f000 fb1d 	bl	8000d40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000b8 	.word	0x200000b8
 8000710:	40004400 	.word	0x40004400

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b32      	ldr	r3, [pc, #200]	; (80007f4 <MX_GPIO_Init+0xe0>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a31      	ldr	r2, [pc, #196]	; (80007f4 <MX_GPIO_Init+0xe0>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <MX_GPIO_Init+0xe0>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <MX_GPIO_Init+0xe0>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a2b      	ldr	r2, [pc, #172]	; (80007f4 <MX_GPIO_Init+0xe0>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <MX_GPIO_Init+0xe0>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <MX_GPIO_Init+0xe0>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a25      	ldr	r2, [pc, #148]	; (80007f4 <MX_GPIO_Init+0xe0>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_GPIO_Init+0xe0>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_GPIO_Init+0xe0>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a1f      	ldr	r2, [pc, #124]	; (80007f4 <MX_GPIO_Init+0xe0>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_GPIO_Init+0xe0>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800078a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000790:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000794:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	4815      	ldr	r0, [pc, #84]	; (80007f8 <MX_GPIO_Init+0xe4>)
 80007a2:	f001 f823 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pins : NOTE_1_Pin NOTE_2_Pin NOTE_3_Pin NOTE_5_Pin
                           NOTE_6_Pin NOTE_7_Pin NOTE_8_Pin NOTE_9_Pin
                           NOTE_10_Pin NOTE_11_Pin NOTE_12_Pin */
  GPIO_InitStruct.Pin = NOTE_1_Pin|NOTE_2_Pin|NOTE_3_Pin|NOTE_5_Pin
 80007a6:	f640 73f7 	movw	r3, #4087	; 0xff7
 80007aa:	617b      	str	r3, [r7, #20]
                          |NOTE_6_Pin|NOTE_7_Pin|NOTE_8_Pin|NOTE_9_Pin
                          |NOTE_10_Pin|NOTE_11_Pin|NOTE_12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007b2:	2302      	movs	r3, #2
 80007b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	480e      	ldr	r0, [pc, #56]	; (80007f8 <MX_GPIO_Init+0xe4>)
 80007be:	f001 f815 	bl	80017ec <HAL_GPIO_Init>

  /*Configure GPIO pin : NOTE_4_Pin */
  GPIO_InitStruct.Pin = NOTE_4_Pin;
 80007c2:	2308      	movs	r3, #8
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NOTE_4_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	4808      	ldr	r0, [pc, #32]	; (80007f8 <MX_GPIO_Init+0xe4>)
 80007d8:	f001 f808 	bl	80017ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2028      	movs	r0, #40	; 0x28
 80007e2:	f000 fda4 	bl	800132e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007e6:	2028      	movs	r0, #40	; 0x28
 80007e8:	f000 fdbd 	bl	8001366 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	; 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40021000 	.word	0x40021000
 80007f8:	48000800 	.word	0x48000800

080007fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000806:	88fb      	ldrh	r3, [r7, #6]
 8000808:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800080c:	f000 80ea 	beq.w	80009e4 <HAL_GPIO_EXTI_Callback+0x1e8>
 8000810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000814:	f300 80f1 	bgt.w	80009fa <HAL_GPIO_EXTI_Callback+0x1fe>
 8000818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800081c:	f000 80d7 	beq.w	80009ce <HAL_GPIO_EXTI_Callback+0x1d2>
 8000820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000824:	f300 80e9 	bgt.w	80009fa <HAL_GPIO_EXTI_Callback+0x1fe>
 8000828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800082c:	f000 80c4 	beq.w	80009b8 <HAL_GPIO_EXTI_Callback+0x1bc>
 8000830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000834:	f300 80e1 	bgt.w	80009fa <HAL_GPIO_EXTI_Callback+0x1fe>
 8000838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800083c:	f000 80b1 	beq.w	80009a2 <HAL_GPIO_EXTI_Callback+0x1a6>
 8000840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000844:	f300 80d9 	bgt.w	80009fa <HAL_GPIO_EXTI_Callback+0x1fe>
 8000848:	2b80      	cmp	r3, #128	; 0x80
 800084a:	f000 809f 	beq.w	800098c <HAL_GPIO_EXTI_Callback+0x190>
 800084e:	2b80      	cmp	r3, #128	; 0x80
 8000850:	f300 80d3 	bgt.w	80009fa <HAL_GPIO_EXTI_Callback+0x1fe>
 8000854:	2b20      	cmp	r3, #32
 8000856:	dc49      	bgt.n	80008ec <HAL_GPIO_EXTI_Callback+0xf0>
 8000858:	2b00      	cmp	r3, #0
 800085a:	f340 80ce 	ble.w	80009fa <HAL_GPIO_EXTI_Callback+0x1fe>
 800085e:	3b01      	subs	r3, #1
 8000860:	2b1f      	cmp	r3, #31
 8000862:	f200 80ca 	bhi.w	80009fa <HAL_GPIO_EXTI_Callback+0x1fe>
 8000866:	a201      	add	r2, pc, #4	; (adr r2, 800086c <HAL_GPIO_EXTI_Callback+0x70>)
 8000868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086c:	080008f3 	.word	0x080008f3
 8000870:	08000909 	.word	0x08000909
 8000874:	080009fb 	.word	0x080009fb
 8000878:	0800091f 	.word	0x0800091f
 800087c:	080009fb 	.word	0x080009fb
 8000880:	080009fb 	.word	0x080009fb
 8000884:	080009fb 	.word	0x080009fb
 8000888:	08000935 	.word	0x08000935
 800088c:	080009fb 	.word	0x080009fb
 8000890:	080009fb 	.word	0x080009fb
 8000894:	080009fb 	.word	0x080009fb
 8000898:	080009fb 	.word	0x080009fb
 800089c:	080009fb 	.word	0x080009fb
 80008a0:	080009fb 	.word	0x080009fb
 80008a4:	080009fb 	.word	0x080009fb
 80008a8:	0800094b 	.word	0x0800094b
 80008ac:	080009fb 	.word	0x080009fb
 80008b0:	080009fb 	.word	0x080009fb
 80008b4:	080009fb 	.word	0x080009fb
 80008b8:	080009fb 	.word	0x080009fb
 80008bc:	080009fb 	.word	0x080009fb
 80008c0:	080009fb 	.word	0x080009fb
 80008c4:	080009fb 	.word	0x080009fb
 80008c8:	080009fb 	.word	0x080009fb
 80008cc:	080009fb 	.word	0x080009fb
 80008d0:	080009fb 	.word	0x080009fb
 80008d4:	080009fb 	.word	0x080009fb
 80008d8:	080009fb 	.word	0x080009fb
 80008dc:	080009fb 	.word	0x080009fb
 80008e0:	080009fb 	.word	0x080009fb
 80008e4:	080009fb 	.word	0x080009fb
 80008e8:	08000961 	.word	0x08000961
 80008ec:	2b40      	cmp	r3, #64	; 0x40
 80008ee:	d042      	beq.n	8000976 <HAL_GPIO_EXTI_Callback+0x17a>
	case NOTE_12_Pin:
		active[NOTE_B] = !active[NOTE_B];
		break;

	default:
		break;
 80008f0:	e083      	b.n	80009fa <HAL_GPIO_EXTI_Callback+0x1fe>
		active[NOTE_C] = !active[NOTE_C];
 80008f2:	4b45      	ldr	r3, [pc, #276]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	bf0c      	ite	eq
 80008fa:	2301      	moveq	r3, #1
 80008fc:	2300      	movne	r3, #0
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	4b41      	ldr	r3, [pc, #260]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000904:	601a      	str	r2, [r3, #0]
		break;
 8000906:	e079      	b.n	80009fc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_Cs] = !active[NOTE_Cs];
 8000908:	4b3f      	ldr	r3, [pc, #252]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b00      	cmp	r3, #0
 800090e:	bf0c      	ite	eq
 8000910:	2301      	moveq	r3, #1
 8000912:	2300      	movne	r3, #0
 8000914:	b2db      	uxtb	r3, r3
 8000916:	461a      	mov	r2, r3
 8000918:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 800091a:	605a      	str	r2, [r3, #4]
		break;
 800091c:	e06e      	b.n	80009fc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_D] = !active[NOTE_D];
 800091e:	4b3a      	ldr	r3, [pc, #232]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	2b00      	cmp	r3, #0
 8000924:	bf0c      	ite	eq
 8000926:	2301      	moveq	r3, #1
 8000928:	2300      	movne	r3, #0
 800092a:	b2db      	uxtb	r3, r3
 800092c:	461a      	mov	r2, r3
 800092e:	4b36      	ldr	r3, [pc, #216]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000930:	609a      	str	r2, [r3, #8]
		break;
 8000932:	e063      	b.n	80009fc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_Ds] = !active[NOTE_Ds];
 8000934:	4b34      	ldr	r3, [pc, #208]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	2b00      	cmp	r3, #0
 800093a:	bf0c      	ite	eq
 800093c:	2301      	moveq	r3, #1
 800093e:	2300      	movne	r3, #0
 8000940:	b2db      	uxtb	r3, r3
 8000942:	461a      	mov	r2, r3
 8000944:	4b30      	ldr	r3, [pc, #192]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000946:	60da      	str	r2, [r3, #12]
		break;
 8000948:	e058      	b.n	80009fc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_E] = !active[NOTE_E];
 800094a:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 800094c:	691b      	ldr	r3, [r3, #16]
 800094e:	2b00      	cmp	r3, #0
 8000950:	bf0c      	ite	eq
 8000952:	2301      	moveq	r3, #1
 8000954:	2300      	movne	r3, #0
 8000956:	b2db      	uxtb	r3, r3
 8000958:	461a      	mov	r2, r3
 800095a:	4b2b      	ldr	r3, [pc, #172]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 800095c:	611a      	str	r2, [r3, #16]
		break;
 800095e:	e04d      	b.n	80009fc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_F] = !active[NOTE_F];
 8000960:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000962:	695b      	ldr	r3, [r3, #20]
 8000964:	2b00      	cmp	r3, #0
 8000966:	bf0c      	ite	eq
 8000968:	2301      	moveq	r3, #1
 800096a:	2300      	movne	r3, #0
 800096c:	b2db      	uxtb	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	4b25      	ldr	r3, [pc, #148]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000972:	615a      	str	r2, [r3, #20]
		break;
 8000974:	e042      	b.n	80009fc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_Fs] = !active[NOTE_Fs];
 8000976:	4b24      	ldr	r3, [pc, #144]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	2b00      	cmp	r3, #0
 800097c:	bf0c      	ite	eq
 800097e:	2301      	moveq	r3, #1
 8000980:	2300      	movne	r3, #0
 8000982:	b2db      	uxtb	r3, r3
 8000984:	461a      	mov	r2, r3
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000988:	619a      	str	r2, [r3, #24]
		break;
 800098a:	e037      	b.n	80009fc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_G] = !active[NOTE_G];
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 800098e:	69db      	ldr	r3, [r3, #28]
 8000990:	2b00      	cmp	r3, #0
 8000992:	bf0c      	ite	eq
 8000994:	2301      	moveq	r3, #1
 8000996:	2300      	movne	r3, #0
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 800099e:	61da      	str	r2, [r3, #28]
		break;
 80009a0:	e02c      	b.n	80009fc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_Gs] = !active[NOTE_Gs];
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 80009a4:	6a1b      	ldr	r3, [r3, #32]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	bf0c      	ite	eq
 80009aa:	2301      	moveq	r3, #1
 80009ac:	2300      	movne	r3, #0
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 80009b4:	621a      	str	r2, [r3, #32]
		break;
 80009b6:	e021      	b.n	80009fc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_A] = !active[NOTE_A];
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 80009ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bf0c      	ite	eq
 80009c0:	2301      	moveq	r3, #1
 80009c2:	2300      	movne	r3, #0
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	461a      	mov	r2, r3
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 80009ca:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 80009cc:	e016      	b.n	80009fc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_As] = !active[NOTE_As];
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 80009d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	bf0c      	ite	eq
 80009d6:	2301      	moveq	r3, #1
 80009d8:	2300      	movne	r3, #0
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 80009e2:	e00b      	b.n	80009fc <HAL_GPIO_EXTI_Callback+0x200>
		active[NOTE_B] = !active[NOTE_B];
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 80009e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf0c      	ite	eq
 80009ec:	2301      	moveq	r3, #1
 80009ee:	2300      	movne	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x20c>)
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 80009f8:	e000      	b.n	80009fc <HAL_GPIO_EXTI_Callback+0x200>
		break;
 80009fa:	bf00      	nop
	}
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	20000000 	.word	0x20000000

08000a0c <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b090      	sub	sp, #64	; 0x40
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  if (htim == &htim15 )
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a49      	ldr	r2, [pc, #292]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	f040 8184 	bne.w	8000d26 <HAL_TIM_PeriodElapsedCallback+0x31a>
    /* ***************************************************************
    * This first batch of values is to look update the value for each Note.
    * By using a list and different indexs we can speed up the program with good spatial locality
    * If the note is active then we update the value. Otherwise we return a zero.
    ***************************************************************************/
	  int C_val = 	active[NOTE_C]?C_TABLE[index[NOTE_C]]:0;
 8000a1e:	4b48      	ldr	r3, [pc, #288]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d005      	beq.n	8000a32 <HAL_TIM_PeriodElapsedCallback+0x26>
 8000a26:	4b47      	ldr	r3, [pc, #284]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a47      	ldr	r2, [pc, #284]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a30:	e000      	b.n	8000a34 <HAL_TIM_PeriodElapsedCallback+0x28>
 8000a32:	2300      	movs	r3, #0
 8000a34:	63fb      	str	r3, [r7, #60]	; 0x3c
	  int Cs_val = 	active[NOTE_Cs]?Cs_TABLE[index[NOTE_Cs]]:0;
 8000a36:	4b42      	ldr	r3, [pc, #264]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d005      	beq.n	8000a4a <HAL_TIM_PeriodElapsedCallback+0x3e>
 8000a3e:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	4a42      	ldr	r2, [pc, #264]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a48:	e000      	b.n	8000a4c <HAL_TIM_PeriodElapsedCallback+0x40>
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	63bb      	str	r3, [r7, #56]	; 0x38
	  int D_val = 	active[NOTE_D]?D_TABLE[index[NOTE_D]]:0;
 8000a4e:	4b3c      	ldr	r3, [pc, #240]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d005      	beq.n	8000a62 <HAL_TIM_PeriodElapsedCallback+0x56>
 8000a56:	4b3b      	ldr	r3, [pc, #236]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	4a3d      	ldr	r2, [pc, #244]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a60:	e000      	b.n	8000a64 <HAL_TIM_PeriodElapsedCallback+0x58>
 8000a62:	2300      	movs	r3, #0
 8000a64:	637b      	str	r3, [r7, #52]	; 0x34
	  int Ds_val = 	active[NOTE_Ds]?Ds_TABLE[index[NOTE_Ds]]:0;
 8000a66:	4b36      	ldr	r3, [pc, #216]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a68:	68db      	ldr	r3, [r3, #12]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d005      	beq.n	8000a7a <HAL_TIM_PeriodElapsedCallback+0x6e>
 8000a6e:	4b35      	ldr	r3, [pc, #212]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a70:	68db      	ldr	r3, [r3, #12]
 8000a72:	4a38      	ldr	r2, [pc, #224]	; (8000b54 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a78:	e000      	b.n	8000a7c <HAL_TIM_PeriodElapsedCallback+0x70>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	633b      	str	r3, [r7, #48]	; 0x30
	  int E_val = 	active[NOTE_E]?E_TABLE[index[NOTE_E]]:0;
 8000a7e:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a80:	691b      	ldr	r3, [r3, #16]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d005      	beq.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x86>
 8000a86:	4b2f      	ldr	r3, [pc, #188]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	4a33      	ldr	r2, [pc, #204]	; (8000b58 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a90:	e000      	b.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0x88>
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	; 0x2c
	  int F_val = 	active[NOTE_F]?F_TABLE[index[NOTE_F]]:0;
 8000a96:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d005      	beq.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x9e>
 8000a9e:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa8:	e000      	b.n	8000aac <HAL_TIM_PeriodElapsedCallback+0xa0>
 8000aaa:	2300      	movs	r3, #0
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
	  int Fs_val = 	active[NOTE_Fs]?Fs_TABLE[index[NOTE_Fs]]:0;
 8000aae:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d005      	beq.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0xb6>
 8000ab6:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a29      	ldr	r2, [pc, #164]	; (8000b60 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	e000      	b.n	8000ac4 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
	  int G_val = 	active[NOTE_G]?G_TABLE[index[NOTE_G]]:0;
 8000ac6:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ac8:	69db      	ldr	r3, [r3, #28]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d005      	beq.n	8000ada <HAL_TIM_PeriodElapsedCallback+0xce>
 8000ace:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a24      	ldr	r2, [pc, #144]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad8:	e000      	b.n	8000adc <HAL_TIM_PeriodElapsedCallback+0xd0>
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
	  int Gs_val = 	active[NOTE_Gs]?Gs_TABLE[index[NOTE_Gs]]:0;
 8000ade:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ae0:	6a1b      	ldr	r3, [r3, #32]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d005      	beq.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0xe6>
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ae8:	6a1b      	ldr	r3, [r3, #32]
 8000aea:	4a1f      	ldr	r2, [pc, #124]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	e000      	b.n	8000af4 <HAL_TIM_PeriodElapsedCallback+0xe8>
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
	  int A_val = 	active[NOTE_A]?A_TABLE[index[NOTE_A]]:0;
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d005      	beq.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0xfe>
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b02:	4a1a      	ldr	r2, [pc, #104]	; (8000b6c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b08:	e000      	b.n	8000b0c <HAL_TIM_PeriodElapsedCallback+0x100>
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
	  int As_val = 	active[NOTE_As]?As_TABLE[index[NOTE_As]]:0;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d005      	beq.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0x116>
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1a:	4a15      	ldr	r2, [pc, #84]	; (8000b70 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	e000      	b.n	8000b24 <HAL_TIM_PeriodElapsedCallback+0x118>
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
	  int B_val = 	active[NOTE_B]?B_TABLE[index[NOTE_B]]:0;
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d024      	beq.n	8000b78 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b32:	4a10      	ldr	r2, [pc, #64]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b38:	e01f      	b.n	8000b7a <HAL_TIM_PeriodElapsedCallback+0x16e>
 8000b3a:	bf00      	nop
 8000b3c:	2000006c 	.word	0x2000006c
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000140 	.word	0x20000140
 8000b48:	08004584 	.word	0x08004584
 8000b4c:	08004b80 	.word	0x08004b80
 8000b50:	08005124 	.word	0x08005124
 8000b54:	08005678 	.word	0x08005678
 8000b58:	08005b80 	.word	0x08005b80
 8000b5c:	08006040 	.word	0x08006040
 8000b60:	080064bc 	.word	0x080064bc
 8000b64:	080068f8 	.word	0x080068f8
 8000b68:	08006cf8 	.word	0x08006cf8
 8000b6c:	080070bc 	.word	0x080070bc
 8000b70:	0800744c 	.word	0x0800744c
 8000b74:	080077a8 	.word	0x080077a8
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]

    /* ***************************************************************
    This batch of code is to just update the index if the note is active.
    Since the active list should only ever hold a 0 or a 1, this code works. Avoid if statements
      ***************************************************************************/
	  index[NOTE_C] += 	active[NOTE_C];
 8000b7c:	4b6c      	ldr	r3, [pc, #432]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b6c      	ldr	r3, [pc, #432]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4413      	add	r3, r2
 8000b86:	4a6a      	ldr	r2, [pc, #424]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000b88:	6013      	str	r3, [r2, #0]
	  index[NOTE_Cs] += 	active[NOTE_Cs];
 8000b8a:	4b69      	ldr	r3, [pc, #420]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4b69      	ldr	r3, [pc, #420]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a66      	ldr	r2, [pc, #408]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000b96:	6053      	str	r3, [r2, #4]
	  index[NOTE_D]	+= 	active[NOTE_D];
 8000b98:	4b65      	ldr	r3, [pc, #404]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000b9a:	689a      	ldr	r2, [r3, #8]
 8000b9c:	4b65      	ldr	r3, [pc, #404]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a63      	ldr	r2, [pc, #396]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000ba4:	6093      	str	r3, [r2, #8]
	  index[NOTE_Ds] += 	active[NOTE_Ds];
 8000ba6:	4b62      	ldr	r3, [pc, #392]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000ba8:	68da      	ldr	r2, [r3, #12]
 8000baa:	4b62      	ldr	r3, [pc, #392]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a5f      	ldr	r2, [pc, #380]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000bb2:	60d3      	str	r3, [r2, #12]
    index[NOTE_E] += 	active[NOTE_E];
 8000bb4:	4b5e      	ldr	r3, [pc, #376]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000bb6:	691a      	ldr	r2, [r3, #16]
 8000bb8:	4b5e      	ldr	r3, [pc, #376]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	4a5c      	ldr	r2, [pc, #368]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000bc0:	6113      	str	r3, [r2, #16]
    index[NOTE_F] += 	active[NOTE_F];
 8000bc2:	4b5b      	ldr	r3, [pc, #364]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000bc4:	695a      	ldr	r2, [r3, #20]
 8000bc6:	4b5b      	ldr	r3, [pc, #364]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a58      	ldr	r2, [pc, #352]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000bce:	6153      	str	r3, [r2, #20]
    index[NOTE_Fs] += 	active[NOTE_Fs];
 8000bd0:	4b57      	ldr	r3, [pc, #348]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000bd2:	699a      	ldr	r2, [r3, #24]
 8000bd4:	4b57      	ldr	r3, [pc, #348]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a55      	ldr	r2, [pc, #340]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000bdc:	6193      	str	r3, [r2, #24]
    index[NOTE_G] += 	active[NOTE_G];
 8000bde:	4b54      	ldr	r3, [pc, #336]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000be0:	69da      	ldr	r2, [r3, #28]
 8000be2:	4b54      	ldr	r3, [pc, #336]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	4413      	add	r3, r2
 8000be8:	4a51      	ldr	r2, [pc, #324]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000bea:	61d3      	str	r3, [r2, #28]
    index[NOTE_Gs] += 	active[NOTE_Gs];
 8000bec:	4b50      	ldr	r3, [pc, #320]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000bee:	6a1a      	ldr	r2, [r3, #32]
 8000bf0:	4b50      	ldr	r3, [pc, #320]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000bf2:	6a1b      	ldr	r3, [r3, #32]
 8000bf4:	4413      	add	r3, r2
 8000bf6:	4a4e      	ldr	r2, [pc, #312]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000bf8:	6213      	str	r3, [r2, #32]
    index[NOTE_A] += 	active[NOTE_A];
 8000bfa:	4b4d      	ldr	r3, [pc, #308]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000bfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bfe:	4b4d      	ldr	r3, [pc, #308]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c02:	4413      	add	r3, r2
 8000c04:	4a4a      	ldr	r2, [pc, #296]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c06:	6253      	str	r3, [r2, #36]	; 0x24
    index[NOTE_As] += 	active[NOTE_As];
 8000c08:	4b49      	ldr	r3, [pc, #292]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c0c:	4b49      	ldr	r3, [pc, #292]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c10:	4413      	add	r3, r2
 8000c12:	4a47      	ldr	r2, [pc, #284]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c14:	6293      	str	r3, [r2, #40]	; 0x28
    index[NOTE_B] += 	active[NOTE_B];
 8000c16:	4b46      	ldr	r3, [pc, #280]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c1a:	4b46      	ldr	r3, [pc, #280]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a43      	ldr	r2, [pc, #268]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c22:	62d3      	str	r3, [r2, #44]	; 0x2c

    
	  wave_out = C_val+Cs_val+Ds_val+D_val+E_val+F_val+Fs_val+G_val+Gs_val+A_val+As_val+B_val; // Calculate the Sum of the wave
 8000c24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c28:	441a      	add	r2, r3
 8000c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c2c:	441a      	add	r2, r3
 8000c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c30:	441a      	add	r2, r3
 8000c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c34:	441a      	add	r2, r3
 8000c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c38:	441a      	add	r2, r3
 8000c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c3c:	441a      	add	r2, r3
 8000c3e:	6a3b      	ldr	r3, [r7, #32]
 8000c40:	441a      	add	r2, r3
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	441a      	add	r2, r3
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	441a      	add	r2, r3
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	441a      	add	r2, r3
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a39      	ldr	r2, [pc, #228]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000c54:	6013      	str	r3, [r2, #0]
	  int temp_wave = wave_out * 12/4; // This is for debugging purposes. Also 12/4 is to create the new offset for only using 4 notes
 8000c56:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
	  
    HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_L , temp_wave); // Output the wave
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2204      	movs	r2, #4
 8000c66:	2110      	movs	r1, #16
 8000c68:	4834      	ldr	r0, [pc, #208]	; (8000d3c <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000c6a:	f000 fc5f 	bl	800152c <HAL_DAC_SetValue>
    /****************************************************************
    This final batch of Code is to handle the reseting of each index.
    
    *********************************************************************/
	  if(index[NOTE_C] > C_SAMPLES) index[NOTE_C] =0;
 8000c6e:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000c76:	db02      	blt.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0x272>
 8000c78:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
	  if(index[NOTE_Cs] > Cs_SAMPLES) index[NOTE_Cs] =0;
 8000c7e:	4b2c      	ldr	r3, [pc, #176]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f5b3 7fb5 	cmp.w	r3, #362	; 0x16a
 8000c86:	db02      	blt.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0x282>
 8000c88:	4b29      	ldr	r3, [pc, #164]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
	  if(index[NOTE_D] > D_SAMPLES) index[NOTE_D] =0;
 8000c8e:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8000c96:	db02      	blt.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x292>
 8000c98:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
	  if(index[NOTE_Ds] > Ds_SAMPLES) index[NOTE_Ds] =0;
 8000c9e:	4b24      	ldr	r3, [pc, #144]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000ca6:	dd02      	ble.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x2a2>
 8000ca8:	4b21      	ldr	r3, [pc, #132]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
    if(index[NOTE_E] > E_SAMPLES) index[NOTE_E] =0;
 8000cae:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000cb6:	dd02      	ble.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x2b2>
 8000cb8:	4b1d      	ldr	r3, [pc, #116]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
    if(index[NOTE_F] > F_SAMPLES) index[NOTE_F] =0;
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8000cc6:	db02      	blt.n	8000cce <HAL_TIM_PeriodElapsedCallback+0x2c2>
 8000cc8:	4b19      	ldr	r3, [pc, #100]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	615a      	str	r2, [r3, #20]
    if(index[NOTE_Fs] > Fs_SAMPLES) index[NOTE_Fs] =0;
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8000cd6:	db02      	blt.n	8000cde <HAL_TIM_PeriodElapsedCallback+0x2d2>
 8000cd8:	4b15      	ldr	r3, [pc, #84]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
    if(index[NOTE_G] > G_SAMPLES) index[NOTE_G] =0;
 8000cde:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ce6:	dd02      	ble.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x2e2>
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
    if(index[NOTE_Gs] > Gs_SAMPLES) index[NOTE_Gs] =0;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cf0:	6a1b      	ldr	r3, [r3, #32]
 8000cf2:	2bf1      	cmp	r3, #241	; 0xf1
 8000cf4:	dd02      	ble.n	8000cfc <HAL_TIM_PeriodElapsedCallback+0x2f0>
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
    if(index[NOTE_A] > A_SAMPLES) index[NOTE_A] =0;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d00:	2be4      	cmp	r3, #228	; 0xe4
 8000d02:	dd02      	ble.n	8000d0a <HAL_TIM_PeriodElapsedCallback+0x2fe>
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
    if(index[NOTE_As] > As_SAMPLES) index[NOTE_As] =0;
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0e:	2bd7      	cmp	r3, #215	; 0xd7
 8000d10:	dd02      	ble.n	8000d18 <HAL_TIM_PeriodElapsedCallback+0x30c>
 8000d12:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	629a      	str	r2, [r3, #40]	; 0x28
    if(index[NOTE_B] > B_SAMPLES) index[NOTE_B] =0;
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1c:	2bcb      	cmp	r3, #203	; 0xcb
 8000d1e:	dd02      	ble.n	8000d26 <HAL_TIM_PeriodElapsedCallback+0x31a>
 8000d20:	4b03      	ldr	r3, [pc, #12]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	62da      	str	r2, [r3, #44]	; 0x2c

  }
}
 8000d26:	bf00      	nop
 8000d28:	3740      	adds	r7, #64	; 0x40
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000140 	.word	0x20000140
 8000d34:	20000000 	.word	0x20000000
 8000d38:	20000170 	.word	0x20000170
 8000d3c:	20000058 	.word	0x20000058

08000d40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d44:	b672      	cpsid	i
}
 8000d46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <Error_Handler+0x8>
	...

08000d4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	4b0f      	ldr	r3, [pc, #60]	; (8000d90 <HAL_MspInit+0x44>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d56:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <HAL_MspInit+0x44>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_MspInit+0x44>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <HAL_MspInit+0x44>)
 8000d6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6e:	4a08      	ldr	r2, [pc, #32]	; (8000d90 <HAL_MspInit+0x44>)
 8000d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d74:	6593      	str	r3, [r2, #88]	; 0x58
 8000d76:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_MspInit+0x44>)
 8000d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a19      	ldr	r2, [pc, #100]	; (8000e18 <HAL_DAC_MspInit+0x84>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d12c      	bne.n	8000e10 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <HAL_DAC_MspInit+0x88>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <HAL_DAC_MspInit+0x88>)
 8000dbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000dc2:	4b16      	ldr	r3, [pc, #88]	; (8000e1c <HAL_DAC_MspInit+0x88>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <HAL_DAC_MspInit+0x88>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a12      	ldr	r2, [pc, #72]	; (8000e1c <HAL_DAC_MspInit+0x88>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_DAC_MspInit+0x88>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000de6:	2330      	movs	r3, #48	; 0x30
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dea:	2303      	movs	r3, #3
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f000 fcf6 	bl	80017ec <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	2036      	movs	r0, #54	; 0x36
 8000e06:	f000 fa92 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e0a:	2036      	movs	r0, #54	; 0x36
 8000e0c:	f000 faab 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000e10:	bf00      	nop
 8000e12:	3728      	adds	r7, #40	; 0x28
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40007400 	.word	0x40007400
 8000e1c:	40021000 	.word	0x40021000

08000e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <HAL_TIM_Base_MspInit+0x44>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d113      	bne.n	8000e5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000e32:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_TIM_Base_MspInit+0x48>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e36:	4a0c      	ldr	r2, [pc, #48]	; (8000e68 <HAL_TIM_Base_MspInit+0x48>)
 8000e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_TIM_Base_MspInit+0x48>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2018      	movs	r0, #24
 8000e50:	f000 fa6d 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000e54:	2018      	movs	r0, #24
 8000e56:	f000 fa86 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40014000 	.word	0x40014000
 8000e68:	40021000 	.word	0x40021000

08000e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0ac      	sub	sp, #176	; 0xb0
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2288      	movs	r2, #136	; 0x88
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fb40 	bl	8004512 <memset>
  if(huart->Instance==USART2)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <HAL_UART_MspInit+0xb0>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d13b      	bne.n	8000f14 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 fcc5 	bl	8002838 <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eb4:	f7ff ff44 	bl	8000d40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb8:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_UART_MspInit+0xb4>)
 8000eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebc:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <HAL_UART_MspInit+0xb4>)
 8000ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_UART_MspInit+0xb4>)
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_UART_MspInit+0xb4>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed4:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <HAL_UART_MspInit+0xb4>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_UART_MspInit+0xb4>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ee8:	230c      	movs	r3, #12
 8000eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f00:	2307      	movs	r3, #7
 8000f02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f10:	f000 fc6c 	bl	80017ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f14:	bf00      	nop
 8000f16:	37b0      	adds	r7, #176	; 0xb0
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	40021000 	.word	0x40021000

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f28:	e7fe      	b.n	8000f28 <NMI_Handler+0x4>

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f70:	f000 f8be 	bl	80010f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8000f7e:	f002 f9df 	bl	8003340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	2000006c 	.word	0x2000006c

08000f8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_11_Pin);
 8000f90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f94:	f000 fdd4 	bl	8001b40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_12_Pin);
 8000f98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f9c:	f000 fdd0 	bl	8001b40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000fa0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fa4:	f000 fdcc 	bl	8001b40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <TIM6_DAC_IRQHandler+0x10>)
 8000fb2:	f000 fa61 	bl	8001478 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000058 	.word	0x20000058

08000fc0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <Reset_Handler>:
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800101c <LoopForever+0x2>
 8000fe8:	f7ff ffea 	bl	8000fc0 <SystemInit>
 8000fec:	480c      	ldr	r0, [pc, #48]	; (8001020 <LoopForever+0x6>)
 8000fee:	490d      	ldr	r1, [pc, #52]	; (8001024 <LoopForever+0xa>)
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <LoopForever+0xe>)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:
 8000ff6:	58d4      	ldr	r4, [r2, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:
 8000ffc:	18c4      	adds	r4, r0, r3
 8000ffe:	428c      	cmp	r4, r1
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
 8001002:	4a0a      	ldr	r2, [pc, #40]	; (800102c <LoopForever+0x12>)
 8001004:	4c0a      	ldr	r4, [pc, #40]	; (8001030 <LoopForever+0x16>)
 8001006:	2300      	movs	r3, #0
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:
 800100e:	42a2      	cmp	r2, r4
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>
 8001012:	f003 fa87 	bl	8004524 <__libc_init_array>
 8001016:	f7ff fa55 	bl	80004c4 <main>

0800101a <LoopForever>:
 800101a:	e7fe      	b.n	800101a <LoopForever>
 800101c:	20018000 	.word	0x20018000
 8001020:	20000000 	.word	0x20000000
 8001024:	2000003c 	.word	0x2000003c
 8001028:	08007b2c 	.word	0x08007b2c
 800102c:	2000003c 	.word	0x2000003c
 8001030:	20000178 	.word	0x20000178

08001034 <ADC1_2_IRQHandler>:
 8001034:	e7fe      	b.n	8001034 <ADC1_2_IRQHandler>
	...

08001038 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800103e:	2300      	movs	r3, #0
 8001040:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <HAL_Init+0x3c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <HAL_Init+0x3c>)
 8001048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104e:	2003      	movs	r0, #3
 8001050:	f000 f962 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001054:	2000      	movs	r0, #0
 8001056:	f000 f80f 	bl	8001078 <HAL_InitTick>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	e001      	b.n	800106a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001066:	f7ff fe71 	bl	8000d4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800106a:	79fb      	ldrb	r3, [r7, #7]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40022000 	.word	0x40022000

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001080:	2300      	movs	r3, #0
 8001082:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_InitTick+0x6c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d023      	beq.n	80010d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <HAL_InitTick+0x70>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_InitTick+0x6c>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f96d 	bl	8001382 <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d10f      	bne.n	80010ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d809      	bhi.n	80010c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f000 f937 	bl	800132e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <HAL_InitTick+0x74>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e007      	b.n	80010d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	e004      	b.n	80010d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	73fb      	strb	r3, [r7, #15]
 80010d2:	e001      	b.n	80010d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000038 	.word	0x20000038
 80010e8:	20000030 	.word	0x20000030
 80010ec:	20000034 	.word	0x20000034

080010f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_IncTick+0x20>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x24>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	4a04      	ldr	r2, [pc, #16]	; (8001114 <HAL_IncTick+0x24>)
 8001102:	6013      	str	r3, [r2, #0]
}
 8001104:	bf00      	nop
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	20000038 	.word	0x20000038
 8001114:	20000174 	.word	0x20000174

08001118 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  return uwTick;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_GetTick+0x14>)
 800111e:	681b      	ldr	r3, [r3, #0]
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000174 	.word	0x20000174

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff ffee 	bl	8001118 <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_Delay+0x44>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffde 	bl	8001118 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000038 	.word	0x20000038

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db0b      	blt.n	8001206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 021f 	and.w	r2, r3, #31
 80011f4:	4907      	ldr	r1, [pc, #28]	; (8001214 <__NVIC_EnableIRQ+0x38>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	; (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e4:	d301      	bcc.n	80012ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00f      	b.n	800130a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <SysTick_Config+0x40>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f2:	210f      	movs	r1, #15
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f7ff ff8e 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <SysTick_Config+0x40>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <SysTick_Config+0x40>)
 8001304:	2207      	movs	r2, #7
 8001306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	e000e010 	.word	0xe000e010

08001318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff29 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff3e 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff8e 	bl	800126c <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5d 	bl	8001218 <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff31 	bl	80011dc <__NVIC_EnableIRQ>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff ffa2 	bl	80012d4 <SysTick_Config>
 8001390:	4603      	mov	r3, r0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e014      	b.n	80013d6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	791b      	ldrb	r3, [r3, #4]
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d105      	bne.n	80013c2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff fce9 	bl	8000d94 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2202      	movs	r2, #2
 80013c6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	795b      	ldrb	r3, [r3, #5]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d101      	bne.n	80013f4 <HAL_DAC_Start+0x16>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e03b      	b.n	800146c <HAL_DAC_Start+0x8e>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2202      	movs	r2, #2
 80013fe:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6819      	ldr	r1, [r3, #0]
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	2201      	movs	r2, #1
 800140e:	409a      	lsls	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10f      	bne.n	800143e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001428:	2b04      	cmp	r3, #4
 800142a:	d118      	bne.n	800145e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 0201 	orr.w	r2, r2, #1
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	e00f      	b.n	800145e <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001448:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800144c:	d107      	bne.n	800145e <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0202 	orr.w	r2, r2, #2
 800145c:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800148a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800148e:	d120      	bne.n	80014d2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800149a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800149e:	d118      	bne.n	80014d2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2204      	movs	r2, #4
 80014a4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	f043 0201 	orr.w	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014ca:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f000 f852 	bl	8001576 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014e0:	d120      	bne.n	8001524 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014f0:	d118      	bne.n	8001524 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2204      	movs	r2, #4
 80014f6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	f043 0202 	orr.w	r2, r3, #2
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800150c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800151c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f95a 	bl	80017d8 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800152c:	b480      	push	{r7}
 800152e:	b087      	sub	sp, #28
 8001530:	af00      	add	r7, sp, #0
 8001532:	60f8      	str	r0, [r7, #12]
 8001534:	60b9      	str	r1, [r7, #8]
 8001536:	607a      	str	r2, [r7, #4]
 8001538:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d105      	bne.n	8001556 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4413      	add	r3, r2
 8001550:	3308      	adds	r3, #8
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	e004      	b.n	8001560 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4413      	add	r3, r2
 800155c:	3314      	adds	r3, #20
 800155e:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	461a      	mov	r2, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	371c      	adds	r7, #28
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b088      	sub	sp, #32
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	795b      	ldrb	r3, [r3, #5]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d101      	bne.n	80015a6 <HAL_DAC_ConfigChannel+0x1c>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e114      	b.n	80017d0 <HAL_DAC_ConfigChannel+0x246>
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2201      	movs	r2, #1
 80015aa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2202      	movs	r2, #2
 80015b0:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b04      	cmp	r3, #4
 80015b8:	f040 8081 	bne.w	80016be <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80015bc:	f7ff fdac 	bl	8001118 <HAL_GetTick>
 80015c0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d140      	bne.n	800164a <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80015c8:	e018      	b.n	80015fc <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80015ca:	f7ff fda5 	bl	8001118 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d911      	bls.n	80015fc <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00a      	beq.n	80015fc <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	f043 0208 	orr.w	r2, r3, #8
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2203      	movs	r2, #3
 80015f6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e0e9      	b.n	80017d0 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1df      	bne.n	80015ca <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800160a:	2001      	movs	r0, #1
 800160c:	f7ff fd90 	bl	8001130 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	6992      	ldr	r2, [r2, #24]
 8001618:	641a      	str	r2, [r3, #64]	; 0x40
 800161a:	e023      	b.n	8001664 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800161c:	f7ff fd7c 	bl	8001118 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b01      	cmp	r3, #1
 8001628:	d90f      	bls.n	800164a <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001630:	2b00      	cmp	r3, #0
 8001632:	da0a      	bge.n	800164a <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	f043 0208 	orr.w	r2, r3, #8
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2203      	movs	r2, #3
 8001644:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e0c2      	b.n	80017d0 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001650:	2b00      	cmp	r3, #0
 8001652:	dbe3      	blt.n	800161c <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001654:	2001      	movs	r0, #1
 8001656:	f7ff fd6b 	bl	8001130 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	6992      	ldr	r2, [r2, #24]
 8001662:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001674:	fa01 f303 	lsl.w	r3, r1, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	ea02 0103 	and.w	r1, r2, r3
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	69da      	ldr	r2, [r3, #28]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	409a      	lsls	r2, r3
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	21ff      	movs	r1, #255	; 0xff
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	ea02 0103 	and.w	r1, r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	6a1a      	ldr	r2, [r3, #32]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f003 0310 	and.w	r3, r3, #16
 80016b4:	409a      	lsls	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d11d      	bne.n	8001702 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016cc:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f003 0310 	and.w	r3, r3, #16
 80016d4:	221f      	movs	r2, #31
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001708:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	2207      	movs	r2, #7
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	431a      	orrs	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	4313      	orrs	r3, r2
 800172e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6819      	ldr	r1, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	43da      	mvns	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	400a      	ands	r2, r1
 8001766:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	f640 72fc 	movw	r2, #4092	; 0xffc
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6819      	ldr	r1, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f003 0310 	and.w	r3, r3, #16
 80017b2:	22c0      	movs	r2, #192	; 0xc0
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43da      	mvns	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	400a      	ands	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2201      	movs	r2, #1
 80017c6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3720      	adds	r7, #32
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fa:	e17f      	b.n	8001afc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	2101      	movs	r1, #1
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	4013      	ands	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8171 	beq.w	8001af6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d005      	beq.n	800182c <HAL_GPIO_Init+0x40>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d130      	bne.n	800188e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001862:	2201      	movs	r2, #1
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	091b      	lsrs	r3, r3, #4
 8001878:	f003 0201 	and.w	r2, r3, #1
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	2b03      	cmp	r3, #3
 8001898:	d118      	bne.n	80018cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018a0:	2201      	movs	r2, #1
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	08db      	lsrs	r3, r3, #3
 80018b6:	f003 0201 	and.w	r2, r3, #1
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d017      	beq.n	8001908 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d123      	bne.n	800195c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	08da      	lsrs	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3208      	adds	r2, #8
 800191c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f003 0307 	and.w	r3, r3, #7
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	220f      	movs	r2, #15
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4013      	ands	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	08da      	lsrs	r2, r3, #3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3208      	adds	r2, #8
 8001956:	6939      	ldr	r1, [r7, #16]
 8001958:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	2203      	movs	r2, #3
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	4013      	ands	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 0203 	and.w	r2, r3, #3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 80ac 	beq.w	8001af6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	4b5f      	ldr	r3, [pc, #380]	; (8001b1c <HAL_GPIO_Init+0x330>)
 80019a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a2:	4a5e      	ldr	r2, [pc, #376]	; (8001b1c <HAL_GPIO_Init+0x330>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6613      	str	r3, [r2, #96]	; 0x60
 80019aa:	4b5c      	ldr	r3, [pc, #368]	; (8001b1c <HAL_GPIO_Init+0x330>)
 80019ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019b6:	4a5a      	ldr	r2, [pc, #360]	; (8001b20 <HAL_GPIO_Init+0x334>)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	089b      	lsrs	r3, r3, #2
 80019bc:	3302      	adds	r3, #2
 80019be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	220f      	movs	r2, #15
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019e0:	d025      	beq.n	8001a2e <HAL_GPIO_Init+0x242>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a4f      	ldr	r2, [pc, #316]	; (8001b24 <HAL_GPIO_Init+0x338>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d01f      	beq.n	8001a2a <HAL_GPIO_Init+0x23e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a4e      	ldr	r2, [pc, #312]	; (8001b28 <HAL_GPIO_Init+0x33c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d019      	beq.n	8001a26 <HAL_GPIO_Init+0x23a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a4d      	ldr	r2, [pc, #308]	; (8001b2c <HAL_GPIO_Init+0x340>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d013      	beq.n	8001a22 <HAL_GPIO_Init+0x236>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a4c      	ldr	r2, [pc, #304]	; (8001b30 <HAL_GPIO_Init+0x344>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d00d      	beq.n	8001a1e <HAL_GPIO_Init+0x232>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4b      	ldr	r2, [pc, #300]	; (8001b34 <HAL_GPIO_Init+0x348>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d007      	beq.n	8001a1a <HAL_GPIO_Init+0x22e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4a      	ldr	r2, [pc, #296]	; (8001b38 <HAL_GPIO_Init+0x34c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d101      	bne.n	8001a16 <HAL_GPIO_Init+0x22a>
 8001a12:	2306      	movs	r3, #6
 8001a14:	e00c      	b.n	8001a30 <HAL_GPIO_Init+0x244>
 8001a16:	2307      	movs	r3, #7
 8001a18:	e00a      	b.n	8001a30 <HAL_GPIO_Init+0x244>
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	e008      	b.n	8001a30 <HAL_GPIO_Init+0x244>
 8001a1e:	2304      	movs	r3, #4
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x244>
 8001a22:	2303      	movs	r3, #3
 8001a24:	e004      	b.n	8001a30 <HAL_GPIO_Init+0x244>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e002      	b.n	8001a30 <HAL_GPIO_Init+0x244>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_GPIO_Init+0x244>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	f002 0203 	and.w	r2, r2, #3
 8001a36:	0092      	lsls	r2, r2, #2
 8001a38:	4093      	lsls	r3, r2
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a40:	4937      	ldr	r1, [pc, #220]	; (8001b20 <HAL_GPIO_Init+0x334>)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	089b      	lsrs	r3, r3, #2
 8001a46:	3302      	adds	r3, #2
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <HAL_GPIO_Init+0x350>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a72:	4a32      	ldr	r2, [pc, #200]	; (8001b3c <HAL_GPIO_Init+0x350>)
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a78:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <HAL_GPIO_Init+0x350>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d003      	beq.n	8001a9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a9c:	4a27      	ldr	r2, [pc, #156]	; (8001b3c <HAL_GPIO_Init+0x350>)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001aa2:	4b26      	ldr	r3, [pc, #152]	; (8001b3c <HAL_GPIO_Init+0x350>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ac6:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_GPIO_Init+0x350>)
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_GPIO_Init+0x350>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d003      	beq.n	8001af0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001af0:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <HAL_GPIO_Init+0x350>)
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	3301      	adds	r3, #1
 8001afa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f47f ae78 	bne.w	80017fc <HAL_GPIO_Init+0x10>
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	371c      	adds	r7, #28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40010000 	.word	0x40010000
 8001b24:	48000400 	.word	0x48000400
 8001b28:	48000800 	.word	0x48000800
 8001b2c:	48000c00 	.word	0x48000c00
 8001b30:	48001000 	.word	0x48001000
 8001b34:	48001400 	.word	0x48001400
 8001b38:	48001800 	.word	0x48001800
 8001b3c:	40010400 	.word	0x40010400

08001b40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d006      	beq.n	8001b64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fe4c 	bl	80007fc <HAL_GPIO_EXTI_Callback>
  }
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40010400 	.word	0x40010400

08001b70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40007000 	.word	0x40007000

08001b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b9a:	d130      	bne.n	8001bfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b9c:	4b23      	ldr	r3, [pc, #140]	; (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba8:	d038      	beq.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bb2:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2232      	movs	r2, #50	; 0x32
 8001bc0:	fb02 f303 	mul.w	r3, r2, r3
 8001bc4:	4a1b      	ldr	r2, [pc, #108]	; (8001c34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	0c9b      	lsrs	r3, r3, #18
 8001bcc:	3301      	adds	r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd0:	e002      	b.n	8001bd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001be4:	d102      	bne.n	8001bec <HAL_PWREx_ControlVoltageScaling+0x60>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d1f2      	bne.n	8001bd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf8:	d110      	bne.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e00f      	b.n	8001c1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c0a:	d007      	beq.n	8001c1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c0c:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c14:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	20000030 	.word	0x20000030
 8001c34:	431bde83 	.word	0x431bde83

08001c38 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e3ca      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4a:	4b97      	ldr	r3, [pc, #604]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c54:	4b94      	ldr	r3, [pc, #592]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80e4 	beq.w	8001e34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d007      	beq.n	8001c82 <HAL_RCC_OscConfig+0x4a>
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b0c      	cmp	r3, #12
 8001c76:	f040 808b 	bne.w	8001d90 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	f040 8087 	bne.w	8001d90 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c82:	4b89      	ldr	r3, [pc, #548]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d005      	beq.n	8001c9a <HAL_RCC_OscConfig+0x62>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e3a2      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1a      	ldr	r2, [r3, #32]
 8001c9e:	4b82      	ldr	r3, [pc, #520]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d004      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x7c>
 8001caa:	4b7f      	ldr	r3, [pc, #508]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb2:	e005      	b.n	8001cc0 <HAL_RCC_OscConfig+0x88>
 8001cb4:	4b7c      	ldr	r3, [pc, #496]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d223      	bcs.n	8001d0c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f000 fd55 	bl	8002778 <RCC_SetFlashLatencyFromMSIRange>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e383      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd8:	4b73      	ldr	r3, [pc, #460]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a72      	ldr	r2, [pc, #456]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001cde:	f043 0308 	orr.w	r3, r3, #8
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b70      	ldr	r3, [pc, #448]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	496d      	ldr	r1, [pc, #436]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf6:	4b6c      	ldr	r3, [pc, #432]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	4968      	ldr	r1, [pc, #416]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
 8001d0a:	e025      	b.n	8001d58 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d0c:	4b66      	ldr	r3, [pc, #408]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a65      	ldr	r2, [pc, #404]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	6013      	str	r3, [r2, #0]
 8001d18:	4b63      	ldr	r3, [pc, #396]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	4960      	ldr	r1, [pc, #384]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d2a:	4b5f      	ldr	r3, [pc, #380]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	495b      	ldr	r1, [pc, #364]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d109      	bne.n	8001d58 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f000 fd15 	bl	8002778 <RCC_SetFlashLatencyFromMSIRange>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e343      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d58:	f000 fc4a 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	4b52      	ldr	r3, [pc, #328]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	091b      	lsrs	r3, r3, #4
 8001d64:	f003 030f 	and.w	r3, r3, #15
 8001d68:	4950      	ldr	r1, [pc, #320]	; (8001eac <HAL_RCC_OscConfig+0x274>)
 8001d6a:	5ccb      	ldrb	r3, [r1, r3]
 8001d6c:	f003 031f 	and.w	r3, r3, #31
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
 8001d74:	4a4e      	ldr	r2, [pc, #312]	; (8001eb0 <HAL_RCC_OscConfig+0x278>)
 8001d76:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d78:	4b4e      	ldr	r3, [pc, #312]	; (8001eb4 <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff f97b 	bl	8001078 <HAL_InitTick>
 8001d82:	4603      	mov	r3, r0
 8001d84:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d052      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
 8001d8e:	e327      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d032      	beq.n	8001dfe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d98:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a42      	ldr	r2, [pc, #264]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001da4:	f7ff f9b8 	bl	8001118 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dac:	f7ff f9b4 	bl	8001118 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e310      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dca:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a36      	ldr	r2, [pc, #216]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	4931      	ldr	r1, [pc, #196]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de8:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	492c      	ldr	r1, [pc, #176]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
 8001dfc:	e01a      	b.n	8001e34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a29      	ldr	r2, [pc, #164]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e0a:	f7ff f985 	bl	8001118 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e12:	f7ff f981 	bl	8001118 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e2dd      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e24:	4b20      	ldr	r3, [pc, #128]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_RCC_OscConfig+0x1da>
 8001e30:	e000      	b.n	8001e34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d074      	beq.n	8001f2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d005      	beq.n	8001e52 <HAL_RCC_OscConfig+0x21a>
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b0c      	cmp	r3, #12
 8001e4a:	d10e      	bne.n	8001e6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d10b      	bne.n	8001e6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d064      	beq.n	8001f28 <HAL_RCC_OscConfig+0x2f0>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d160      	bne.n	8001f28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e2ba      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e72:	d106      	bne.n	8001e82 <HAL_RCC_OscConfig+0x24a>
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0b      	ldr	r2, [pc, #44]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	e026      	b.n	8001ed0 <HAL_RCC_OscConfig+0x298>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e8a:	d115      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x280>
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a05      	ldr	r2, [pc, #20]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a02      	ldr	r2, [pc, #8]	; (8001ea8 <HAL_RCC_OscConfig+0x270>)
 8001e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	e014      	b.n	8001ed0 <HAL_RCC_OscConfig+0x298>
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	08007ad4 	.word	0x08007ad4
 8001eb0:	20000030 	.word	0x20000030
 8001eb4:	20000034 	.word	0x20000034
 8001eb8:	4ba0      	ldr	r3, [pc, #640]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a9f      	ldr	r2, [pc, #636]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b9d      	ldr	r3, [pc, #628]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a9c      	ldr	r2, [pc, #624]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f91e 	bl	8001118 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff f91a 	bl	8001118 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e276      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef2:	4b92      	ldr	r3, [pc, #584]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x2a8>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff f90a 	bl	8001118 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff f906 	bl	8001118 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e262      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1a:	4b88      	ldr	r3, [pc, #544]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x2d0>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d060      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_OscConfig+0x310>
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	2b0c      	cmp	r3, #12
 8001f40:	d119      	bne.n	8001f76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d116      	bne.n	8001f76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f48:	4b7c      	ldr	r3, [pc, #496]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_OscConfig+0x328>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e23f      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f60:	4b76      	ldr	r3, [pc, #472]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	061b      	lsls	r3, r3, #24
 8001f6e:	4973      	ldr	r1, [pc, #460]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f74:	e040      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d023      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7e:	4b6f      	ldr	r3, [pc, #444]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a6e      	ldr	r2, [pc, #440]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8a:	f7ff f8c5 	bl	8001118 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f92:	f7ff f8c1 	bl	8001118 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e21d      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fa4:	4b65      	ldr	r3, [pc, #404]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0f0      	beq.n	8001f92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb0:	4b62      	ldr	r3, [pc, #392]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	061b      	lsls	r3, r3, #24
 8001fbe:	495f      	ldr	r1, [pc, #380]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
 8001fc4:	e018      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc6:	4b5d      	ldr	r3, [pc, #372]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a5c      	ldr	r2, [pc, #368]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7ff f8a1 	bl	8001118 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fda:	f7ff f89d 	bl	8001118 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e1f9      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fec:	4b53      	ldr	r3, [pc, #332]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f0      	bne.n	8001fda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	2b00      	cmp	r3, #0
 8002002:	d03c      	beq.n	800207e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d01c      	beq.n	8002046 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200c:	4b4b      	ldr	r3, [pc, #300]	; (800213c <HAL_RCC_OscConfig+0x504>)
 800200e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002012:	4a4a      	ldr	r2, [pc, #296]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7ff f87c 	bl	8001118 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002024:	f7ff f878 	bl	8001118 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1d4      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002036:	4b41      	ldr	r3, [pc, #260]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8002038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0ef      	beq.n	8002024 <HAL_RCC_OscConfig+0x3ec>
 8002044:	e01b      	b.n	800207e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002046:	4b3d      	ldr	r3, [pc, #244]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8002048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204c:	4a3b      	ldr	r2, [pc, #236]	; (800213c <HAL_RCC_OscConfig+0x504>)
 800204e:	f023 0301 	bic.w	r3, r3, #1
 8002052:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002056:	f7ff f85f 	bl	8001118 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800205e:	f7ff f85b 	bl	8001118 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e1b7      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002070:	4b32      	ldr	r3, [pc, #200]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8002072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1ef      	bne.n	800205e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 80a6 	beq.w	80021d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10d      	bne.n	80020b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <HAL_RCC_OscConfig+0x504>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	4a26      	ldr	r2, [pc, #152]	; (800213c <HAL_RCC_OscConfig+0x504>)
 80020a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a6:	6593      	str	r3, [r2, #88]	; 0x58
 80020a8:	4b24      	ldr	r3, [pc, #144]	; (800213c <HAL_RCC_OscConfig+0x504>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b4:	2301      	movs	r3, #1
 80020b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b8:	4b21      	ldr	r3, [pc, #132]	; (8002140 <HAL_RCC_OscConfig+0x508>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d118      	bne.n	80020f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c4:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <HAL_RCC_OscConfig+0x508>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <HAL_RCC_OscConfig+0x508>)
 80020ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d0:	f7ff f822 	bl	8001118 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d8:	f7ff f81e 	bl	8001118 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e17a      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ea:	4b15      	ldr	r3, [pc, #84]	; (8002140 <HAL_RCC_OscConfig+0x508>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d108      	bne.n	8002110 <HAL_RCC_OscConfig+0x4d8>
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002104:	4a0d      	ldr	r2, [pc, #52]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800210e:	e029      	b.n	8002164 <HAL_RCC_OscConfig+0x52c>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	2b05      	cmp	r3, #5
 8002116:	d115      	bne.n	8002144 <HAL_RCC_OscConfig+0x50c>
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_RCC_OscConfig+0x504>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	4a07      	ldr	r2, [pc, #28]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8002120:	f043 0304 	orr.w	r3, r3, #4
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <HAL_RCC_OscConfig+0x504>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	4a03      	ldr	r2, [pc, #12]	; (800213c <HAL_RCC_OscConfig+0x504>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002138:	e014      	b.n	8002164 <HAL_RCC_OscConfig+0x52c>
 800213a:	bf00      	nop
 800213c:	40021000 	.word	0x40021000
 8002140:	40007000 	.word	0x40007000
 8002144:	4b9c      	ldr	r3, [pc, #624]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214a:	4a9b      	ldr	r2, [pc, #620]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 800214c:	f023 0301 	bic.w	r3, r3, #1
 8002150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002154:	4b98      	ldr	r3, [pc, #608]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215a:	4a97      	ldr	r2, [pc, #604]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 800215c:	f023 0304 	bic.w	r3, r3, #4
 8002160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d016      	beq.n	800219a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7fe ffd4 	bl	8001118 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002172:	e00a      	b.n	800218a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002174:	f7fe ffd0 	bl	8001118 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e12a      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218a:	4b8b      	ldr	r3, [pc, #556]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 800218c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0ed      	beq.n	8002174 <HAL_RCC_OscConfig+0x53c>
 8002198:	e015      	b.n	80021c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219a:	f7fe ffbd 	bl	8001118 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021a0:	e00a      	b.n	80021b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7fe ffb9 	bl	8001118 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e113      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b8:	4b7f      	ldr	r3, [pc, #508]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ed      	bne.n	80021a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021c6:	7ffb      	ldrb	r3, [r7, #31]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d105      	bne.n	80021d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021cc:	4b7a      	ldr	r3, [pc, #488]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	4a79      	ldr	r2, [pc, #484]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 80021d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80fe 	beq.w	80023de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	f040 80d0 	bne.w	800238c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021ec:	4b72      	ldr	r3, [pc, #456]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0203 	and.w	r2, r3, #3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d130      	bne.n	8002262 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	3b01      	subs	r3, #1
 800220c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d127      	bne.n	8002262 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800221c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d11f      	bne.n	8002262 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800222c:	2a07      	cmp	r2, #7
 800222e:	bf14      	ite	ne
 8002230:	2201      	movne	r2, #1
 8002232:	2200      	moveq	r2, #0
 8002234:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002236:	4293      	cmp	r3, r2
 8002238:	d113      	bne.n	8002262 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002244:	085b      	lsrs	r3, r3, #1
 8002246:	3b01      	subs	r3, #1
 8002248:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d109      	bne.n	8002262 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	085b      	lsrs	r3, r3, #1
 800225a:	3b01      	subs	r3, #1
 800225c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d06e      	beq.n	8002340 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	2b0c      	cmp	r3, #12
 8002266:	d069      	beq.n	800233c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002268:	4b53      	ldr	r3, [pc, #332]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d105      	bne.n	8002280 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002274:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0ad      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002284:	4b4c      	ldr	r3, [pc, #304]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a4b      	ldr	r2, [pc, #300]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 800228a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800228e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002290:	f7fe ff42 	bl	8001118 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe ff3e 	bl	8001118 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e09a      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022aa:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022b6:	4b40      	ldr	r3, [pc, #256]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	4b40      	ldr	r3, [pc, #256]	; (80023bc <HAL_RCC_OscConfig+0x784>)
 80022bc:	4013      	ands	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022c6:	3a01      	subs	r2, #1
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	4311      	orrs	r1, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022d0:	0212      	lsls	r2, r2, #8
 80022d2:	4311      	orrs	r1, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022d8:	0852      	lsrs	r2, r2, #1
 80022da:	3a01      	subs	r2, #1
 80022dc:	0552      	lsls	r2, r2, #21
 80022de:	4311      	orrs	r1, r2
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022e4:	0852      	lsrs	r2, r2, #1
 80022e6:	3a01      	subs	r2, #1
 80022e8:	0652      	lsls	r2, r2, #25
 80022ea:	4311      	orrs	r1, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022f0:	0912      	lsrs	r2, r2, #4
 80022f2:	0452      	lsls	r2, r2, #17
 80022f4:	430a      	orrs	r2, r1
 80022f6:	4930      	ldr	r1, [pc, #192]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022fc:	4b2e      	ldr	r3, [pc, #184]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a2d      	ldr	r2, [pc, #180]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002306:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002308:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	4a2a      	ldr	r2, [pc, #168]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 800230e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002312:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002314:	f7fe ff00 	bl	8001118 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7fe fefc 	bl	8001118 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e058      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800233a:	e050      	b.n	80023de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e04f      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002340:	4b1d      	ldr	r3, [pc, #116]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d148      	bne.n	80023de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800234c:	4b1a      	ldr	r3, [pc, #104]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a19      	ldr	r2, [pc, #100]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002352:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002356:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002358:	4b17      	ldr	r3, [pc, #92]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 800235e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002362:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002364:	f7fe fed8 	bl	8001118 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7fe fed4 	bl	8001118 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e030      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237e:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x734>
 800238a:	e028      	b.n	80023de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	2b0c      	cmp	r3, #12
 8002390:	d023      	beq.n	80023da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <HAL_RCC_OscConfig+0x780>)
 8002398:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800239c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239e:	f7fe febb 	bl	8001118 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a4:	e00c      	b.n	80023c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a6:	f7fe feb7 	bl	8001118 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d905      	bls.n	80023c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e013      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
 80023b8:	40021000 	.word	0x40021000
 80023bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_RCC_OscConfig+0x7b0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1ec      	bne.n	80023a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <HAL_RCC_OscConfig+0x7b0>)
 80023ce:	68da      	ldr	r2, [r3, #12]
 80023d0:	4905      	ldr	r1, [pc, #20]	; (80023e8 <HAL_RCC_OscConfig+0x7b0>)
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_OscConfig+0x7b4>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	60cb      	str	r3, [r1, #12]
 80023d8:	e001      	b.n	80023de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3720      	adds	r7, #32
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40021000 	.word	0x40021000
 80023ec:	feeefffc 	.word	0xfeeefffc

080023f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0e7      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002404:	4b75      	ldr	r3, [pc, #468]	; (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d910      	bls.n	8002434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b72      	ldr	r3, [pc, #456]	; (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 0207 	bic.w	r2, r3, #7
 800241a:	4970      	ldr	r1, [pc, #448]	; (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b6e      	ldr	r3, [pc, #440]	; (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0cf      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d010      	beq.n	8002462 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	4b66      	ldr	r3, [pc, #408]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800244c:	429a      	cmp	r2, r3
 800244e:	d908      	bls.n	8002462 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b63      	ldr	r3, [pc, #396]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4960      	ldr	r1, [pc, #384]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d04c      	beq.n	8002508 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b03      	cmp	r3, #3
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002476:	4b5a      	ldr	r3, [pc, #360]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d121      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0a6      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d107      	bne.n	800249e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800248e:	4b54      	ldr	r3, [pc, #336]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d115      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e09a      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d107      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024a6:	4b4e      	ldr	r3, [pc, #312]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d109      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e08e      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024b6:	4b4a      	ldr	r3, [pc, #296]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e086      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c6:	4b46      	ldr	r3, [pc, #280]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f023 0203 	bic.w	r2, r3, #3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	4943      	ldr	r1, [pc, #268]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d8:	f7fe fe1e 	bl	8001118 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024de:	e00a      	b.n	80024f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e0:	f7fe fe1a 	bl	8001118 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e06e      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f6:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 020c 	and.w	r2, r3, #12
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	429a      	cmp	r2, r3
 8002506:	d1eb      	bne.n	80024e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d010      	beq.n	8002536 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002520:	429a      	cmp	r2, r3
 8002522:	d208      	bcs.n	8002536 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002524:	4b2e      	ldr	r3, [pc, #184]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	492b      	ldr	r1, [pc, #172]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002536:	4b29      	ldr	r3, [pc, #164]	; (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d210      	bcs.n	8002566 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002544:	4b25      	ldr	r3, [pc, #148]	; (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 0207 	bic.w	r2, r3, #7
 800254c:	4923      	ldr	r1, [pc, #140]	; (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002554:	4b21      	ldr	r3, [pc, #132]	; (80025dc <HAL_RCC_ClockConfig+0x1ec>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d001      	beq.n	8002566 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e036      	b.n	80025d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002572:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	4918      	ldr	r1, [pc, #96]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002580:	4313      	orrs	r3, r2
 8002582:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d009      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002590:	4b13      	ldr	r3, [pc, #76]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4910      	ldr	r1, [pc, #64]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025a4:	f000 f824 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <HAL_RCC_ClockConfig+0x1f0>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	f003 030f 	and.w	r3, r3, #15
 80025b4:	490b      	ldr	r1, [pc, #44]	; (80025e4 <HAL_RCC_ClockConfig+0x1f4>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
 80025c0:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <HAL_RCC_ClockConfig+0x1f8>)
 80025c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025c4:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_RCC_ClockConfig+0x1fc>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe fd55 	bl	8001078 <HAL_InitTick>
 80025ce:	4603      	mov	r3, r0
 80025d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80025d2:	7afb      	ldrb	r3, [r7, #11]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40022000 	.word	0x40022000
 80025e0:	40021000 	.word	0x40021000
 80025e4:	08007ad4 	.word	0x08007ad4
 80025e8:	20000030 	.word	0x20000030
 80025ec:	20000034 	.word	0x20000034

080025f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025fe:	4b3e      	ldr	r3, [pc, #248]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002608:	4b3b      	ldr	r3, [pc, #236]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0x34>
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d121      	bne.n	8002662 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d11e      	bne.n	8002662 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002624:	4b34      	ldr	r3, [pc, #208]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d107      	bne.n	8002640 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002630:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	e005      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002640:	4b2d      	ldr	r3, [pc, #180]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800264c:	4a2b      	ldr	r2, [pc, #172]	; (80026fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002654:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10d      	bne.n	8002678 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002660:	e00a      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	2b04      	cmp	r3, #4
 8002666:	d102      	bne.n	800266e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002668:	4b25      	ldr	r3, [pc, #148]	; (8002700 <HAL_RCC_GetSysClockFreq+0x110>)
 800266a:	61bb      	str	r3, [r7, #24]
 800266c:	e004      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d101      	bne.n	8002678 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002674:	4b23      	ldr	r3, [pc, #140]	; (8002704 <HAL_RCC_GetSysClockFreq+0x114>)
 8002676:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	2b0c      	cmp	r3, #12
 800267c:	d134      	bne.n	80026e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800267e:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d003      	beq.n	8002696 <HAL_RCC_GetSysClockFreq+0xa6>
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	2b03      	cmp	r3, #3
 8002692:	d003      	beq.n	800269c <HAL_RCC_GetSysClockFreq+0xac>
 8002694:	e005      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002696:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <HAL_RCC_GetSysClockFreq+0x110>)
 8002698:	617b      	str	r3, [r7, #20]
      break;
 800269a:	e005      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800269c:	4b19      	ldr	r3, [pc, #100]	; (8002704 <HAL_RCC_GetSysClockFreq+0x114>)
 800269e:	617b      	str	r3, [r7, #20]
      break;
 80026a0:	e002      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	617b      	str	r3, [r7, #20]
      break;
 80026a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a8:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	3301      	adds	r3, #1
 80026b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	fb03 f202 	mul.w	r2, r3, r2
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	0e5b      	lsrs	r3, r3, #25
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	3301      	adds	r3, #1
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026e8:	69bb      	ldr	r3, [r7, #24]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	08007aec 	.word	0x08007aec
 8002700:	00f42400 	.word	0x00f42400
 8002704:	007a1200 	.word	0x007a1200

08002708 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_RCC_GetHCLKFreq+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000030 	.word	0x20000030

08002720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002724:	f7ff fff0 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002728:	4602      	mov	r2, r0
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <HAL_RCC_GetPCLK1Freq+0x24>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4904      	ldr	r1, [pc, #16]	; (8002748 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002736:	5ccb      	ldrb	r3, [r1, r3]
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000
 8002748:	08007ae4 	.word	0x08007ae4

0800274c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002750:	f7ff ffda 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002754:	4602      	mov	r2, r0
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	0adb      	lsrs	r3, r3, #11
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	4904      	ldr	r1, [pc, #16]	; (8002774 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002762:	5ccb      	ldrb	r3, [r1, r3]
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	fa22 f303 	lsr.w	r3, r2, r3
}
 800276c:	4618      	mov	r0, r3
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000
 8002774:	08007ae4 	.word	0x08007ae4

08002778 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002780:	2300      	movs	r3, #0
 8002782:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002784:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002790:	f7ff f9ee 	bl	8001b70 <HAL_PWREx_GetVoltageRange>
 8002794:	6178      	str	r0, [r7, #20]
 8002796:	e014      	b.n	80027c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002798:	4b25      	ldr	r3, [pc, #148]	; (8002830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279c:	4a24      	ldr	r2, [pc, #144]	; (8002830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800279e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a2:	6593      	str	r3, [r2, #88]	; 0x58
 80027a4:	4b22      	ldr	r3, [pc, #136]	; (8002830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027b0:	f7ff f9de 	bl	8001b70 <HAL_PWREx_GetVoltageRange>
 80027b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027b6:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	4a1d      	ldr	r2, [pc, #116]	; (8002830 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c8:	d10b      	bne.n	80027e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b80      	cmp	r3, #128	; 0x80
 80027ce:	d919      	bls.n	8002804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2ba0      	cmp	r3, #160	; 0xa0
 80027d4:	d902      	bls.n	80027dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027d6:	2302      	movs	r3, #2
 80027d8:	613b      	str	r3, [r7, #16]
 80027da:	e013      	b.n	8002804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027dc:	2301      	movs	r3, #1
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	e010      	b.n	8002804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b80      	cmp	r3, #128	; 0x80
 80027e6:	d902      	bls.n	80027ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027e8:	2303      	movs	r3, #3
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	e00a      	b.n	8002804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b80      	cmp	r3, #128	; 0x80
 80027f2:	d102      	bne.n	80027fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027f4:	2302      	movs	r3, #2
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	e004      	b.n	8002804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b70      	cmp	r3, #112	; 0x70
 80027fe:	d101      	bne.n	8002804 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002800:	2301      	movs	r3, #1
 8002802:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 0207 	bic.w	r2, r3, #7
 800280c:	4909      	ldr	r1, [pc, #36]	; (8002834 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002814:	4b07      	ldr	r3, [pc, #28]	; (8002834 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	429a      	cmp	r2, r3
 8002820:	d001      	beq.n	8002826 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	40022000 	.word	0x40022000

08002838 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b086      	sub	sp, #24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002840:	2300      	movs	r3, #0
 8002842:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002844:	2300      	movs	r3, #0
 8002846:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002850:	2b00      	cmp	r3, #0
 8002852:	d041      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002858:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800285c:	d02a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800285e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002862:	d824      	bhi.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002864:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002868:	d008      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800286a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800286e:	d81e      	bhi.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002878:	d010      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800287a:	e018      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800287c:	4b86      	ldr	r3, [pc, #536]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	4a85      	ldr	r2, [pc, #532]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002886:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002888:	e015      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3304      	adds	r3, #4
 800288e:	2100      	movs	r1, #0
 8002890:	4618      	mov	r0, r3
 8002892:	f000 fabb 	bl	8002e0c <RCCEx_PLLSAI1_Config>
 8002896:	4603      	mov	r3, r0
 8002898:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800289a:	e00c      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3320      	adds	r3, #32
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fba6 	bl	8002ff4 <RCCEx_PLLSAI2_Config>
 80028a8:	4603      	mov	r3, r0
 80028aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028ac:	e003      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	74fb      	strb	r3, [r7, #19]
      break;
 80028b2:	e000      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028b6:	7cfb      	ldrb	r3, [r7, #19]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028bc:	4b76      	ldr	r3, [pc, #472]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ca:	4973      	ldr	r1, [pc, #460]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028d2:	e001      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d041      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028ec:	d02a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80028ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028f2:	d824      	bhi.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80028f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028f8:	d008      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80028fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028fe:	d81e      	bhi.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002908:	d010      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800290a:	e018      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800290c:	4b62      	ldr	r3, [pc, #392]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a61      	ldr	r2, [pc, #388]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002916:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002918:	e015      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3304      	adds	r3, #4
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fa73 	bl	8002e0c <RCCEx_PLLSAI1_Config>
 8002926:	4603      	mov	r3, r0
 8002928:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800292a:	e00c      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3320      	adds	r3, #32
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fb5e 	bl	8002ff4 <RCCEx_PLLSAI2_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800293c:	e003      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	74fb      	strb	r3, [r7, #19]
      break;
 8002942:	e000      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002946:	7cfb      	ldrb	r3, [r7, #19]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10b      	bne.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800294c:	4b52      	ldr	r3, [pc, #328]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800295a:	494f      	ldr	r1, [pc, #316]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002962:	e001      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80a0 	beq.w	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800298a:	2300      	movs	r3, #0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00d      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002990:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	4a40      	ldr	r2, [pc, #256]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299a:	6593      	str	r3, [r2, #88]	; 0x58
 800299c:	4b3e      	ldr	r3, [pc, #248]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a8:	2301      	movs	r3, #1
 80029aa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ac:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a3a      	ldr	r2, [pc, #232]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029b8:	f7fe fbae 	bl	8001118 <HAL_GetTick>
 80029bc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029be:	e009      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c0:	f7fe fbaa 	bl	8001118 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d902      	bls.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	74fb      	strb	r3, [r7, #19]
        break;
 80029d2:	e005      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029d4:	4b31      	ldr	r3, [pc, #196]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ef      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80029e0:	7cfb      	ldrb	r3, [r7, #19]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d15c      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029e6:	4b2c      	ldr	r3, [pc, #176]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01f      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d019      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a04:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a10:	4b21      	ldr	r3, [pc, #132]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	4a20      	ldr	r2, [pc, #128]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a20:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	4a1c      	ldr	r2, [pc, #112]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a30:	4a19      	ldr	r2, [pc, #100]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d016      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7fe fb69 	bl	8001118 <HAL_GetTick>
 8002a46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a48:	e00b      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4a:	f7fe fb65 	bl	8001118 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d902      	bls.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	74fb      	strb	r3, [r7, #19]
            break;
 8002a60:	e006      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0ec      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a86:	4904      	ldr	r1, [pc, #16]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a8e:	e009      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a90:	7cfb      	ldrb	r3, [r7, #19]
 8002a92:	74bb      	strb	r3, [r7, #18]
 8002a94:	e006      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa0:	7cfb      	ldrb	r3, [r7, #19]
 8002aa2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa4:	7c7b      	ldrb	r3, [r7, #17]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d105      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aaa:	4b9e      	ldr	r3, [pc, #632]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	4a9d      	ldr	r2, [pc, #628]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ac2:	4b98      	ldr	r3, [pc, #608]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac8:	f023 0203 	bic.w	r2, r3, #3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad0:	4994      	ldr	r1, [pc, #592]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ae4:	4b8f      	ldr	r3, [pc, #572]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	f023 020c 	bic.w	r2, r3, #12
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	498c      	ldr	r1, [pc, #560]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00a      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b06:	4b87      	ldr	r3, [pc, #540]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b14:	4983      	ldr	r1, [pc, #524]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00a      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b28:	4b7e      	ldr	r3, [pc, #504]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	497b      	ldr	r1, [pc, #492]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00a      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b4a:	4b76      	ldr	r3, [pc, #472]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	4972      	ldr	r1, [pc, #456]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00a      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b6c:	4b6d      	ldr	r3, [pc, #436]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7a:	496a      	ldr	r1, [pc, #424]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00a      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b8e:	4b65      	ldr	r3, [pc, #404]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b9c:	4961      	ldr	r1, [pc, #388]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bb0:	4b5c      	ldr	r3, [pc, #368]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bbe:	4959      	ldr	r1, [pc, #356]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bd2:	4b54      	ldr	r3, [pc, #336]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be0:	4950      	ldr	r1, [pc, #320]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bf4:	4b4b      	ldr	r3, [pc, #300]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c02:	4948      	ldr	r1, [pc, #288]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c16:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	493f      	ldr	r1, [pc, #252]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d028      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c38:	4b3a      	ldr	r3, [pc, #232]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c46:	4937      	ldr	r1, [pc, #220]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c56:	d106      	bne.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c58:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a31      	ldr	r2, [pc, #196]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c62:	60d3      	str	r3, [r2, #12]
 8002c64:	e011      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c6e:	d10c      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3304      	adds	r3, #4
 8002c74:	2101      	movs	r1, #1
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 f8c8 	bl	8002e0c <RCCEx_PLLSAI1_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c86:	7cfb      	ldrb	r3, [r7, #19]
 8002c88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d028      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c96:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	491f      	ldr	r1, [pc, #124]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cb4:	d106      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	4a1a      	ldr	r2, [pc, #104]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cc0:	60d3      	str	r3, [r2, #12]
 8002cc2:	e011      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ccc:	d10c      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f000 f899 	bl	8002e0c <RCCEx_PLLSAI1_Config>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cde:	7cfb      	ldrb	r3, [r7, #19]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ce4:	7cfb      	ldrb	r3, [r7, #19]
 8002ce6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d02b      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d02:	4908      	ldr	r1, [pc, #32]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d12:	d109      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d14:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	4a02      	ldr	r2, [pc, #8]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d1e:	60d3      	str	r3, [r2, #12]
 8002d20:	e014      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3304      	adds	r3, #4
 8002d36:	2101      	movs	r1, #1
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 f867 	bl	8002e0c <RCCEx_PLLSAI1_Config>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d42:	7cfb      	ldrb	r3, [r7, #19]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d02f      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d58:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d66:	4928      	ldr	r1, [pc, #160]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d76:	d10d      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3304      	adds	r3, #4
 8002d7c:	2102      	movs	r1, #2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f000 f844 	bl	8002e0c <RCCEx_PLLSAI1_Config>
 8002d84:	4603      	mov	r3, r0
 8002d86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d014      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d8e:	7cfb      	ldrb	r3, [r7, #19]
 8002d90:	74bb      	strb	r3, [r7, #18]
 8002d92:	e011      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d9c:	d10c      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	3320      	adds	r3, #32
 8002da2:	2102      	movs	r1, #2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f000 f925 	bl	8002ff4 <RCCEx_PLLSAI2_Config>
 8002daa:	4603      	mov	r3, r0
 8002dac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dae:	7cfb      	ldrb	r3, [r7, #19]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002db4:	7cfb      	ldrb	r3, [r7, #19]
 8002db6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dc4:	4b10      	ldr	r3, [pc, #64]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd2:	490d      	ldr	r1, [pc, #52]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002df6:	4904      	ldr	r1, [pc, #16]	; (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002dfe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000

08002e0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e1a:	4b75      	ldr	r3, [pc, #468]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d018      	beq.n	8002e58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e26:	4b72      	ldr	r3, [pc, #456]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f003 0203 	and.w	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d10d      	bne.n	8002e52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
       ||
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d009      	beq.n	8002e52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e3e:	4b6c      	ldr	r3, [pc, #432]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d047      	beq.n	8002ee2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	73fb      	strb	r3, [r7, #15]
 8002e56:	e044      	b.n	8002ee2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d018      	beq.n	8002e92 <RCCEx_PLLSAI1_Config+0x86>
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d825      	bhi.n	8002eb0 <RCCEx_PLLSAI1_Config+0xa4>
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d002      	beq.n	8002e6e <RCCEx_PLLSAI1_Config+0x62>
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d009      	beq.n	8002e80 <RCCEx_PLLSAI1_Config+0x74>
 8002e6c:	e020      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e6e:	4b60      	ldr	r3, [pc, #384]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d11d      	bne.n	8002eb6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e7e:	e01a      	b.n	8002eb6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e80:	4b5b      	ldr	r3, [pc, #364]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d116      	bne.n	8002eba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e90:	e013      	b.n	8002eba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e92:	4b57      	ldr	r3, [pc, #348]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d10f      	bne.n	8002ebe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e9e:	4b54      	ldr	r3, [pc, #336]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eae:	e006      	b.n	8002ebe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb4:	e004      	b.n	8002ec0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eb6:	bf00      	nop
 8002eb8:	e002      	b.n	8002ec0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e000      	b.n	8002ec0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ebe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10d      	bne.n	8002ee2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ec6:	4b4a      	ldr	r3, [pc, #296]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6819      	ldr	r1, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	430b      	orrs	r3, r1
 8002edc:	4944      	ldr	r1, [pc, #272]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d17d      	bne.n	8002fe4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ee8:	4b41      	ldr	r3, [pc, #260]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a40      	ldr	r2, [pc, #256]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ef2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef4:	f7fe f910 	bl	8001118 <HAL_GetTick>
 8002ef8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002efa:	e009      	b.n	8002f10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002efc:	f7fe f90c 	bl	8001118 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d902      	bls.n	8002f10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f0e:	e005      	b.n	8002f1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f10:	4b37      	ldr	r3, [pc, #220]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ef      	bne.n	8002efc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d160      	bne.n	8002fe4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d111      	bne.n	8002f4c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f28:	4b31      	ldr	r3, [pc, #196]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6892      	ldr	r2, [r2, #8]
 8002f38:	0211      	lsls	r1, r2, #8
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68d2      	ldr	r2, [r2, #12]
 8002f3e:	0912      	lsrs	r2, r2, #4
 8002f40:	0452      	lsls	r2, r2, #17
 8002f42:	430a      	orrs	r2, r1
 8002f44:	492a      	ldr	r1, [pc, #168]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	610b      	str	r3, [r1, #16]
 8002f4a:	e027      	b.n	8002f9c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d112      	bne.n	8002f78 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f52:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6892      	ldr	r2, [r2, #8]
 8002f62:	0211      	lsls	r1, r2, #8
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6912      	ldr	r2, [r2, #16]
 8002f68:	0852      	lsrs	r2, r2, #1
 8002f6a:	3a01      	subs	r2, #1
 8002f6c:	0552      	lsls	r2, r2, #21
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	491f      	ldr	r1, [pc, #124]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	610b      	str	r3, [r1, #16]
 8002f76:	e011      	b.n	8002f9c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f78:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6892      	ldr	r2, [r2, #8]
 8002f88:	0211      	lsls	r1, r2, #8
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6952      	ldr	r2, [r2, #20]
 8002f8e:	0852      	lsrs	r2, r2, #1
 8002f90:	3a01      	subs	r2, #1
 8002f92:	0652      	lsls	r2, r2, #25
 8002f94:	430a      	orrs	r2, r1
 8002f96:	4916      	ldr	r1, [pc, #88]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f9c:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fa6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fa8:	f7fe f8b6 	bl	8001118 <HAL_GetTick>
 8002fac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fae:	e009      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fb0:	f7fe f8b2 	bl	8001118 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d902      	bls.n	8002fc4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	73fb      	strb	r3, [r7, #15]
          break;
 8002fc2:	e005      	b.n	8002fd0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fc4:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0ef      	beq.n	8002fb0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	4904      	ldr	r1, [pc, #16]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ffe:	2300      	movs	r3, #0
 8003000:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003002:	4b6a      	ldr	r3, [pc, #424]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f003 0303 	and.w	r3, r3, #3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d018      	beq.n	8003040 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800300e:	4b67      	ldr	r3, [pc, #412]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f003 0203 	and.w	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d10d      	bne.n	800303a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
       ||
 8003022:	2b00      	cmp	r3, #0
 8003024:	d009      	beq.n	800303a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003026:	4b61      	ldr	r3, [pc, #388]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	091b      	lsrs	r3, r3, #4
 800302c:	f003 0307 	and.w	r3, r3, #7
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
       ||
 8003036:	429a      	cmp	r2, r3
 8003038:	d047      	beq.n	80030ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	e044      	b.n	80030ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b03      	cmp	r3, #3
 8003046:	d018      	beq.n	800307a <RCCEx_PLLSAI2_Config+0x86>
 8003048:	2b03      	cmp	r3, #3
 800304a:	d825      	bhi.n	8003098 <RCCEx_PLLSAI2_Config+0xa4>
 800304c:	2b01      	cmp	r3, #1
 800304e:	d002      	beq.n	8003056 <RCCEx_PLLSAI2_Config+0x62>
 8003050:	2b02      	cmp	r3, #2
 8003052:	d009      	beq.n	8003068 <RCCEx_PLLSAI2_Config+0x74>
 8003054:	e020      	b.n	8003098 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003056:	4b55      	ldr	r3, [pc, #340]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d11d      	bne.n	800309e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003066:	e01a      	b.n	800309e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003068:	4b50      	ldr	r3, [pc, #320]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d116      	bne.n	80030a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003078:	e013      	b.n	80030a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800307a:	4b4c      	ldr	r3, [pc, #304]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10f      	bne.n	80030a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003086:	4b49      	ldr	r3, [pc, #292]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003096:	e006      	b.n	80030a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	73fb      	strb	r3, [r7, #15]
      break;
 800309c:	e004      	b.n	80030a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800309e:	bf00      	nop
 80030a0:	e002      	b.n	80030a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030a2:	bf00      	nop
 80030a4:	e000      	b.n	80030a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10d      	bne.n	80030ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030ae:	4b3f      	ldr	r3, [pc, #252]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6819      	ldr	r1, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	3b01      	subs	r3, #1
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	430b      	orrs	r3, r1
 80030c4:	4939      	ldr	r1, [pc, #228]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d167      	bne.n	80031a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030d0:	4b36      	ldr	r3, [pc, #216]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a35      	ldr	r2, [pc, #212]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030dc:	f7fe f81c 	bl	8001118 <HAL_GetTick>
 80030e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030e2:	e009      	b.n	80030f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030e4:	f7fe f818 	bl	8001118 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d902      	bls.n	80030f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	73fb      	strb	r3, [r7, #15]
        break;
 80030f6:	e005      	b.n	8003104 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80030f8:	4b2c      	ldr	r3, [pc, #176]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ef      	bne.n	80030e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d14a      	bne.n	80031a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d111      	bne.n	8003134 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003110:	4b26      	ldr	r3, [pc, #152]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6892      	ldr	r2, [r2, #8]
 8003120:	0211      	lsls	r1, r2, #8
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	68d2      	ldr	r2, [r2, #12]
 8003126:	0912      	lsrs	r2, r2, #4
 8003128:	0452      	lsls	r2, r2, #17
 800312a:	430a      	orrs	r2, r1
 800312c:	491f      	ldr	r1, [pc, #124]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800312e:	4313      	orrs	r3, r2
 8003130:	614b      	str	r3, [r1, #20]
 8003132:	e011      	b.n	8003158 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003134:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800313c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6892      	ldr	r2, [r2, #8]
 8003144:	0211      	lsls	r1, r2, #8
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6912      	ldr	r2, [r2, #16]
 800314a:	0852      	lsrs	r2, r2, #1
 800314c:	3a01      	subs	r2, #1
 800314e:	0652      	lsls	r2, r2, #25
 8003150:	430a      	orrs	r2, r1
 8003152:	4916      	ldr	r1, [pc, #88]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003154:	4313      	orrs	r3, r2
 8003156:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003158:	4b14      	ldr	r3, [pc, #80]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a13      	ldr	r2, [pc, #76]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800315e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003162:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003164:	f7fd ffd8 	bl	8001118 <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800316a:	e009      	b.n	8003180 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800316c:	f7fd ffd4 	bl	8001118 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d902      	bls.n	8003180 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	73fb      	strb	r3, [r7, #15]
          break;
 800317e:	e005      	b.n	800318c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0ef      	beq.n	800316c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	4904      	ldr	r1, [pc, #16]	; (80031ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800319c:	4313      	orrs	r3, r2
 800319e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000

080031b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e049      	b.n	8003256 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d106      	bne.n	80031dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7fd fe22 	bl	8000e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2202      	movs	r2, #2
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3304      	adds	r3, #4
 80031ec:	4619      	mov	r1, r3
 80031ee:	4610      	mov	r0, r2
 80031f0:	f000 fa9a 	bl	8003728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
	...

08003260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d001      	beq.n	8003278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e04f      	b.n	8003318 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a23      	ldr	r2, [pc, #140]	; (8003324 <HAL_TIM_Base_Start_IT+0xc4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01d      	beq.n	80032d6 <HAL_TIM_Base_Start_IT+0x76>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a2:	d018      	beq.n	80032d6 <HAL_TIM_Base_Start_IT+0x76>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <HAL_TIM_Base_Start_IT+0xc8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d013      	beq.n	80032d6 <HAL_TIM_Base_Start_IT+0x76>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a1e      	ldr	r2, [pc, #120]	; (800332c <HAL_TIM_Base_Start_IT+0xcc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00e      	beq.n	80032d6 <HAL_TIM_Base_Start_IT+0x76>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <HAL_TIM_Base_Start_IT+0xd0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d009      	beq.n	80032d6 <HAL_TIM_Base_Start_IT+0x76>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <HAL_TIM_Base_Start_IT+0xd4>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d004      	beq.n	80032d6 <HAL_TIM_Base_Start_IT+0x76>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a19      	ldr	r2, [pc, #100]	; (8003338 <HAL_TIM_Base_Start_IT+0xd8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d115      	bne.n	8003302 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689a      	ldr	r2, [r3, #8]
 80032dc:	4b17      	ldr	r3, [pc, #92]	; (800333c <HAL_TIM_Base_Start_IT+0xdc>)
 80032de:	4013      	ands	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b06      	cmp	r3, #6
 80032e6:	d015      	beq.n	8003314 <HAL_TIM_Base_Start_IT+0xb4>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ee:	d011      	beq.n	8003314 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003300:	e008      	b.n	8003314 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f042 0201 	orr.w	r2, r2, #1
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	e000      	b.n	8003316 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003314:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40012c00 	.word	0x40012c00
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40013400 	.word	0x40013400
 8003338:	40014000 	.word	0x40014000
 800333c:	00010007 	.word	0x00010007

08003340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d020      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01b      	beq.n	80033a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0202 	mvn.w	r2, #2
 8003374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2201      	movs	r2, #1
 800337a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f9ad 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 8003390:	e005      	b.n	800339e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f99f 	bl	80036d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f000 f9b0 	bl	80036fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d020      	beq.n	80033f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d01b      	beq.n	80033f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f06f 0204 	mvn.w	r2, #4
 80033c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2202      	movs	r2, #2
 80033c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f987 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 80033dc:	e005      	b.n	80033ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 f979 	bl	80036d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f98a 	bl	80036fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d020      	beq.n	800343c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01b      	beq.n	800343c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f06f 0208 	mvn.w	r2, #8
 800340c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2204      	movs	r2, #4
 8003412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	f003 0303 	and.w	r3, r3, #3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f961 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 8003428:	e005      	b.n	8003436 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f953 	bl	80036d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 f964 	bl	80036fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b00      	cmp	r3, #0
 8003444:	d020      	beq.n	8003488 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01b      	beq.n	8003488 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0210 	mvn.w	r2, #16
 8003458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2208      	movs	r2, #8
 800345e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f93b 	bl	80036ea <HAL_TIM_IC_CaptureCallback>
 8003474:	e005      	b.n	8003482 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f92d 	bl	80036d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f93e 	bl	80036fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00c      	beq.n	80034ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d007      	beq.n	80034ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0201 	mvn.w	r2, #1
 80034a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7fd fab0 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00c      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d007      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 faf2 	bl	8003ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80034ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 faea 	bl	8003ac8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00c      	beq.n	8003518 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f8fd 	bl	8003712 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00c      	beq.n	800353c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0220 	mvn.w	r2, #32
 8003534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fab2 	bl	8003aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800353c:	bf00      	nop
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_TIM_ConfigClockSource+0x1c>
 800355c:	2302      	movs	r3, #2
 800355e:	e0b6      	b.n	80036ce <HAL_TIM_ConfigClockSource+0x18a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800358a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800359c:	d03e      	beq.n	800361c <HAL_TIM_ConfigClockSource+0xd8>
 800359e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a2:	f200 8087 	bhi.w	80036b4 <HAL_TIM_ConfigClockSource+0x170>
 80035a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035aa:	f000 8086 	beq.w	80036ba <HAL_TIM_ConfigClockSource+0x176>
 80035ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b2:	d87f      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x170>
 80035b4:	2b70      	cmp	r3, #112	; 0x70
 80035b6:	d01a      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0xaa>
 80035b8:	2b70      	cmp	r3, #112	; 0x70
 80035ba:	d87b      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x170>
 80035bc:	2b60      	cmp	r3, #96	; 0x60
 80035be:	d050      	beq.n	8003662 <HAL_TIM_ConfigClockSource+0x11e>
 80035c0:	2b60      	cmp	r3, #96	; 0x60
 80035c2:	d877      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x170>
 80035c4:	2b50      	cmp	r3, #80	; 0x50
 80035c6:	d03c      	beq.n	8003642 <HAL_TIM_ConfigClockSource+0xfe>
 80035c8:	2b50      	cmp	r3, #80	; 0x50
 80035ca:	d873      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x170>
 80035cc:	2b40      	cmp	r3, #64	; 0x40
 80035ce:	d058      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0x13e>
 80035d0:	2b40      	cmp	r3, #64	; 0x40
 80035d2:	d86f      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x170>
 80035d4:	2b30      	cmp	r3, #48	; 0x30
 80035d6:	d064      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x15e>
 80035d8:	2b30      	cmp	r3, #48	; 0x30
 80035da:	d86b      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x170>
 80035dc:	2b20      	cmp	r3, #32
 80035de:	d060      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x15e>
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d867      	bhi.n	80036b4 <HAL_TIM_ConfigClockSource+0x170>
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d05c      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x15e>
 80035e8:	2b10      	cmp	r3, #16
 80035ea:	d05a      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x15e>
 80035ec:	e062      	b.n	80036b4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035fe:	f000 f9a7 	bl	8003950 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003610:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	609a      	str	r2, [r3, #8]
      break;
 800361a:	e04f      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800362c:	f000 f990 	bl	8003950 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800363e:	609a      	str	r2, [r3, #8]
      break;
 8003640:	e03c      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800364e:	461a      	mov	r2, r3
 8003650:	f000 f904 	bl	800385c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2150      	movs	r1, #80	; 0x50
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f95d 	bl	800391a <TIM_ITRx_SetConfig>
      break;
 8003660:	e02c      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800366e:	461a      	mov	r2, r3
 8003670:	f000 f923 	bl	80038ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2160      	movs	r1, #96	; 0x60
 800367a:	4618      	mov	r0, r3
 800367c:	f000 f94d 	bl	800391a <TIM_ITRx_SetConfig>
      break;
 8003680:	e01c      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800368e:	461a      	mov	r2, r3
 8003690:	f000 f8e4 	bl	800385c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2140      	movs	r1, #64	; 0x40
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f93d 	bl	800391a <TIM_ITRx_SetConfig>
      break;
 80036a0:	e00c      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4619      	mov	r1, r3
 80036ac:	4610      	mov	r0, r2
 80036ae:	f000 f934 	bl	800391a <TIM_ITRx_SetConfig>
      break;
 80036b2:	e003      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
      break;
 80036b8:	e000      	b.n	80036bc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80036ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr

080036ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80036ea:	b480      	push	{r7}
 80036ec:	b083      	sub	sp, #12
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003728:	b480      	push	{r7}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a40      	ldr	r2, [pc, #256]	; (800383c <TIM_Base_SetConfig+0x114>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d013      	beq.n	8003768 <TIM_Base_SetConfig+0x40>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003746:	d00f      	beq.n	8003768 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a3d      	ldr	r2, [pc, #244]	; (8003840 <TIM_Base_SetConfig+0x118>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d00b      	beq.n	8003768 <TIM_Base_SetConfig+0x40>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a3c      	ldr	r2, [pc, #240]	; (8003844 <TIM_Base_SetConfig+0x11c>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d007      	beq.n	8003768 <TIM_Base_SetConfig+0x40>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a3b      	ldr	r2, [pc, #236]	; (8003848 <TIM_Base_SetConfig+0x120>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d003      	beq.n	8003768 <TIM_Base_SetConfig+0x40>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a3a      	ldr	r2, [pc, #232]	; (800384c <TIM_Base_SetConfig+0x124>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d108      	bne.n	800377a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800376e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4313      	orrs	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a2f      	ldr	r2, [pc, #188]	; (800383c <TIM_Base_SetConfig+0x114>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d01f      	beq.n	80037c2 <TIM_Base_SetConfig+0x9a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003788:	d01b      	beq.n	80037c2 <TIM_Base_SetConfig+0x9a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a2c      	ldr	r2, [pc, #176]	; (8003840 <TIM_Base_SetConfig+0x118>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d017      	beq.n	80037c2 <TIM_Base_SetConfig+0x9a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a2b      	ldr	r2, [pc, #172]	; (8003844 <TIM_Base_SetConfig+0x11c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <TIM_Base_SetConfig+0x9a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a2a      	ldr	r2, [pc, #168]	; (8003848 <TIM_Base_SetConfig+0x120>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00f      	beq.n	80037c2 <TIM_Base_SetConfig+0x9a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a29      	ldr	r2, [pc, #164]	; (800384c <TIM_Base_SetConfig+0x124>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00b      	beq.n	80037c2 <TIM_Base_SetConfig+0x9a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a28      	ldr	r2, [pc, #160]	; (8003850 <TIM_Base_SetConfig+0x128>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d007      	beq.n	80037c2 <TIM_Base_SetConfig+0x9a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a27      	ldr	r2, [pc, #156]	; (8003854 <TIM_Base_SetConfig+0x12c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d003      	beq.n	80037c2 <TIM_Base_SetConfig+0x9a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a26      	ldr	r2, [pc, #152]	; (8003858 <TIM_Base_SetConfig+0x130>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d108      	bne.n	80037d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a10      	ldr	r2, [pc, #64]	; (800383c <TIM_Base_SetConfig+0x114>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00f      	beq.n	8003820 <TIM_Base_SetConfig+0xf8>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a12      	ldr	r2, [pc, #72]	; (800384c <TIM_Base_SetConfig+0x124>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00b      	beq.n	8003820 <TIM_Base_SetConfig+0xf8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a11      	ldr	r2, [pc, #68]	; (8003850 <TIM_Base_SetConfig+0x128>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <TIM_Base_SetConfig+0xf8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a10      	ldr	r2, [pc, #64]	; (8003854 <TIM_Base_SetConfig+0x12c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <TIM_Base_SetConfig+0xf8>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a0f      	ldr	r2, [pc, #60]	; (8003858 <TIM_Base_SetConfig+0x130>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d103      	bne.n	8003828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	615a      	str	r2, [r3, #20]
}
 800382e:	bf00      	nop
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40012c00 	.word	0x40012c00
 8003840:	40000400 	.word	0x40000400
 8003844:	40000800 	.word	0x40000800
 8003848:	40000c00 	.word	0x40000c00
 800384c:	40013400 	.word	0x40013400
 8003850:	40014000 	.word	0x40014000
 8003854:	40014400 	.word	0x40014400
 8003858:	40014800 	.word	0x40014800

0800385c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800385c:	b480      	push	{r7}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	f023 0201 	bic.w	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f023 030a 	bic.w	r3, r3, #10
 8003898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4313      	orrs	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	621a      	str	r2, [r3, #32]
}
 80038ae:	bf00      	nop
 80038b0:	371c      	adds	r7, #28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b087      	sub	sp, #28
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f023 0210 	bic.w	r2, r3, #16
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	031b      	lsls	r3, r3, #12
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	621a      	str	r2, [r3, #32]
}
 800390e:	bf00      	nop
 8003910:	371c      	adds	r7, #28
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800391a:	b480      	push	{r7}
 800391c:	b085      	sub	sp, #20
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003930:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	f043 0307 	orr.w	r3, r3, #7
 800393c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	609a      	str	r2, [r3, #8]
}
 8003944:	bf00      	nop
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800396a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	021a      	lsls	r2, r3, #8
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	431a      	orrs	r2, r3
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	4313      	orrs	r3, r2
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	4313      	orrs	r3, r2
 800397c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	609a      	str	r2, [r3, #8]
}
 8003984:	bf00      	nop
 8003986:	371c      	adds	r7, #28
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003990:	b480      	push	{r7}
 8003992:	b085      	sub	sp, #20
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e068      	b.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2202      	movs	r2, #2
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a2e      	ldr	r2, [pc, #184]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d004      	beq.n	80039dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a2d      	ldr	r2, [pc, #180]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d108      	bne.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1e      	ldr	r2, [pc, #120]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d01d      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1a:	d018      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1a      	ldr	r2, [pc, #104]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00e      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d009      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d10c      	bne.n	8003a68 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40012c00 	.word	0x40012c00
 8003a8c:	40013400 	.word	0x40013400
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40014000 	.word	0x40014000

08003aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d101      	bne.n	8003aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e040      	b.n	8003b70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd f9b4 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2224      	movs	r2, #36	; 0x24
 8003b08:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d002      	beq.n	8003b28 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 fae0 	bl	80040e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f825 	bl	8003b78 <UART_SetConfig>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e01b      	b.n	8003b70 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f042 0201 	orr.w	r2, r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fb5f 	bl	800422c <UART_CheckIdleState>
 8003b6e:	4603      	mov	r3, r0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3708      	adds	r7, #8
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b7c:	b08a      	sub	sp, #40	; 0x28
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	431a      	orrs	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4ba4      	ldr	r3, [pc, #656]	; (8003e38 <UART_SetConfig+0x2c0>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bb0:	430b      	orrs	r3, r1
 8003bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a99      	ldr	r2, [pc, #612]	; (8003e3c <UART_SetConfig+0x2c4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be0:	4313      	orrs	r3, r2
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a90      	ldr	r2, [pc, #576]	; (8003e40 <UART_SetConfig+0x2c8>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d126      	bne.n	8003c50 <UART_SetConfig+0xd8>
 8003c02:	4b90      	ldr	r3, [pc, #576]	; (8003e44 <UART_SetConfig+0x2cc>)
 8003c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d81b      	bhi.n	8003c48 <UART_SetConfig+0xd0>
 8003c10:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <UART_SetConfig+0xa0>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c29 	.word	0x08003c29
 8003c1c:	08003c39 	.word	0x08003c39
 8003c20:	08003c31 	.word	0x08003c31
 8003c24:	08003c41 	.word	0x08003c41
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2e:	e116      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003c30:	2302      	movs	r3, #2
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c36:	e112      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003c38:	2304      	movs	r3, #4
 8003c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3e:	e10e      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003c40:	2308      	movs	r3, #8
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c46:	e10a      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003c48:	2310      	movs	r3, #16
 8003c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4e:	e106      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a7c      	ldr	r2, [pc, #496]	; (8003e48 <UART_SetConfig+0x2d0>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d138      	bne.n	8003ccc <UART_SetConfig+0x154>
 8003c5a:	4b7a      	ldr	r3, [pc, #488]	; (8003e44 <UART_SetConfig+0x2cc>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c60:	f003 030c 	and.w	r3, r3, #12
 8003c64:	2b0c      	cmp	r3, #12
 8003c66:	d82d      	bhi.n	8003cc4 <UART_SetConfig+0x14c>
 8003c68:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <UART_SetConfig+0xf8>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003ca5 	.word	0x08003ca5
 8003c74:	08003cc5 	.word	0x08003cc5
 8003c78:	08003cc5 	.word	0x08003cc5
 8003c7c:	08003cc5 	.word	0x08003cc5
 8003c80:	08003cb5 	.word	0x08003cb5
 8003c84:	08003cc5 	.word	0x08003cc5
 8003c88:	08003cc5 	.word	0x08003cc5
 8003c8c:	08003cc5 	.word	0x08003cc5
 8003c90:	08003cad 	.word	0x08003cad
 8003c94:	08003cc5 	.word	0x08003cc5
 8003c98:	08003cc5 	.word	0x08003cc5
 8003c9c:	08003cc5 	.word	0x08003cc5
 8003ca0:	08003cbd 	.word	0x08003cbd
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003caa:	e0d8      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003cac:	2302      	movs	r3, #2
 8003cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb2:	e0d4      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cba:	e0d0      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003cbc:	2308      	movs	r3, #8
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc2:	e0cc      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003cc4:	2310      	movs	r3, #16
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cca:	e0c8      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a5e      	ldr	r2, [pc, #376]	; (8003e4c <UART_SetConfig+0x2d4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d125      	bne.n	8003d22 <UART_SetConfig+0x1aa>
 8003cd6:	4b5b      	ldr	r3, [pc, #364]	; (8003e44 <UART_SetConfig+0x2cc>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cdc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ce0:	2b30      	cmp	r3, #48	; 0x30
 8003ce2:	d016      	beq.n	8003d12 <UART_SetConfig+0x19a>
 8003ce4:	2b30      	cmp	r3, #48	; 0x30
 8003ce6:	d818      	bhi.n	8003d1a <UART_SetConfig+0x1a2>
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d00a      	beq.n	8003d02 <UART_SetConfig+0x18a>
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d814      	bhi.n	8003d1a <UART_SetConfig+0x1a2>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <UART_SetConfig+0x182>
 8003cf4:	2b10      	cmp	r3, #16
 8003cf6:	d008      	beq.n	8003d0a <UART_SetConfig+0x192>
 8003cf8:	e00f      	b.n	8003d1a <UART_SetConfig+0x1a2>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d00:	e0ad      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d02:	2302      	movs	r3, #2
 8003d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d08:	e0a9      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d0a:	2304      	movs	r3, #4
 8003d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d10:	e0a5      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d12:	2308      	movs	r3, #8
 8003d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d18:	e0a1      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d1a:	2310      	movs	r3, #16
 8003d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d20:	e09d      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a4a      	ldr	r2, [pc, #296]	; (8003e50 <UART_SetConfig+0x2d8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d125      	bne.n	8003d78 <UART_SetConfig+0x200>
 8003d2c:	4b45      	ldr	r3, [pc, #276]	; (8003e44 <UART_SetConfig+0x2cc>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d36:	2bc0      	cmp	r3, #192	; 0xc0
 8003d38:	d016      	beq.n	8003d68 <UART_SetConfig+0x1f0>
 8003d3a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d3c:	d818      	bhi.n	8003d70 <UART_SetConfig+0x1f8>
 8003d3e:	2b80      	cmp	r3, #128	; 0x80
 8003d40:	d00a      	beq.n	8003d58 <UART_SetConfig+0x1e0>
 8003d42:	2b80      	cmp	r3, #128	; 0x80
 8003d44:	d814      	bhi.n	8003d70 <UART_SetConfig+0x1f8>
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <UART_SetConfig+0x1d8>
 8003d4a:	2b40      	cmp	r3, #64	; 0x40
 8003d4c:	d008      	beq.n	8003d60 <UART_SetConfig+0x1e8>
 8003d4e:	e00f      	b.n	8003d70 <UART_SetConfig+0x1f8>
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d56:	e082      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5e:	e07e      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d60:	2304      	movs	r3, #4
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d66:	e07a      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d68:	2308      	movs	r3, #8
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6e:	e076      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d70:	2310      	movs	r3, #16
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d76:	e072      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a35      	ldr	r2, [pc, #212]	; (8003e54 <UART_SetConfig+0x2dc>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d12a      	bne.n	8003dd8 <UART_SetConfig+0x260>
 8003d82:	4b30      	ldr	r3, [pc, #192]	; (8003e44 <UART_SetConfig+0x2cc>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d90:	d01a      	beq.n	8003dc8 <UART_SetConfig+0x250>
 8003d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d96:	d81b      	bhi.n	8003dd0 <UART_SetConfig+0x258>
 8003d98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d9c:	d00c      	beq.n	8003db8 <UART_SetConfig+0x240>
 8003d9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da2:	d815      	bhi.n	8003dd0 <UART_SetConfig+0x258>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d003      	beq.n	8003db0 <UART_SetConfig+0x238>
 8003da8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dac:	d008      	beq.n	8003dc0 <UART_SetConfig+0x248>
 8003dae:	e00f      	b.n	8003dd0 <UART_SetConfig+0x258>
 8003db0:	2300      	movs	r3, #0
 8003db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db6:	e052      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003db8:	2302      	movs	r3, #2
 8003dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dbe:	e04e      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003dc0:	2304      	movs	r3, #4
 8003dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc6:	e04a      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003dc8:	2308      	movs	r3, #8
 8003dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dce:	e046      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003dd0:	2310      	movs	r3, #16
 8003dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd6:	e042      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a17      	ldr	r2, [pc, #92]	; (8003e3c <UART_SetConfig+0x2c4>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d13a      	bne.n	8003e58 <UART_SetConfig+0x2e0>
 8003de2:	4b18      	ldr	r3, [pc, #96]	; (8003e44 <UART_SetConfig+0x2cc>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df0:	d01a      	beq.n	8003e28 <UART_SetConfig+0x2b0>
 8003df2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df6:	d81b      	bhi.n	8003e30 <UART_SetConfig+0x2b8>
 8003df8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfc:	d00c      	beq.n	8003e18 <UART_SetConfig+0x2a0>
 8003dfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e02:	d815      	bhi.n	8003e30 <UART_SetConfig+0x2b8>
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <UART_SetConfig+0x298>
 8003e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e0c:	d008      	beq.n	8003e20 <UART_SetConfig+0x2a8>
 8003e0e:	e00f      	b.n	8003e30 <UART_SetConfig+0x2b8>
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e16:	e022      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e1e:	e01e      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003e20:	2304      	movs	r3, #4
 8003e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e26:	e01a      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003e28:	2308      	movs	r3, #8
 8003e2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2e:	e016      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003e30:	2310      	movs	r3, #16
 8003e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e36:	e012      	b.n	8003e5e <UART_SetConfig+0x2e6>
 8003e38:	efff69f3 	.word	0xefff69f3
 8003e3c:	40008000 	.word	0x40008000
 8003e40:	40013800 	.word	0x40013800
 8003e44:	40021000 	.word	0x40021000
 8003e48:	40004400 	.word	0x40004400
 8003e4c:	40004800 	.word	0x40004800
 8003e50:	40004c00 	.word	0x40004c00
 8003e54:	40005000 	.word	0x40005000
 8003e58:	2310      	movs	r3, #16
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a9f      	ldr	r2, [pc, #636]	; (80040e0 <UART_SetConfig+0x568>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d17a      	bne.n	8003f5e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d824      	bhi.n	8003eba <UART_SetConfig+0x342>
 8003e70:	a201      	add	r2, pc, #4	; (adr r2, 8003e78 <UART_SetConfig+0x300>)
 8003e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e76:	bf00      	nop
 8003e78:	08003e9d 	.word	0x08003e9d
 8003e7c:	08003ebb 	.word	0x08003ebb
 8003e80:	08003ea5 	.word	0x08003ea5
 8003e84:	08003ebb 	.word	0x08003ebb
 8003e88:	08003eab 	.word	0x08003eab
 8003e8c:	08003ebb 	.word	0x08003ebb
 8003e90:	08003ebb 	.word	0x08003ebb
 8003e94:	08003ebb 	.word	0x08003ebb
 8003e98:	08003eb3 	.word	0x08003eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f7fe fc40 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 8003ea0:	61f8      	str	r0, [r7, #28]
        break;
 8003ea2:	e010      	b.n	8003ec6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea4:	4b8f      	ldr	r3, [pc, #572]	; (80040e4 <UART_SetConfig+0x56c>)
 8003ea6:	61fb      	str	r3, [r7, #28]
        break;
 8003ea8:	e00d      	b.n	8003ec6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eaa:	f7fe fba1 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 8003eae:	61f8      	str	r0, [r7, #28]
        break;
 8003eb0:	e009      	b.n	8003ec6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb6:	61fb      	str	r3, [r7, #28]
        break;
 8003eb8:	e005      	b.n	8003ec6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ec4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80fb 	beq.w	80040c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	005b      	lsls	r3, r3, #1
 8003ed6:	4413      	add	r3, r2
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d305      	bcc.n	8003eea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d903      	bls.n	8003ef2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ef0:	e0e8      	b.n	80040c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	461c      	mov	r4, r3
 8003ef8:	4615      	mov	r5, r2
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	f04f 0300 	mov.w	r3, #0
 8003f02:	022b      	lsls	r3, r5, #8
 8003f04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f08:	0222      	lsls	r2, r4, #8
 8003f0a:	68f9      	ldr	r1, [r7, #12]
 8003f0c:	6849      	ldr	r1, [r1, #4]
 8003f0e:	0849      	lsrs	r1, r1, #1
 8003f10:	2000      	movs	r0, #0
 8003f12:	4688      	mov	r8, r1
 8003f14:	4681      	mov	r9, r0
 8003f16:	eb12 0a08 	adds.w	sl, r2, r8
 8003f1a:	eb43 0b09 	adc.w	fp, r3, r9
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	607a      	str	r2, [r7, #4]
 8003f28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f2c:	4650      	mov	r0, sl
 8003f2e:	4659      	mov	r1, fp
 8003f30:	f7fc f94a 	bl	80001c8 <__aeabi_uldivmod>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4613      	mov	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f42:	d308      	bcc.n	8003f56 <UART_SetConfig+0x3de>
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f4a:	d204      	bcs.n	8003f56 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	60da      	str	r2, [r3, #12]
 8003f54:	e0b6      	b.n	80040c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f5c:	e0b2      	b.n	80040c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f66:	d15e      	bne.n	8004026 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d828      	bhi.n	8003fc2 <UART_SetConfig+0x44a>
 8003f70:	a201      	add	r2, pc, #4	; (adr r2, 8003f78 <UART_SetConfig+0x400>)
 8003f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f76:	bf00      	nop
 8003f78:	08003f9d 	.word	0x08003f9d
 8003f7c:	08003fa5 	.word	0x08003fa5
 8003f80:	08003fad 	.word	0x08003fad
 8003f84:	08003fc3 	.word	0x08003fc3
 8003f88:	08003fb3 	.word	0x08003fb3
 8003f8c:	08003fc3 	.word	0x08003fc3
 8003f90:	08003fc3 	.word	0x08003fc3
 8003f94:	08003fc3 	.word	0x08003fc3
 8003f98:	08003fbb 	.word	0x08003fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f9c:	f7fe fbc0 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 8003fa0:	61f8      	str	r0, [r7, #28]
        break;
 8003fa2:	e014      	b.n	8003fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa4:	f7fe fbd2 	bl	800274c <HAL_RCC_GetPCLK2Freq>
 8003fa8:	61f8      	str	r0, [r7, #28]
        break;
 8003faa:	e010      	b.n	8003fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fac:	4b4d      	ldr	r3, [pc, #308]	; (80040e4 <UART_SetConfig+0x56c>)
 8003fae:	61fb      	str	r3, [r7, #28]
        break;
 8003fb0:	e00d      	b.n	8003fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb2:	f7fe fb1d 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 8003fb6:	61f8      	str	r0, [r7, #28]
        break;
 8003fb8:	e009      	b.n	8003fce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fbe:	61fb      	str	r3, [r7, #28]
        break;
 8003fc0:	e005      	b.n	8003fce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d077      	beq.n	80040c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	005a      	lsls	r2, r3, #1
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	085b      	lsrs	r3, r3, #1
 8003fde:	441a      	add	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b0f      	cmp	r3, #15
 8003fee:	d916      	bls.n	800401e <UART_SetConfig+0x4a6>
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff6:	d212      	bcs.n	800401e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	f023 030f 	bic.w	r3, r3, #15
 8004000:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	085b      	lsrs	r3, r3, #1
 8004006:	b29b      	uxth	r3, r3
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	b29a      	uxth	r2, r3
 800400e:	8afb      	ldrh	r3, [r7, #22]
 8004010:	4313      	orrs	r3, r2
 8004012:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	8afa      	ldrh	r2, [r7, #22]
 800401a:	60da      	str	r2, [r3, #12]
 800401c:	e052      	b.n	80040c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004024:	e04e      	b.n	80040c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004026:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800402a:	2b08      	cmp	r3, #8
 800402c:	d827      	bhi.n	800407e <UART_SetConfig+0x506>
 800402e:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <UART_SetConfig+0x4bc>)
 8004030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004034:	08004059 	.word	0x08004059
 8004038:	08004061 	.word	0x08004061
 800403c:	08004069 	.word	0x08004069
 8004040:	0800407f 	.word	0x0800407f
 8004044:	0800406f 	.word	0x0800406f
 8004048:	0800407f 	.word	0x0800407f
 800404c:	0800407f 	.word	0x0800407f
 8004050:	0800407f 	.word	0x0800407f
 8004054:	08004077 	.word	0x08004077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004058:	f7fe fb62 	bl	8002720 <HAL_RCC_GetPCLK1Freq>
 800405c:	61f8      	str	r0, [r7, #28]
        break;
 800405e:	e014      	b.n	800408a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004060:	f7fe fb74 	bl	800274c <HAL_RCC_GetPCLK2Freq>
 8004064:	61f8      	str	r0, [r7, #28]
        break;
 8004066:	e010      	b.n	800408a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004068:	4b1e      	ldr	r3, [pc, #120]	; (80040e4 <UART_SetConfig+0x56c>)
 800406a:	61fb      	str	r3, [r7, #28]
        break;
 800406c:	e00d      	b.n	800408a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800406e:	f7fe fabf 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 8004072:	61f8      	str	r0, [r7, #28]
        break;
 8004074:	e009      	b.n	800408a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800407a:	61fb      	str	r3, [r7, #28]
        break;
 800407c:	e005      	b.n	800408a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004088:	bf00      	nop
    }

    if (pclk != 0U)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d019      	beq.n	80040c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	085a      	lsrs	r2, r3, #1
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	441a      	add	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b0f      	cmp	r3, #15
 80040a8:	d909      	bls.n	80040be <UART_SetConfig+0x546>
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b0:	d205      	bcs.n	80040be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	60da      	str	r2, [r3, #12]
 80040bc:	e002      	b.n	80040c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3728      	adds	r7, #40	; 0x28
 80040d8:	46bd      	mov	sp, r7
 80040da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040de:	bf00      	nop
 80040e0:	40008000 	.word	0x40008000
 80040e4:	00f42400 	.word	0x00f42400

080040e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	f003 0308 	and.w	r3, r3, #8
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	f003 0310 	and.w	r3, r3, #16
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d01a      	beq.n	80041fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e6:	d10a      	bne.n	80041fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00a      	beq.n	8004220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	605a      	str	r2, [r3, #4]
  }
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b098      	sub	sp, #96	; 0x60
 8004230:	af02      	add	r7, sp, #8
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800423c:	f7fc ff6c 	bl	8001118 <HAL_GetTick>
 8004240:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0308 	and.w	r3, r3, #8
 800424c:	2b08      	cmp	r3, #8
 800424e:	d12e      	bne.n	80042ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004250:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004258:	2200      	movs	r2, #0
 800425a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f88c 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d021      	beq.n	80042ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800427e:	653b      	str	r3, [r7, #80]	; 0x50
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004288:	647b      	str	r3, [r7, #68]	; 0x44
 800428a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800428e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e6      	bne.n	800426a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e062      	b.n	8004374 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b04      	cmp	r3, #4
 80042ba:	d149      	bne.n	8004350 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c4:	2200      	movs	r2, #0
 80042c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f856 	bl	800437c <UART_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d03c      	beq.n	8004350 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	e853 3f00 	ldrex	r3, [r3]
 80042e2:	623b      	str	r3, [r7, #32]
   return(result);
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f4:	633b      	str	r3, [r7, #48]	; 0x30
 80042f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e6      	bne.n	80042d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3308      	adds	r3, #8
 800430e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	60fb      	str	r3, [r7, #12]
   return(result);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0301 	bic.w	r3, r3, #1
 800431e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3308      	adds	r3, #8
 8004326:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004328:	61fa      	str	r2, [r7, #28]
 800432a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	69b9      	ldr	r1, [r7, #24]
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	617b      	str	r3, [r7, #20]
   return(result);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e5      	bne.n	8004308 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e011      	b.n	8004374 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2220      	movs	r2, #32
 800435a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3758      	adds	r7, #88	; 0x58
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	603b      	str	r3, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438c:	e049      	b.n	8004422 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004394:	d045      	beq.n	8004422 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004396:	f7fc febf 	bl	8001118 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d302      	bcc.n	80043ac <UART_WaitOnFlagUntilTimeout+0x30>
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e048      	b.n	8004442 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0304 	and.w	r3, r3, #4
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d031      	beq.n	8004422 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	69db      	ldr	r3, [r3, #28]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d110      	bne.n	80043ee <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2208      	movs	r2, #8
 80043d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f000 f838 	bl	800444a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2208      	movs	r2, #8
 80043de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e029      	b.n	8004442 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	69db      	ldr	r3, [r3, #28]
 80043f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043fc:	d111      	bne.n	8004422 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004406:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 f81e 	bl	800444a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2220      	movs	r2, #32
 8004412:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e00f      	b.n	8004442 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	69da      	ldr	r2, [r3, #28]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4013      	ands	r3, r2
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	429a      	cmp	r2, r3
 800443e:	d0a6      	beq.n	800438e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800444a:	b480      	push	{r7}
 800444c:	b095      	sub	sp, #84	; 0x54
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004462:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004466:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004470:	643b      	str	r3, [r7, #64]	; 0x40
 8004472:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004476:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800447e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e6      	bne.n	8004452 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3308      	adds	r3, #8
 800448a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	61fb      	str	r3, [r7, #28]
   return(result);
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	64bb      	str	r3, [r7, #72]	; 0x48
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3308      	adds	r3, #8
 80044a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044a4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e5      	bne.n	8004484 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d118      	bne.n	80044f2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f023 0310 	bic.w	r3, r3, #16
 80044d4:	647b      	str	r3, [r7, #68]	; 0x44
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6979      	ldr	r1, [r7, #20]
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	613b      	str	r3, [r7, #16]
   return(result);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e6      	bne.n	80044c0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004506:	bf00      	nop
 8004508:	3754      	adds	r7, #84	; 0x54
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <memset>:
 8004512:	4402      	add	r2, r0
 8004514:	4603      	mov	r3, r0
 8004516:	4293      	cmp	r3, r2
 8004518:	d100      	bne.n	800451c <memset+0xa>
 800451a:	4770      	bx	lr
 800451c:	f803 1b01 	strb.w	r1, [r3], #1
 8004520:	e7f9      	b.n	8004516 <memset+0x4>
	...

08004524 <__libc_init_array>:
 8004524:	b570      	push	{r4, r5, r6, lr}
 8004526:	4d0d      	ldr	r5, [pc, #52]	; (800455c <__libc_init_array+0x38>)
 8004528:	4c0d      	ldr	r4, [pc, #52]	; (8004560 <__libc_init_array+0x3c>)
 800452a:	1b64      	subs	r4, r4, r5
 800452c:	10a4      	asrs	r4, r4, #2
 800452e:	2600      	movs	r6, #0
 8004530:	42a6      	cmp	r6, r4
 8004532:	d109      	bne.n	8004548 <__libc_init_array+0x24>
 8004534:	4d0b      	ldr	r5, [pc, #44]	; (8004564 <__libc_init_array+0x40>)
 8004536:	4c0c      	ldr	r4, [pc, #48]	; (8004568 <__libc_init_array+0x44>)
 8004538:	f000 f818 	bl	800456c <_init>
 800453c:	1b64      	subs	r4, r4, r5
 800453e:	10a4      	asrs	r4, r4, #2
 8004540:	2600      	movs	r6, #0
 8004542:	42a6      	cmp	r6, r4
 8004544:	d105      	bne.n	8004552 <__libc_init_array+0x2e>
 8004546:	bd70      	pop	{r4, r5, r6, pc}
 8004548:	f855 3b04 	ldr.w	r3, [r5], #4
 800454c:	4798      	blx	r3
 800454e:	3601      	adds	r6, #1
 8004550:	e7ee      	b.n	8004530 <__libc_init_array+0xc>
 8004552:	f855 3b04 	ldr.w	r3, [r5], #4
 8004556:	4798      	blx	r3
 8004558:	3601      	adds	r6, #1
 800455a:	e7f2      	b.n	8004542 <__libc_init_array+0x1e>
 800455c:	08007b24 	.word	0x08007b24
 8004560:	08007b24 	.word	0x08007b24
 8004564:	08007b24 	.word	0x08007b24
 8004568:	08007b28 	.word	0x08007b28

0800456c <_init>:
 800456c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456e:	bf00      	nop
 8004570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004572:	bc08      	pop	{r3}
 8004574:	469e      	mov	lr, r3
 8004576:	4770      	bx	lr

08004578 <_fini>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	bf00      	nop
 800457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457e:	bc08      	pop	{r3}
 8004580:	469e      	mov	lr, r3
 8004582:	4770      	bx	lr
