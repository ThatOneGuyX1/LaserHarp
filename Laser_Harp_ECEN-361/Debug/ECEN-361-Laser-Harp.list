
ECEN-361-Laser-Harp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003598  08004e9c  08004e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008434  08008434  0002003c  2**0
                  CONTENTS
  4 .ARM          00000008  08008434  08008434  00018434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800843c  0800843c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800843c  0800843c  0001843c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008440  08008440  00018440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08008444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000003c  08008480  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08008480  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d5a  00000000  00000000  000200af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002714  00000000  00000000  00032e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  00035520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1c  00000000  00000000  000365f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268fb  00000000  00000000  0003730c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013cd4  00000000  00000000  0005dc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0e66  00000000  00000000  000718db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046bc  00000000  00000000  00162744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00166e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004e84 	.word	0x08004e84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08004e84 	.word	0x08004e84

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fe3c 	bl	8001144 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f814 	bl	80004f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f920 	bl	8000714 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f8ee 	bl	80006b4 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80004d8:	f000 f860 	bl	800059c <MX_DAC1_Init>
  MX_TIM15_Init();
 80004dc:	f000 f89a 	bl	8000614 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim15); // Start the Music Interrupt Timer
 80004e0:	4803      	ldr	r0, [pc, #12]	; (80004f0 <main+0x2c>)
 80004e2:	f002 fff5 	bl	80034d0 <HAL_TIM_Base_Start_IT>

  HAL_DAC_Start(&hdac1, DAC_CHANNEL_2); // Start one of the dac channels
 80004e6:	2110      	movs	r1, #16
 80004e8:	4802      	ldr	r0, [pc, #8]	; (80004f4 <main+0x30>)
 80004ea:	f000 fffe 	bl	80014ea <HAL_DAC_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ee:	e7fe      	b.n	80004ee <main+0x2a>
 80004f0:	2000006c 	.word	0x2000006c
 80004f4:	20000058 	.word	0x20000058

080004f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b096      	sub	sp, #88	; 0x58
 80004fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	2244      	movs	r2, #68	; 0x44
 8000504:	2100      	movs	r1, #0
 8000506:	4618      	mov	r0, r3
 8000508:	f004 fc8f 	bl	8004e2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800050c:	463b      	mov	r3, r7
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800051a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800051e:	f001 fc6d 	bl	8001dfc <HAL_PWREx_ControlVoltageScaling>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000528:	f000 fc46 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800052c:	2302      	movs	r3, #2
 800052e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000530:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000534:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000536:	2310      	movs	r3, #16
 8000538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053a:	2302      	movs	r3, #2
 800053c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053e:	2302      	movs	r3, #2
 8000540:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000542:	2301      	movs	r3, #1
 8000544:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000546:	230a      	movs	r3, #10
 8000548:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800054a:	2307      	movs	r3, #7
 800054c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800054e:	2302      	movs	r3, #2
 8000550:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000552:	2302      	movs	r3, #2
 8000554:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4618      	mov	r0, r3
 800055c:	f001 fca4 	bl	8001ea8 <HAL_RCC_OscConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000566:	f000 fc27 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056a:	230f      	movs	r3, #15
 800056c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056e:	2303      	movs	r3, #3
 8000570:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000572:	2300      	movs	r3, #0
 8000574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800057e:	463b      	mov	r3, r7
 8000580:	2104      	movs	r1, #4
 8000582:	4618      	mov	r0, r3
 8000584:	f002 f86c 	bl	8002660 <HAL_RCC_ClockConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800058e:	f000 fc13 	bl	8000db8 <Error_Handler>
  }
}
 8000592:	bf00      	nop
 8000594:	3758      	adds	r7, #88	; 0x58
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2224      	movs	r2, #36	; 0x24
 80005a6:	2100      	movs	r1, #0
 80005a8:	4618      	mov	r0, r3
 80005aa:	f004 fc3e 	bl	8004e2a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80005ae:	4b17      	ldr	r3, [pc, #92]	; (800060c <MX_DAC1_Init+0x70>)
 80005b0:	4a17      	ldr	r2, [pc, #92]	; (8000610 <MX_DAC1_Init+0x74>)
 80005b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80005b4:	4815      	ldr	r0, [pc, #84]	; (800060c <MX_DAC1_Init+0x70>)
 80005b6:	f000 ff76 	bl	80014a6 <HAL_DAC_Init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80005c0:	f000 fbfa 	bl	8000db8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2200      	movs	r2, #0
 80005dc:	4619      	mov	r1, r3
 80005de:	480b      	ldr	r0, [pc, #44]	; (800060c <MX_DAC1_Init+0x70>)
 80005e0:	f001 f859 	bl	8001696 <HAL_DAC_ConfigChannel>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80005ea:	f000 fbe5 	bl	8000db8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2210      	movs	r2, #16
 80005f2:	4619      	mov	r1, r3
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_DAC1_Init+0x70>)
 80005f6:	f001 f84e 	bl	8001696 <HAL_DAC_ConfigChannel>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8000600:	f000 fbda 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000604:	bf00      	nop
 8000606:	3728      	adds	r7, #40	; 0x28
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	20000058 	.word	0x20000058
 8000610:	40007400 	.word	0x40007400

08000614 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b088      	sub	sp, #32
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <MX_TIM15_Init+0x98>)
 8000634:	4a1e      	ldr	r2, [pc, #120]	; (80006b0 <MX_TIM15_Init+0x9c>)
 8000636:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 80-1;
 8000638:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_TIM15_Init+0x98>)
 800063a:	224f      	movs	r2, #79	; 0x4f
 800063c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <MX_TIM15_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9;
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_TIM15_Init+0x98>)
 8000646:	2209      	movs	r2, #9
 8000648:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <MX_TIM15_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000650:	4b16      	ldr	r3, [pc, #88]	; (80006ac <MX_TIM15_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <MX_TIM15_Init+0x98>)
 8000658:	2280      	movs	r2, #128	; 0x80
 800065a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800065c:	4813      	ldr	r0, [pc, #76]	; (80006ac <MX_TIM15_Init+0x98>)
 800065e:	f002 fedf 	bl	8003420 <HAL_TIM_Base_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 8000668:	f000 fba6 	bl	8000db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8000672:	f107 0310 	add.w	r3, r7, #16
 8000676:	4619      	mov	r1, r3
 8000678:	480c      	ldr	r0, [pc, #48]	; (80006ac <MX_TIM15_Init+0x98>)
 800067a:	f003 f89b 	bl	80037b4 <HAL_TIM_ConfigClockSource>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8000684:	f000 fb98 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000688:	2300      	movs	r3, #0
 800068a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800068c:	2300      	movs	r3, #0
 800068e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	4619      	mov	r1, r3
 8000694:	4805      	ldr	r0, [pc, #20]	; (80006ac <MX_TIM15_Init+0x98>)
 8000696:	f003 fab3 	bl	8003c00 <HAL_TIMEx_MasterConfigSynchronization>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 80006a0:	f000 fb8a 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	2000006c 	.word	0x2000006c
 80006b0:	40014000 	.word	0x40014000

080006b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ba:	4a15      	ldr	r2, [pc, #84]	; (8000710 <MX_USART2_UART_Init+0x5c>)
 80006bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b0c      	ldr	r3, [pc, #48]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e4:	4b09      	ldr	r3, [pc, #36]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ea:	4b08      	ldr	r3, [pc, #32]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_USART2_UART_Init+0x58>)
 80006f8:	f003 fb28 	bl	8003d4c <HAL_UART_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000702:	f000 fb59 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000b8 	.word	0x200000b8
 8000710:	40004400 	.word	0x40004400

08000714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
 8000726:	60da      	str	r2, [r3, #12]
 8000728:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b4d      	ldr	r3, [pc, #308]	; (8000860 <MX_GPIO_Init+0x14c>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a4c      	ldr	r2, [pc, #304]	; (8000860 <MX_GPIO_Init+0x14c>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b4a      	ldr	r3, [pc, #296]	; (8000860 <MX_GPIO_Init+0x14c>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	4b47      	ldr	r3, [pc, #284]	; (8000860 <MX_GPIO_Init+0x14c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	4a46      	ldr	r2, [pc, #280]	; (8000860 <MX_GPIO_Init+0x14c>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074e:	4b44      	ldr	r3, [pc, #272]	; (8000860 <MX_GPIO_Init+0x14c>)
 8000750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b41      	ldr	r3, [pc, #260]	; (8000860 <MX_GPIO_Init+0x14c>)
 800075c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075e:	4a40      	ldr	r2, [pc, #256]	; (8000860 <MX_GPIO_Init+0x14c>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000766:	4b3e      	ldr	r3, [pc, #248]	; (8000860 <MX_GPIO_Init+0x14c>)
 8000768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b3b      	ldr	r3, [pc, #236]	; (8000860 <MX_GPIO_Init+0x14c>)
 8000774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000776:	4a3a      	ldr	r2, [pc, #232]	; (8000860 <MX_GPIO_Init+0x14c>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077e:	4b38      	ldr	r3, [pc, #224]	; (8000860 <MX_GPIO_Init+0x14c>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2101      	movs	r1, #1
 800078e:	4835      	ldr	r0, [pc, #212]	; (8000864 <MX_GPIO_Init+0x150>)
 8000790:	f001 fadc 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	482f      	ldr	r0, [pc, #188]	; (8000868 <MX_GPIO_Init+0x154>)
 80007ac:	f001 f924 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NOTE_1_Pin NOTE_2_Pin NOTE_3_Pin NOTE_4_Pin
                           NOTE_5_Pin NOTE_6_Pin NOTE_7_Pin NOTE_8_Pin
                           NOTE_9_Pin NOTE_10_Pin NOTE_11_Pin NOTE_12_Pin */
  GPIO_InitStruct.Pin = NOTE_1_Pin|NOTE_2_Pin|NOTE_3_Pin|NOTE_4_Pin
 80007b0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80007b4:	617b      	str	r3, [r7, #20]
                          |NOTE_5_Pin|NOTE_6_Pin|NOTE_7_Pin|NOTE_8_Pin
                          |NOTE_9_Pin|NOTE_10_Pin|NOTE_11_Pin|NOTE_12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007bc:	2302      	movs	r3, #2
 80007be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	4828      	ldr	r0, [pc, #160]	; (8000868 <MX_GPIO_Init+0x154>)
 80007c8:	f001 f916 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007cc:	2301      	movs	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d0:	2301      	movs	r3, #1
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	4820      	ldr	r0, [pc, #128]	; (8000864 <MX_GPIO_Init+0x150>)
 80007e4:	f001 f908 	bl	80019f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2100      	movs	r1, #0
 80007ec:	2006      	movs	r0, #6
 80007ee:	f000 fe24 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007f2:	2006      	movs	r0, #6
 80007f4:	f000 fe3d 	bl	8001472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2100      	movs	r1, #0
 80007fc:	2007      	movs	r0, #7
 80007fe:	f000 fe1c 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000802:	2007      	movs	r0, #7
 8000804:	f000 fe35 	bl	8001472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000808:	2200      	movs	r2, #0
 800080a:	2100      	movs	r1, #0
 800080c:	2008      	movs	r0, #8
 800080e:	f000 fe14 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000812:	2008      	movs	r0, #8
 8000814:	f000 fe2d 	bl	8001472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2009      	movs	r0, #9
 800081e:	f000 fe0c 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000822:	2009      	movs	r0, #9
 8000824:	f000 fe25 	bl	8001472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	200a      	movs	r0, #10
 800082e:	f000 fe04 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000832:	200a      	movs	r0, #10
 8000834:	f000 fe1d 	bl	8001472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000838:	2200      	movs	r2, #0
 800083a:	2100      	movs	r1, #0
 800083c:	2017      	movs	r0, #23
 800083e:	f000 fdfc 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000842:	2017      	movs	r0, #23
 8000844:	f000 fe15 	bl	8001472 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2028      	movs	r0, #40	; 0x28
 800084e:	f000 fdf4 	bl	800143a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000852:	2028      	movs	r0, #40	; 0x28
 8000854:	f000 fe0d 	bl	8001472 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	; 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	48000400 	.word	0x48000400
 8000868:	48000800 	.word	0x48000800

0800086c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000876:	2101      	movs	r1, #1
 8000878:	4880      	ldr	r0, [pc, #512]	; (8000a7c <HAL_GPIO_EXTI_Callback+0x210>)
 800087a:	f001 fa7f 	bl	8001d7c <HAL_GPIO_TogglePin>
	switch (GPIO_Pin) {
 800087e:	88fb      	ldrh	r3, [r7, #6]
 8000880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000884:	f000 80ea 	beq.w	8000a5c <HAL_GPIO_EXTI_Callback+0x1f0>
 8000888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800088c:	f300 80f1 	bgt.w	8000a72 <HAL_GPIO_EXTI_Callback+0x206>
 8000890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000894:	f000 80d7 	beq.w	8000a46 <HAL_GPIO_EXTI_Callback+0x1da>
 8000898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800089c:	f300 80e9 	bgt.w	8000a72 <HAL_GPIO_EXTI_Callback+0x206>
 80008a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008a4:	f000 80c4 	beq.w	8000a30 <HAL_GPIO_EXTI_Callback+0x1c4>
 80008a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008ac:	f300 80e1 	bgt.w	8000a72 <HAL_GPIO_EXTI_Callback+0x206>
 80008b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008b4:	f000 80b1 	beq.w	8000a1a <HAL_GPIO_EXTI_Callback+0x1ae>
 80008b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80008bc:	f300 80d9 	bgt.w	8000a72 <HAL_GPIO_EXTI_Callback+0x206>
 80008c0:	2b80      	cmp	r3, #128	; 0x80
 80008c2:	f000 809f 	beq.w	8000a04 <HAL_GPIO_EXTI_Callback+0x198>
 80008c6:	2b80      	cmp	r3, #128	; 0x80
 80008c8:	f300 80d3 	bgt.w	8000a72 <HAL_GPIO_EXTI_Callback+0x206>
 80008cc:	2b20      	cmp	r3, #32
 80008ce:	dc49      	bgt.n	8000964 <HAL_GPIO_EXTI_Callback+0xf8>
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	f340 80ce 	ble.w	8000a72 <HAL_GPIO_EXTI_Callback+0x206>
 80008d6:	3b01      	subs	r3, #1
 80008d8:	2b1f      	cmp	r3, #31
 80008da:	f200 80ca 	bhi.w	8000a72 <HAL_GPIO_EXTI_Callback+0x206>
 80008de:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <HAL_GPIO_EXTI_Callback+0x78>)
 80008e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e4:	0800096b 	.word	0x0800096b
 80008e8:	08000981 	.word	0x08000981
 80008ec:	08000a73 	.word	0x08000a73
 80008f0:	08000997 	.word	0x08000997
 80008f4:	08000a73 	.word	0x08000a73
 80008f8:	08000a73 	.word	0x08000a73
 80008fc:	08000a73 	.word	0x08000a73
 8000900:	080009ad 	.word	0x080009ad
 8000904:	08000a73 	.word	0x08000a73
 8000908:	08000a73 	.word	0x08000a73
 800090c:	08000a73 	.word	0x08000a73
 8000910:	08000a73 	.word	0x08000a73
 8000914:	08000a73 	.word	0x08000a73
 8000918:	08000a73 	.word	0x08000a73
 800091c:	08000a73 	.word	0x08000a73
 8000920:	080009c3 	.word	0x080009c3
 8000924:	08000a73 	.word	0x08000a73
 8000928:	08000a73 	.word	0x08000a73
 800092c:	08000a73 	.word	0x08000a73
 8000930:	08000a73 	.word	0x08000a73
 8000934:	08000a73 	.word	0x08000a73
 8000938:	08000a73 	.word	0x08000a73
 800093c:	08000a73 	.word	0x08000a73
 8000940:	08000a73 	.word	0x08000a73
 8000944:	08000a73 	.word	0x08000a73
 8000948:	08000a73 	.word	0x08000a73
 800094c:	08000a73 	.word	0x08000a73
 8000950:	08000a73 	.word	0x08000a73
 8000954:	08000a73 	.word	0x08000a73
 8000958:	08000a73 	.word	0x08000a73
 800095c:	08000a73 	.word	0x08000a73
 8000960:	080009d9 	.word	0x080009d9
 8000964:	2b40      	cmp	r3, #64	; 0x40
 8000966:	d042      	beq.n	80009ee <HAL_GPIO_EXTI_Callback+0x182>
	case NOTE_12_Pin:
		active[NOTE_B] = !active[NOTE_B];
		break;

	default:
		break;
 8000968:	e083      	b.n	8000a72 <HAL_GPIO_EXTI_Callback+0x206>
		active[NOTE_C] = !active[NOTE_C];
 800096a:	4b45      	ldr	r3, [pc, #276]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	bf0c      	ite	eq
 8000972:	2301      	moveq	r3, #1
 8000974:	2300      	movne	r3, #0
 8000976:	b2db      	uxtb	r3, r3
 8000978:	461a      	mov	r2, r3
 800097a:	4b41      	ldr	r3, [pc, #260]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 800097c:	601a      	str	r2, [r3, #0]
		break;
 800097e:	e079      	b.n	8000a74 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_Cs] = !active[NOTE_Cs];
 8000980:	4b3f      	ldr	r3, [pc, #252]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	2b00      	cmp	r3, #0
 8000986:	bf0c      	ite	eq
 8000988:	2301      	moveq	r3, #1
 800098a:	2300      	movne	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	461a      	mov	r2, r3
 8000990:	4b3b      	ldr	r3, [pc, #236]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 8000992:	605a      	str	r2, [r3, #4]
		break;
 8000994:	e06e      	b.n	8000a74 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_D] = !active[NOTE_D];
 8000996:	4b3a      	ldr	r3, [pc, #232]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	2b00      	cmp	r3, #0
 800099c:	bf0c      	ite	eq
 800099e:	2301      	moveq	r3, #1
 80009a0:	2300      	movne	r3, #0
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b36      	ldr	r3, [pc, #216]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 80009a8:	609a      	str	r2, [r3, #8]
		break;
 80009aa:	e063      	b.n	8000a74 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_Ds] = !active[NOTE_Ds];
 80009ac:	4b34      	ldr	r3, [pc, #208]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf0c      	ite	eq
 80009b4:	2301      	moveq	r3, #1
 80009b6:	2300      	movne	r3, #0
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 80009be:	60da      	str	r2, [r3, #12]
		break;
 80009c0:	e058      	b.n	8000a74 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_E] = !active[NOTE_E];
 80009c2:	4b2f      	ldr	r3, [pc, #188]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 80009c4:	691b      	ldr	r3, [r3, #16]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	bf0c      	ite	eq
 80009ca:	2301      	moveq	r3, #1
 80009cc:	2300      	movne	r3, #0
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 80009d4:	611a      	str	r2, [r3, #16]
		break;
 80009d6:	e04d      	b.n	8000a74 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_F] = !active[NOTE_F];
 80009d8:	4b29      	ldr	r3, [pc, #164]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	bf0c      	ite	eq
 80009e0:	2301      	moveq	r3, #1
 80009e2:	2300      	movne	r3, #0
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	461a      	mov	r2, r3
 80009e8:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 80009ea:	615a      	str	r2, [r3, #20]
		break;
 80009ec:	e042      	b.n	8000a74 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_Fs] = !active[NOTE_Fs];
 80009ee:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	bf0c      	ite	eq
 80009f6:	2301      	moveq	r3, #1
 80009f8:	2300      	movne	r3, #0
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b20      	ldr	r3, [pc, #128]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a00:	619a      	str	r2, [r3, #24]
		break;
 8000a02:	e037      	b.n	8000a74 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_G] = !active[NOTE_G];
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a06:	69db      	ldr	r3, [r3, #28]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	bf0c      	ite	eq
 8000a0c:	2301      	moveq	r3, #1
 8000a0e:	2300      	movne	r3, #0
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a16:	61da      	str	r2, [r3, #28]
		break;
 8000a18:	e02c      	b.n	8000a74 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_Gs] = !active[NOTE_Gs];
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a1c:	6a1b      	ldr	r3, [r3, #32]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	bf0c      	ite	eq
 8000a22:	2301      	moveq	r3, #1
 8000a24:	2300      	movne	r3, #0
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a2c:	621a      	str	r2, [r3, #32]
		break;
 8000a2e:	e021      	b.n	8000a74 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_A] = !active[NOTE_A];
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	bf0c      	ite	eq
 8000a38:	2301      	moveq	r3, #1
 8000a3a:	2300      	movne	r3, #0
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a42:	625a      	str	r2, [r3, #36]	; 0x24
		break;
 8000a44:	e016      	b.n	8000a74 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_As] = !active[NOTE_As];
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	bf0c      	ite	eq
 8000a4e:	2301      	moveq	r3, #1
 8000a50:	2300      	movne	r3, #0
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	461a      	mov	r2, r3
 8000a56:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a58:	629a      	str	r2, [r3, #40]	; 0x28
		break;
 8000a5a:	e00b      	b.n	8000a74 <HAL_GPIO_EXTI_Callback+0x208>
		active[NOTE_B] = !active[NOTE_B];
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	bf0c      	ite	eq
 8000a64:	2301      	moveq	r3, #1
 8000a66:	2300      	movne	r3, #0
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b04      	ldr	r3, [pc, #16]	; (8000a80 <HAL_GPIO_EXTI_Callback+0x214>)
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 8000a70:	e000      	b.n	8000a74 <HAL_GPIO_EXTI_Callback+0x208>
		break;
 8000a72:	bf00      	nop
	}
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	48000400 	.word	0x48000400
 8000a80:	20000000 	.word	0x20000000

08000a84 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b090      	sub	sp, #64	; 0x40
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if (htim == &htim15 )
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a49      	ldr	r2, [pc, #292]	; (8000bb4 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	f040 8185 	bne.w	8000da0 <HAL_TIM_PeriodElapsedCallback+0x31c>
    /* ***************************************************************
    * This first batch of values is to look update the value for each Note.
    * By using a list and different indexs we can speed up the program with good spatial locality
    * If the note is active then we update the value. Otherwise we return a zero.
    ***************************************************************************/
	  int C_val = 	active[NOTE_C]?C_TABLE[index[NOTE_C]]:0;
 8000a96:	4b48      	ldr	r3, [pc, #288]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d005      	beq.n	8000aaa <HAL_TIM_PeriodElapsedCallback+0x26>
 8000a9e:	4b47      	ldr	r3, [pc, #284]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a47      	ldr	r2, [pc, #284]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa8:	e000      	b.n	8000aac <HAL_TIM_PeriodElapsedCallback+0x28>
 8000aaa:	2300      	movs	r3, #0
 8000aac:	63fb      	str	r3, [r7, #60]	; 0x3c
	  int Cs_val = 	active[NOTE_Cs]?Cs_TABLE[index[NOTE_Cs]]:0;
 8000aae:	4b42      	ldr	r3, [pc, #264]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d005      	beq.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0x3e>
 8000ab6:	4b41      	ldr	r3, [pc, #260]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	4a42      	ldr	r2, [pc, #264]	; (8000bc4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac0:	e000      	b.n	8000ac4 <HAL_TIM_PeriodElapsedCallback+0x40>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	63bb      	str	r3, [r7, #56]	; 0x38
	  int D_val = 	active[NOTE_D]?D_TABLE[index[NOTE_D]]:0;
 8000ac6:	4b3c      	ldr	r3, [pc, #240]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d005      	beq.n	8000ada <HAL_TIM_PeriodElapsedCallback+0x56>
 8000ace:	4b3b      	ldr	r3, [pc, #236]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	4a3d      	ldr	r2, [pc, #244]	; (8000bc8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad8:	e000      	b.n	8000adc <HAL_TIM_PeriodElapsedCallback+0x58>
 8000ada:	2300      	movs	r3, #0
 8000adc:	637b      	str	r3, [r7, #52]	; 0x34
	  int Ds_val = 	active[NOTE_Ds]?Ds_TABLE[index[NOTE_Ds]]:0;
 8000ade:	4b36      	ldr	r3, [pc, #216]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d005      	beq.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x6e>
 8000ae6:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	4a38      	ldr	r2, [pc, #224]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af0:	e000      	b.n	8000af4 <HAL_TIM_PeriodElapsedCallback+0x70>
 8000af2:	2300      	movs	r3, #0
 8000af4:	633b      	str	r3, [r7, #48]	; 0x30
	  int E_val = 	active[NOTE_E]?E_TABLE[index[NOTE_E]]:0;
 8000af6:	4b30      	ldr	r3, [pc, #192]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000af8:	691b      	ldr	r3, [r3, #16]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d005      	beq.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x86>
 8000afe:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b00:	691b      	ldr	r3, [r3, #16]
 8000b02:	4a33      	ldr	r2, [pc, #204]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8000b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b08:	e000      	b.n	8000b0c <HAL_TIM_PeriodElapsedCallback+0x88>
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  int F_val = 	active[NOTE_F]?F_TABLE[index[NOTE_F]]:0;
 8000b0e:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d005      	beq.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0x9e>
 8000b16:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a2e      	ldr	r2, [pc, #184]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	e000      	b.n	8000b24 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8000b22:	2300      	movs	r3, #0
 8000b24:	62bb      	str	r3, [r7, #40]	; 0x28
	  int Fs_val = 	active[NOTE_Fs]?Fs_TABLE[index[NOTE_Fs]]:0;
 8000b26:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b28:	699b      	ldr	r3, [r3, #24]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d005      	beq.n	8000b3a <HAL_TIM_PeriodElapsedCallback+0xb6>
 8000b2e:	4b23      	ldr	r3, [pc, #140]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4a29      	ldr	r2, [pc, #164]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b38:	e000      	b.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0xb8>
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
	  int G_val = 	active[NOTE_G]?G_TABLE[index[NOTE_G]]:0;
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b40:	69db      	ldr	r3, [r3, #28]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d005      	beq.n	8000b52 <HAL_TIM_PeriodElapsedCallback+0xce>
 8000b46:	4b1d      	ldr	r3, [pc, #116]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b48:	69db      	ldr	r3, [r3, #28]
 8000b4a:	4a24      	ldr	r2, [pc, #144]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b50:	e000      	b.n	8000b54 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
	  int Gs_val = 	active[NOTE_Gs]?Gs_TABLE[index[NOTE_Gs]]:0;
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b58:	6a1b      	ldr	r3, [r3, #32]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d005      	beq.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0xe6>
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b60:	6a1b      	ldr	r3, [r3, #32]
 8000b62:	4a1f      	ldr	r2, [pc, #124]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b68:	e000      	b.n	8000b6c <HAL_TIM_PeriodElapsedCallback+0xe8>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
	  int A_val = 	active[NOTE_A]?A_TABLE[index[NOTE_A]]:0;
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d005      	beq.n	8000b82 <HAL_TIM_PeriodElapsedCallback+0xfe>
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	4a1a      	ldr	r2, [pc, #104]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b80:	e000      	b.n	8000b84 <HAL_TIM_PeriodElapsedCallback+0x100>
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
	  int As_val = 	active[NOTE_As]?As_TABLE[index[NOTE_As]]:0;
 8000b86:	4b0c      	ldr	r3, [pc, #48]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d005      	beq.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x116>
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b98:	e000      	b.n	8000b9c <HAL_TIM_PeriodElapsedCallback+0x118>
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
	  int B_val = 	active[NOTE_B]?B_TABLE[index[NOTE_B]]:0;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d024      	beq.n	8000bf0 <HAL_TIM_PeriodElapsedCallback+0x16c>
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000baa:	4a10      	ldr	r2, [pc, #64]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb0:	e01f      	b.n	8000bf2 <HAL_TIM_PeriodElapsedCallback+0x16e>
 8000bb2:	bf00      	nop
 8000bb4:	2000006c 	.word	0x2000006c
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	20000140 	.word	0x20000140
 8000bc0:	08004e9c 	.word	0x08004e9c
 8000bc4:	08005498 	.word	0x08005498
 8000bc8:	08005a3c 	.word	0x08005a3c
 8000bcc:	08005f90 	.word	0x08005f90
 8000bd0:	08006498 	.word	0x08006498
 8000bd4:	08006958 	.word	0x08006958
 8000bd8:	08006dd4 	.word	0x08006dd4
 8000bdc:	08007210 	.word	0x08007210
 8000be0:	08007610 	.word	0x08007610
 8000be4:	080079d4 	.word	0x080079d4
 8000be8:	08007d64 	.word	0x08007d64
 8000bec:	080080c0 	.word	0x080080c0
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]

    /* ***************************************************************
    This batch of code is to just update the index if the note is active.
    Since the active list should only ever hold a 0 or a 1, this code works. Avoid if statements
      ***************************************************************************/
	  index[NOTE_C] 	+= 	active[NOTE_C];
 8000bf4:	4b6c      	ldr	r3, [pc, #432]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b6c      	ldr	r3, [pc, #432]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a6a      	ldr	r2, [pc, #424]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c00:	6013      	str	r3, [r2, #0]
	  index[NOTE_Cs] 	+= 	active[NOTE_Cs];
 8000c02:	4b69      	ldr	r3, [pc, #420]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c04:	685a      	ldr	r2, [r3, #4]
 8000c06:	4b69      	ldr	r3, [pc, #420]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	4a66      	ldr	r2, [pc, #408]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c0e:	6053      	str	r3, [r2, #4]
	  index[NOTE_D]		+= 	active[NOTE_D];
 8000c10:	4b65      	ldr	r3, [pc, #404]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	4b65      	ldr	r3, [pc, #404]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	4413      	add	r3, r2
 8000c1a:	4a63      	ldr	r2, [pc, #396]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c1c:	6093      	str	r3, [r2, #8]
	  index[NOTE_Ds] 	+= 	active[NOTE_Ds];
 8000c1e:	4b62      	ldr	r3, [pc, #392]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c20:	68da      	ldr	r2, [r3, #12]
 8000c22:	4b62      	ldr	r3, [pc, #392]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a5f      	ldr	r2, [pc, #380]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c2a:	60d3      	str	r3, [r2, #12]
	  index[NOTE_E] 	+= 	active[NOTE_E];
 8000c2c:	4b5e      	ldr	r3, [pc, #376]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c2e:	691a      	ldr	r2, [r3, #16]
 8000c30:	4b5e      	ldr	r3, [pc, #376]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a5c      	ldr	r2, [pc, #368]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c38:	6113      	str	r3, [r2, #16]
	  index[NOTE_F] 	+= 	active[NOTE_F];
 8000c3a:	4b5b      	ldr	r3, [pc, #364]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c3c:	695a      	ldr	r2, [r3, #20]
 8000c3e:	4b5b      	ldr	r3, [pc, #364]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a58      	ldr	r2, [pc, #352]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c46:	6153      	str	r3, [r2, #20]
	  index[NOTE_Fs] 	+= 	active[NOTE_Fs];
 8000c48:	4b57      	ldr	r3, [pc, #348]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c4a:	699a      	ldr	r2, [r3, #24]
 8000c4c:	4b57      	ldr	r3, [pc, #348]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4413      	add	r3, r2
 8000c52:	4a55      	ldr	r2, [pc, #340]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c54:	6193      	str	r3, [r2, #24]
	  index[NOTE_G] 	+= 	active[NOTE_G];
 8000c56:	4b54      	ldr	r3, [pc, #336]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c58:	69da      	ldr	r2, [r3, #28]
 8000c5a:	4b54      	ldr	r3, [pc, #336]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	4413      	add	r3, r2
 8000c60:	4a51      	ldr	r2, [pc, #324]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c62:	61d3      	str	r3, [r2, #28]
	  index[NOTE_Gs] 	+= 	active[NOTE_Gs];
 8000c64:	4b50      	ldr	r3, [pc, #320]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c66:	6a1a      	ldr	r2, [r3, #32]
 8000c68:	4b50      	ldr	r3, [pc, #320]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c6a:	6a1b      	ldr	r3, [r3, #32]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	4a4e      	ldr	r2, [pc, #312]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c70:	6213      	str	r3, [r2, #32]
	  index[NOTE_A] 	+= 	active[NOTE_A];
 8000c72:	4b4d      	ldr	r3, [pc, #308]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c76:	4b4d      	ldr	r3, [pc, #308]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a4a      	ldr	r2, [pc, #296]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c7e:	6253      	str	r3, [r2, #36]	; 0x24
	  index[NOTE_As] 	+= 	active[NOTE_As];
 8000c80:	4b49      	ldr	r3, [pc, #292]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c84:	4b49      	ldr	r3, [pc, #292]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a47      	ldr	r2, [pc, #284]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c8c:	6293      	str	r3, [r2, #40]	; 0x28
	  index[NOTE_B] 	+= 	active[NOTE_B];
 8000c8e:	4b46      	ldr	r3, [pc, #280]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c92:	4b46      	ldr	r3, [pc, #280]	; (8000dac <HAL_TIM_PeriodElapsedCallback+0x328>)
 8000c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c96:	4413      	add	r3, r2
 8000c98:	4a43      	ldr	r2, [pc, #268]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

		wave_out = C_val + Cs_val + Ds_val + D_val + E_val + F_val + Fs_val
 8000c9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ca0:	441a      	add	r2, r3
 8000ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca4:	441a      	add	r2, r3
 8000ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca8:	441a      	add	r2, r3
 8000caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cac:	441a      	add	r2, r3
 8000cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cb0:	441a      	add	r2, r3
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	441a      	add	r2, r3
				+ G_val + Gs_val + A_val + As_val + B_val; // Calculate the Sum of the wave
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	441a      	add	r2, r3
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	441a      	add	r2, r3
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	441a      	add	r2, r3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	441a      	add	r2, r3
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	4413      	add	r3, r2
		wave_out = C_val + Cs_val + Ds_val + D_val + E_val + F_val + Fs_val
 8000cca:	4a39      	ldr	r2, [pc, #228]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000ccc:	6013      	str	r3, [r2, #0]
		int temp_wave = wave_out * 12 / 1; // This is for debugging purposes. Also 12/4 is to create the new offset for only using 4 notes
 8000cce:	4b38      	ldr	r3, [pc, #224]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	60fb      	str	r3, [r7, #12]

		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_L, temp_wave); // Output the wave
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2204      	movs	r2, #4
 8000ce0:	2110      	movs	r1, #16
 8000ce2:	4834      	ldr	r0, [pc, #208]	; (8000db4 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8000ce4:	f000 fca8 	bl	8001638 <HAL_DAC_SetValue>
		/****************************************************************
		 This final section of Code is to handle the reseting of each index.
		 *********************************************************************/
		if (index[NOTE_C] > C_SAMPLES)
 8000ce8:	4b2f      	ldr	r3, [pc, #188]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000cf0:	db02      	blt.n	8000cf8 <HAL_TIM_PeriodElapsedCallback+0x274>
			index[NOTE_C] = 0;
 8000cf2:	4b2d      	ldr	r3, [pc, #180]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
		if (index[NOTE_Cs] > Cs_SAMPLES)
 8000cf8:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f5b3 7fb5 	cmp.w	r3, #362	; 0x16a
 8000d00:	db02      	blt.n	8000d08 <HAL_TIM_PeriodElapsedCallback+0x284>
			index[NOTE_Cs] = 0;
 8000d02:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
		if (index[NOTE_D] > D_SAMPLES)
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8000d10:	db02      	blt.n	8000d18 <HAL_TIM_PeriodElapsedCallback+0x294>
			index[NOTE_D] = 0;
 8000d12:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
		if (index[NOTE_Ds] > Ds_SAMPLES)
 8000d18:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000d20:	dd02      	ble.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x2a4>
			index[NOTE_Ds] = 0;
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	60da      	str	r2, [r3, #12]
		if (index[NOTE_E] > E_SAMPLES)
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d2a:	691b      	ldr	r3, [r3, #16]
 8000d2c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000d30:	dd02      	ble.n	8000d38 <HAL_TIM_PeriodElapsedCallback+0x2b4>
			index[NOTE_E] = 0;
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	611a      	str	r2, [r3, #16]
		if (index[NOTE_F] > F_SAMPLES)
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d3a:	695b      	ldr	r3, [r3, #20]
 8000d3c:	f5b3 7f90 	cmp.w	r3, #288	; 0x120
 8000d40:	db02      	blt.n	8000d48 <HAL_TIM_PeriodElapsedCallback+0x2c4>
			index[NOTE_F] = 0;
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	615a      	str	r2, [r3, #20]
		if (index[NOTE_Fs] > Fs_SAMPLES)
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8000d50:	db02      	blt.n	8000d58 <HAL_TIM_PeriodElapsedCallback+0x2d4>
			index[NOTE_Fs] = 0;
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
		if (index[NOTE_G] > G_SAMPLES)
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d5a:	69db      	ldr	r3, [r3, #28]
 8000d5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d60:	dd02      	ble.n	8000d68 <HAL_TIM_PeriodElapsedCallback+0x2e4>
			index[NOTE_G] = 0;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
		if (index[NOTE_Gs] > Gs_SAMPLES)
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d6a:	6a1b      	ldr	r3, [r3, #32]
 8000d6c:	2bf1      	cmp	r3, #241	; 0xf1
 8000d6e:	dd02      	ble.n	8000d76 <HAL_TIM_PeriodElapsedCallback+0x2f2>
			index[NOTE_Gs] = 0;
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	621a      	str	r2, [r3, #32]
		if (index[NOTE_A] > A_SAMPLES)
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	2be4      	cmp	r3, #228	; 0xe4
 8000d7c:	dd02      	ble.n	8000d84 <HAL_TIM_PeriodElapsedCallback+0x300>
			index[NOTE_A] = 0;
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24
		if (index[NOTE_As] > As_SAMPLES)
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d88:	2bd7      	cmp	r3, #215	; 0xd7
 8000d8a:	dd02      	ble.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0x30e>
			index[NOTE_As] = 0;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
		if (index[NOTE_B] > B_SAMPLES)
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d96:	2bcb      	cmp	r3, #203	; 0xcb
 8000d98:	dd02      	ble.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x31c>
			index[NOTE_B] = 0;
 8000d9a:	4b03      	ldr	r3, [pc, #12]	; (8000da8 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  }
}
 8000da0:	bf00      	nop
 8000da2:	3740      	adds	r7, #64	; 0x40
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000140 	.word	0x20000140
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000170 	.word	0x20000170
 8000db4:	20000058 	.word	0x20000058

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <Error_Handler+0x8>
	...

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_MspInit+0x44>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_MspInit+0x44>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_MspInit+0x44>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_MspInit+0x44>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_MspInit+0x44>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dec:	6593      	str	r3, [r2, #88]	; 0x58
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_MspInit+0x44>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <HAL_DAC_MspInit+0x84>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d12c      	bne.n	8000e88 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_DAC_MspInit+0x88>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	4a18      	ldr	r2, [pc, #96]	; (8000e94 <HAL_DAC_MspInit+0x88>)
 8000e34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e38:	6593      	str	r3, [r2, #88]	; 0x58
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <HAL_DAC_MspInit+0x88>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	4b13      	ldr	r3, [pc, #76]	; (8000e94 <HAL_DAC_MspInit+0x88>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <HAL_DAC_MspInit+0x88>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <HAL_DAC_MspInit+0x88>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e5e:	2330      	movs	r3, #48	; 0x30
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e62:	2303      	movs	r3, #3
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e74:	f000 fdc0 	bl	80019f8 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2036      	movs	r0, #54	; 0x36
 8000e7e:	f000 fadc 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e82:	2036      	movs	r0, #54	; 0x36
 8000e84:	f000 faf5 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40007400 	.word	0x40007400
 8000e94:	40021000 	.word	0x40021000

08000e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <HAL_TIM_Base_MspInit+0x44>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d113      	bne.n	8000ed2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <HAL_TIM_Base_MspInit+0x48>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eae:	4a0c      	ldr	r2, [pc, #48]	; (8000ee0 <HAL_TIM_Base_MspInit+0x48>)
 8000eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_TIM_Base_MspInit+0x48>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2018      	movs	r0, #24
 8000ec8:	f000 fab7 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000ecc:	2018      	movs	r0, #24
 8000ece:	f000 fad0 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40014000 	.word	0x40014000
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b0ac      	sub	sp, #176	; 0xb0
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	2288      	movs	r2, #136	; 0x88
 8000f02:	2100      	movs	r1, #0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 ff90 	bl	8004e2a <memset>
  if(huart->Instance==USART2)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a25      	ldr	r2, [pc, #148]	; (8000fa4 <HAL_UART_MspInit+0xc0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d143      	bne.n	8000f9c <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fdc1 	bl	8002aa8 <HAL_RCCEx_PeriphCLKConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f2c:	f7ff ff44 	bl	8000db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f30:	4b1d      	ldr	r3, [pc, #116]	; (8000fa8 <HAL_UART_MspInit+0xc4>)
 8000f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f34:	4a1c      	ldr	r2, [pc, #112]	; (8000fa8 <HAL_UART_MspInit+0xc4>)
 8000f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f3c:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <HAL_UART_MspInit+0xc4>)
 8000f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_UART_MspInit+0xc4>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4c:	4a16      	ldr	r2, [pc, #88]	; (8000fa8 <HAL_UART_MspInit+0xc4>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_UART_MspInit+0xc4>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f58:	f003 0301 	and.w	r3, r3, #1
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f60:	230c      	movs	r3, #12
 8000f62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f72:	2303      	movs	r3, #3
 8000f74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f78:	2307      	movs	r3, #7
 8000f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000f82:	4619      	mov	r1, r3
 8000f84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f88:	f000 fd36 	bl	80019f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2026      	movs	r0, #38	; 0x26
 8000f92:	f000 fa52 	bl	800143a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f96:	2026      	movs	r0, #38	; 0x26
 8000f98:	f000 fa6b 	bl	8001472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f9c:	bf00      	nop
 8000f9e:	37b0      	adds	r7, #176	; 0xb0
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40004400 	.word	0x40004400
 8000fa8:	40021000 	.word	0x40021000

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <HardFault_Handler+0x4>

08000fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <MemManage_Handler+0x4>

08000fbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc2:	e7fe      	b.n	8000fc2 <BusFault_Handler+0x4>

08000fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <UsageFault_Handler+0x4>

08000fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff8:	f000 f900 	bl	80011fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_1_Pin);
 8001004:	2001      	movs	r0, #1
 8001006:	f000 fed3 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}

0800100e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_2_Pin);
 8001012:	2002      	movs	r0, #2
 8001014:	f000 fecc 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_3_Pin);
 8001020:	2004      	movs	r0, #4
 8001022:	f000 fec5 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}

0800102a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_4_Pin);
 800102e:	2008      	movs	r0, #8
 8001030:	f000 febe 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_5_Pin);
 800103c:	2010      	movs	r0, #16
 800103e:	f000 feb7 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}

08001046 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_6_Pin);
 800104a:	2020      	movs	r0, #32
 800104c:	f000 feb0 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_7_Pin);
 8001050:	2040      	movs	r0, #64	; 0x40
 8001052:	f000 fead 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_8_Pin);
 8001056:	2080      	movs	r0, #128	; 0x80
 8001058:	f000 feaa 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_9_Pin);
 800105c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001060:	f000 fea6 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_10_Pin);
 8001064:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001068:	f000 fea2 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8001076:	f002 fa9b 	bl	80035b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000006c 	.word	0x2000006c

08001084 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001088:	4802      	ldr	r0, [pc, #8]	; (8001094 <USART2_IRQHandler+0x10>)
 800108a:	f002 fead 	bl	8003de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200000b8 	.word	0x200000b8

08001098 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(NOTE_11_Pin);
 800109c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010a0:	f000 fe86 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(NOTE_12_Pin);
 80010a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80010a8:	f000 fe82 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010b0:	f000 fe7e 	bl	8001db0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac1);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <TIM6_DAC_IRQHandler+0x10>)
 80010be:	f000 fa61 	bl	8001584 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000058 	.word	0x20000058

080010cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <SystemInit+0x20>)
 80010d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010d6:	4a05      	ldr	r2, [pc, #20]	; (80010ec <SystemInit+0x20>)
 80010d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <Reset_Handler>:
 80010f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001128 <LoopForever+0x2>
 80010f4:	f7ff ffea 	bl	80010cc <SystemInit>
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <LoopForever+0x6>)
 80010fa:	490d      	ldr	r1, [pc, #52]	; (8001130 <LoopForever+0xa>)
 80010fc:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <LoopForever+0xe>)
 80010fe:	2300      	movs	r3, #0
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:
 8001102:	58d4      	ldr	r4, [r2, r3]
 8001104:	50c4      	str	r4, [r0, r3]
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:
 8001108:	18c4      	adds	r4, r0, r3
 800110a:	428c      	cmp	r4, r1
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <LoopForever+0x12>)
 8001110:	4c0a      	ldr	r4, [pc, #40]	; (800113c <LoopForever+0x16>)
 8001112:	2300      	movs	r3, #0
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:
 800111a:	42a2      	cmp	r2, r4
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>
 800111e:	f003 fe8d 	bl	8004e3c <__libc_init_array>
 8001122:	f7ff f9cf 	bl	80004c4 <main>

08001126 <LoopForever>:
 8001126:	e7fe      	b.n	8001126 <LoopForever>
 8001128:	20018000 	.word	0x20018000
 800112c:	20000000 	.word	0x20000000
 8001130:	2000003c 	.word	0x2000003c
 8001134:	08008444 	.word	0x08008444
 8001138:	2000003c 	.word	0x2000003c
 800113c:	20000178 	.word	0x20000178

08001140 <ADC1_2_IRQHandler>:
 8001140:	e7fe      	b.n	8001140 <ADC1_2_IRQHandler>
	...

08001144 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_Init+0x3c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <HAL_Init+0x3c>)
 8001154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001158:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115a:	2003      	movs	r0, #3
 800115c:	f000 f962 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001160:	2000      	movs	r0, #0
 8001162:	f000 f80f 	bl	8001184 <HAL_InitTick>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d002      	beq.n	8001172 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	e001      	b.n	8001176 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001172:	f7ff fe27 	bl	8000dc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001176:	79fb      	ldrb	r3, [r7, #7]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40022000 	.word	0x40022000

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <HAL_InitTick+0x6c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d023      	beq.n	80011e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_InitTick+0x70>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_InitTick+0x6c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f96d 	bl	800148e <HAL_SYSTICK_Config>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10f      	bne.n	80011da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d809      	bhi.n	80011d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f000 f937 	bl	800143a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011cc:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_InitTick+0x74>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e007      	b.n	80011e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	e004      	b.n	80011e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	e001      	b.n	80011e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000038 	.word	0x20000038
 80011f4:	20000030 	.word	0x20000030
 80011f8:	20000034 	.word	0x20000034

080011fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x20>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	461a      	mov	r2, r3
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_IncTick+0x24>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4413      	add	r3, r2
 800120c:	4a04      	ldr	r2, [pc, #16]	; (8001220 <HAL_IncTick+0x24>)
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000038 	.word	0x20000038
 8001220:	20000174 	.word	0x20000174

08001224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return uwTick;
 8001228:	4b03      	ldr	r3, [pc, #12]	; (8001238 <HAL_GetTick+0x14>)
 800122a:	681b      	ldr	r3, [r3, #0]
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	20000174 	.word	0x20000174

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff ffee 	bl	8001224 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <HAL_Delay+0x44>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001262:	bf00      	nop
 8001264:	f7ff ffde 	bl	8001224 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000038 	.word	0x20000038

08001284 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a0:	4013      	ands	r3, r2
 80012a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b6:	4a04      	ldr	r2, [pc, #16]	; (80012c8 <__NVIC_SetPriorityGrouping+0x44>)
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	60d3      	str	r3, [r2, #12]
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <__NVIC_GetPriorityGrouping+0x18>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	0a1b      	lsrs	r3, r3, #8
 80012d6:	f003 0307 	and.w	r3, r3, #7
}
 80012da:	4618      	mov	r0, r3
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	db0b      	blt.n	8001312 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	f003 021f 	and.w	r2, r3, #31
 8001300:	4907      	ldr	r1, [pc, #28]	; (8001320 <__NVIC_EnableIRQ+0x38>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	095b      	lsrs	r3, r3, #5
 8001308:	2001      	movs	r0, #1
 800130a:	fa00 f202 	lsl.w	r2, r0, r2
 800130e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f0:	d301      	bcc.n	80013f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00f      	b.n	8001416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <SysTick_Config+0x40>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fe:	210f      	movs	r1, #15
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f7ff ff8e 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SysTick_Config+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <SysTick_Config+0x40>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff29 	bl	8001284 <__NVIC_SetPriorityGrouping>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff3e 	bl	80012cc <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff8e 	bl	8001378 <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5d 	bl	8001324 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff31 	bl	80012e8 <__NVIC_EnableIRQ>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffa2 	bl	80013e0 <SysTick_Config>
 800149c:	4603      	mov	r3, r0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e014      	b.n	80014e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	791b      	ldrb	r3, [r3, #4]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d105      	bne.n	80014ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff fc9f 	bl	8000e0c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2202      	movs	r2, #2
 80014d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2201      	movs	r2, #1
 80014de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
 80014f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	795b      	ldrb	r3, [r3, #5]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <HAL_DAC_Start+0x16>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e03b      	b.n	8001578 <HAL_DAC_Start+0x8e>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2202      	movs	r2, #2
 800150a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6819      	ldr	r1, [r3, #0]
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f003 0310 	and.w	r3, r3, #16
 8001518:	2201      	movs	r2, #1
 800151a:	409a      	lsls	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10f      	bne.n	800154a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001534:	2b04      	cmp	r3, #4
 8001536:	d118      	bne.n	800156a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0201 	orr.w	r2, r2, #1
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	e00f      	b.n	800156a <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001554:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001558:	d107      	bne.n	800156a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f042 0202 	orr.w	r2, r2, #2
 8001568:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2201      	movs	r2, #1
 800156e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800159a:	d120      	bne.n	80015de <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015aa:	d118      	bne.n	80015de <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2204      	movs	r2, #4
 80015b0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	f043 0201 	orr.w	r2, r3, #1
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015d6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f852 	bl	8001682 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015ec:	d120      	bne.n	8001630 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015fc:	d118      	bne.n	8001630 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2204      	movs	r2, #4
 8001602:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	f043 0202 	orr.w	r2, r3, #2
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001618:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001628:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 f95a 	bl	80018e4 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
 8001644:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d105      	bne.n	8001662 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	3308      	adds	r3, #8
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	e004      	b.n	800166c <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4413      	add	r3, r2
 8001668:	3314      	adds	r3, #20
 800166a:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	461a      	mov	r2, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	371c      	adds	r7, #28
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b088      	sub	sp, #32
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	795b      	ldrb	r3, [r3, #5]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d101      	bne.n	80016b2 <HAL_DAC_ConfigChannel+0x1c>
 80016ae:	2302      	movs	r3, #2
 80016b0:	e114      	b.n	80018dc <HAL_DAC_ConfigChannel+0x246>
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2201      	movs	r2, #1
 80016b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2202      	movs	r2, #2
 80016bc:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	f040 8081 	bne.w	80017ca <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80016c8:	f7ff fdac 	bl	8001224 <HAL_GetTick>
 80016cc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d140      	bne.n	8001756 <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80016d4:	e018      	b.n	8001708 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80016d6:	f7ff fda5 	bl	8001224 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d911      	bls.n	8001708 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d00a      	beq.n	8001708 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	f043 0208 	orr.w	r2, r3, #8
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2203      	movs	r2, #3
 8001702:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e0e9      	b.n	80018dc <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1df      	bne.n	80016d6 <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff fd90 	bl	800123c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	6992      	ldr	r2, [r2, #24]
 8001724:	641a      	str	r2, [r3, #64]	; 0x40
 8001726:	e023      	b.n	8001770 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8001728:	f7ff fd7c 	bl	8001224 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b01      	cmp	r3, #1
 8001734:	d90f      	bls.n	8001756 <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800173c:	2b00      	cmp	r3, #0
 800173e:	da0a      	bge.n	8001756 <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	f043 0208 	orr.w	r2, r3, #8
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2203      	movs	r2, #3
 8001750:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e0c2      	b.n	80018dc <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175c:	2b00      	cmp	r3, #0
 800175e:	dbe3      	blt.n	8001728 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff fd6b 	bl	800123c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	6992      	ldr	r2, [r2, #24]
 800176e:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	ea02 0103 	and.w	r1, r2, r3
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	69da      	ldr	r2, [r3, #28]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	409a      	lsls	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	21ff      	movs	r1, #255	; 0xff
 80017ac:	fa01 f303 	lsl.w	r3, r1, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	ea02 0103 	and.w	r1, r2, r3
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	6a1a      	ldr	r2, [r3, #32]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f003 0310 	and.w	r3, r3, #16
 80017c0:	409a      	lsls	r2, r3
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	430a      	orrs	r2, r1
 80017c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d11d      	bne.n	800180e <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d8:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f003 0310 	and.w	r3, r3, #16
 80017e0:	221f      	movs	r2, #31
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001814:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	2207      	movs	r2, #7
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	431a      	orrs	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4313      	orrs	r3, r2
 800183a:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6819      	ldr	r1, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43da      	mvns	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	400a      	ands	r2, r1
 8001872:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f003 0310 	and.w	r3, r3, #16
 8001882:	f640 72fc 	movw	r2, #4092	; 0xffc
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6819      	ldr	r1, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0310 	and.w	r3, r3, #16
 80018be:	22c0      	movs	r2, #192	; 0xc0
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43da      	mvns	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	400a      	ands	r2, r1
 80018cc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3720      	adds	r7, #32
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d008      	beq.n	8001922 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2204      	movs	r2, #4
 8001914:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e022      	b.n	8001968 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 020e 	bic.w	r2, r2, #14
 8001930:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0201 	bic.w	r2, r2, #1
 8001940:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	f003 021c 	and.w	r2, r3, #28
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	2101      	movs	r1, #1
 8001950:	fa01 f202 	lsl.w	r2, r1, r2
 8001954:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2201      	movs	r2, #1
 800195a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d005      	beq.n	8001998 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2204      	movs	r2, #4
 8001990:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
 8001996:	e029      	b.n	80019ec <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 020e 	bic.w	r2, r2, #14
 80019a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0201 	bic.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019bc:	f003 021c 	and.w	r2, r3, #28
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	2101      	movs	r1, #1
 80019c6:	fa01 f202 	lsl.w	r2, r1, r2
 80019ca:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	4798      	blx	r3
    }
  }
  return status;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b087      	sub	sp, #28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a06:	e17f      	b.n	8001d08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	4013      	ands	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	f000 8171 	beq.w	8001d02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d005      	beq.n	8001a38 <HAL_GPIO_Init+0x40>
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d130      	bne.n	8001a9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	2203      	movs	r2, #3
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a6e:	2201      	movs	r2, #1
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	f003 0201 	and.w	r2, r3, #1
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	2b03      	cmp	r3, #3
 8001aa4:	d118      	bne.n	8001ad8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001aac:	2201      	movs	r2, #1
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	08db      	lsrs	r3, r3, #3
 8001ac2:	f003 0201 	and.w	r2, r3, #1
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d017      	beq.n	8001b14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d123      	bne.n	8001b68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	6939      	ldr	r1, [r7, #16]
 8001b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80ac 	beq.w	8001d02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	4b5f      	ldr	r3, [pc, #380]	; (8001d28 <HAL_GPIO_Init+0x330>)
 8001bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bae:	4a5e      	ldr	r2, [pc, #376]	; (8001d28 <HAL_GPIO_Init+0x330>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bb6:	4b5c      	ldr	r3, [pc, #368]	; (8001d28 <HAL_GPIO_Init+0x330>)
 8001bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001bc2:	4a5a      	ldr	r2, [pc, #360]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3302      	adds	r3, #2
 8001bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	220f      	movs	r2, #15
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bec:	d025      	beq.n	8001c3a <HAL_GPIO_Init+0x242>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4f      	ldr	r2, [pc, #316]	; (8001d30 <HAL_GPIO_Init+0x338>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d01f      	beq.n	8001c36 <HAL_GPIO_Init+0x23e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4e      	ldr	r2, [pc, #312]	; (8001d34 <HAL_GPIO_Init+0x33c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d019      	beq.n	8001c32 <HAL_GPIO_Init+0x23a>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4d      	ldr	r2, [pc, #308]	; (8001d38 <HAL_GPIO_Init+0x340>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d013      	beq.n	8001c2e <HAL_GPIO_Init+0x236>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4c      	ldr	r2, [pc, #304]	; (8001d3c <HAL_GPIO_Init+0x344>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d00d      	beq.n	8001c2a <HAL_GPIO_Init+0x232>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4b      	ldr	r2, [pc, #300]	; (8001d40 <HAL_GPIO_Init+0x348>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d007      	beq.n	8001c26 <HAL_GPIO_Init+0x22e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4a      	ldr	r2, [pc, #296]	; (8001d44 <HAL_GPIO_Init+0x34c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d101      	bne.n	8001c22 <HAL_GPIO_Init+0x22a>
 8001c1e:	2306      	movs	r3, #6
 8001c20:	e00c      	b.n	8001c3c <HAL_GPIO_Init+0x244>
 8001c22:	2307      	movs	r3, #7
 8001c24:	e00a      	b.n	8001c3c <HAL_GPIO_Init+0x244>
 8001c26:	2305      	movs	r3, #5
 8001c28:	e008      	b.n	8001c3c <HAL_GPIO_Init+0x244>
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x244>
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e004      	b.n	8001c3c <HAL_GPIO_Init+0x244>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e002      	b.n	8001c3c <HAL_GPIO_Init+0x244>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_GPIO_Init+0x244>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	f002 0203 	and.w	r2, r2, #3
 8001c42:	0092      	lsls	r2, r2, #2
 8001c44:	4093      	lsls	r3, r2
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c4c:	4937      	ldr	r1, [pc, #220]	; (8001d2c <HAL_GPIO_Init+0x334>)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c5a:	4b3b      	ldr	r3, [pc, #236]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c7e:	4a32      	ldr	r2, [pc, #200]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c84:	4b30      	ldr	r3, [pc, #192]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ca8:	4a27      	ldr	r2, [pc, #156]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cae:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cd2:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cfc:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <HAL_GPIO_Init+0x350>)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	3301      	adds	r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f47f ae78 	bne.w	8001a08 <HAL_GPIO_Init+0x10>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	371c      	adds	r7, #28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40010000 	.word	0x40010000
 8001d30:	48000400 	.word	0x48000400
 8001d34:	48000800 	.word	0x48000800
 8001d38:	48000c00 	.word	0x48000c00
 8001d3c:	48001000 	.word	0x48001000
 8001d40:	48001400 	.word	0x48001400
 8001d44:	48001800 	.word	0x48001800
 8001d48:	40010400 	.word	0x40010400

08001d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	807b      	strh	r3, [r7, #2]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d5c:	787b      	ldrb	r3, [r7, #1]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d62:	887a      	ldrh	r2, [r7, #2]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d68:	e002      	b.n	8001d70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d6a:	887a      	ldrh	r2, [r7, #2]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	695b      	ldr	r3, [r3, #20]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4013      	ands	r3, r2
 8001d94:	041a      	lsls	r2, r3, #16
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	43d9      	mvns	r1, r3
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	400b      	ands	r3, r1
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d006      	beq.n	8001dd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fd4c 	bl	800086c <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40010400 	.word	0x40010400

08001de0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	40007000 	.word	0x40007000

08001dfc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e0a:	d130      	bne.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e0c:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e18:	d038      	beq.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e1a:	4b20      	ldr	r3, [pc, #128]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e22:	4a1e      	ldr	r2, [pc, #120]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e28:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2232      	movs	r2, #50	; 0x32
 8001e30:	fb02 f303 	mul.w	r3, r2, r3
 8001e34:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e36:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3a:	0c9b      	lsrs	r3, r3, #18
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e40:	e002      	b.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e48:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e54:	d102      	bne.n	8001e5c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1f2      	bne.n	8001e42 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e5c:	4b0f      	ldr	r3, [pc, #60]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e68:	d110      	bne.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e00f      	b.n	8001e8e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7a:	d007      	beq.n	8001e8c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e7c:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e84:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	20000030 	.word	0x20000030
 8001ea4:	431bde83 	.word	0x431bde83

08001ea8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e3ca      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eba:	4b97      	ldr	r3, [pc, #604]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec4:	4b94      	ldr	r3, [pc, #592]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80e4 	beq.w	80020a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x4a>
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	f040 808b 	bne.w	8002000 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	f040 8087 	bne.w	8002000 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ef2:	4b89      	ldr	r3, [pc, #548]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_RCC_OscConfig+0x62>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e3a2      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1a      	ldr	r2, [r3, #32]
 8001f0e:	4b82      	ldr	r3, [pc, #520]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d004      	beq.n	8001f24 <HAL_RCC_OscConfig+0x7c>
 8001f1a:	4b7f      	ldr	r3, [pc, #508]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f22:	e005      	b.n	8001f30 <HAL_RCC_OscConfig+0x88>
 8001f24:	4b7c      	ldr	r3, [pc, #496]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d223      	bcs.n	8001f7c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 fd55 	bl	80029e8 <RCC_SetFlashLatencyFromMSIRange>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e383      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f48:	4b73      	ldr	r3, [pc, #460]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a72      	ldr	r2, [pc, #456]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f4e:	f043 0308 	orr.w	r3, r3, #8
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b70      	ldr	r3, [pc, #448]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	496d      	ldr	r1, [pc, #436]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f66:	4b6c      	ldr	r3, [pc, #432]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	4968      	ldr	r1, [pc, #416]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	604b      	str	r3, [r1, #4]
 8001f7a:	e025      	b.n	8001fc8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f7c:	4b66      	ldr	r3, [pc, #408]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a65      	ldr	r2, [pc, #404]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f82:	f043 0308 	orr.w	r3, r3, #8
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4960      	ldr	r1, [pc, #384]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9a:	4b5f      	ldr	r3, [pc, #380]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	495b      	ldr	r1, [pc, #364]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d109      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 fd15 	bl	80029e8 <RCC_SetFlashLatencyFromMSIRange>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e343      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fc8:	f000 fc4a 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	4b52      	ldr	r3, [pc, #328]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	4950      	ldr	r1, [pc, #320]	; (800211c <HAL_RCC_OscConfig+0x274>)
 8001fda:	5ccb      	ldrb	r3, [r1, r3]
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe4:	4a4e      	ldr	r2, [pc, #312]	; (8002120 <HAL_RCC_OscConfig+0x278>)
 8001fe6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001fe8:	4b4e      	ldr	r3, [pc, #312]	; (8002124 <HAL_RCC_OscConfig+0x27c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff f8c9 	bl	8001184 <HAL_InitTick>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d052      	beq.n	80020a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	e327      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d032      	beq.n	800206e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002008:	4b43      	ldr	r3, [pc, #268]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a42      	ldr	r2, [pc, #264]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002014:	f7ff f906 	bl	8001224 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800201c:	f7ff f902 	bl	8001224 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e310      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800202e:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d0f0      	beq.n	800201c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800203a:	4b37      	ldr	r3, [pc, #220]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a36      	ldr	r2, [pc, #216]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002040:	f043 0308 	orr.w	r3, r3, #8
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b34      	ldr	r3, [pc, #208]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	4931      	ldr	r1, [pc, #196]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002058:	4b2f      	ldr	r3, [pc, #188]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	021b      	lsls	r3, r3, #8
 8002066:	492c      	ldr	r1, [pc, #176]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
 800206c:	e01a      	b.n	80020a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a29      	ldr	r2, [pc, #164]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800207a:	f7ff f8d3 	bl	8001224 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002082:	f7ff f8cf 	bl	8001224 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e2dd      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f0      	bne.n	8002082 <HAL_RCC_OscConfig+0x1da>
 80020a0:	e000      	b.n	80020a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d074      	beq.n	800219a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d005      	beq.n	80020c2 <HAL_RCC_OscConfig+0x21a>
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	2b0c      	cmp	r3, #12
 80020ba:	d10e      	bne.n	80020da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d10b      	bne.n	80020da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d064      	beq.n	8002198 <HAL_RCC_OscConfig+0x2f0>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d160      	bne.n	8002198 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e2ba      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x24a>
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 80020ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	e026      	b.n	8002140 <HAL_RCC_OscConfig+0x298>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fa:	d115      	bne.n	8002128 <HAL_RCC_OscConfig+0x280>
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a05      	ldr	r2, [pc, #20]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 8002102:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a02      	ldr	r2, [pc, #8]	; (8002118 <HAL_RCC_OscConfig+0x270>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002112:	6013      	str	r3, [r2, #0]
 8002114:	e014      	b.n	8002140 <HAL_RCC_OscConfig+0x298>
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	080083ec 	.word	0x080083ec
 8002120:	20000030 	.word	0x20000030
 8002124:	20000034 	.word	0x20000034
 8002128:	4ba0      	ldr	r3, [pc, #640]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a9f      	ldr	r2, [pc, #636]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800212e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	4b9d      	ldr	r3, [pc, #628]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a9c      	ldr	r2, [pc, #624]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800213a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d013      	beq.n	8002170 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7ff f86c 	bl	8001224 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002150:	f7ff f868 	bl	8001224 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e276      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002162:	4b92      	ldr	r3, [pc, #584]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0f0      	beq.n	8002150 <HAL_RCC_OscConfig+0x2a8>
 800216e:	e014      	b.n	800219a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7ff f858 	bl	8001224 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff f854 	bl	8001224 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e262      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800218a:	4b88      	ldr	r3, [pc, #544]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x2d0>
 8002196:	e000      	b.n	800219a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d060      	beq.n	8002268 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d005      	beq.n	80021b8 <HAL_RCC_OscConfig+0x310>
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d119      	bne.n	80021e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d116      	bne.n	80021e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021b8:	4b7c      	ldr	r3, [pc, #496]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_RCC_OscConfig+0x328>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e23f      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d0:	4b76      	ldr	r3, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	061b      	lsls	r3, r3, #24
 80021de:	4973      	ldr	r1, [pc, #460]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e4:	e040      	b.n	8002268 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d023      	beq.n	8002236 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021ee:	4b6f      	ldr	r3, [pc, #444]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a6e      	ldr	r2, [pc, #440]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80021f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fa:	f7ff f813 	bl	8001224 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002202:	f7ff f80f 	bl	8001224 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e21d      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002214:	4b65      	ldr	r3, [pc, #404]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0f0      	beq.n	8002202 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002220:	4b62      	ldr	r3, [pc, #392]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	691b      	ldr	r3, [r3, #16]
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	495f      	ldr	r1, [pc, #380]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002230:	4313      	orrs	r3, r2
 8002232:	604b      	str	r3, [r1, #4]
 8002234:	e018      	b.n	8002268 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002236:	4b5d      	ldr	r3, [pc, #372]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a5c      	ldr	r2, [pc, #368]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800223c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002242:	f7fe ffef 	bl	8001224 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224a:	f7fe ffeb 	bl	8001224 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e1f9      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800225c:	4b53      	ldr	r3, [pc, #332]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d03c      	beq.n	80022ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01c      	beq.n	80022b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227c:	4b4b      	ldr	r3, [pc, #300]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800227e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002282:	4a4a      	ldr	r2, [pc, #296]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7fe ffca 	bl	8001224 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002294:	f7fe ffc6 	bl	8001224 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e1d4      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022a6:	4b41      	ldr	r3, [pc, #260]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80022a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0ef      	beq.n	8002294 <HAL_RCC_OscConfig+0x3ec>
 80022b4:	e01b      	b.n	80022ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b6:	4b3d      	ldr	r3, [pc, #244]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80022b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022bc:	4a3b      	ldr	r2, [pc, #236]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80022be:	f023 0301 	bic.w	r3, r3, #1
 80022c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c6:	f7fe ffad 	bl	8001224 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ce:	f7fe ffa9 	bl	8001224 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1b7      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022e0:	4b32      	ldr	r3, [pc, #200]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80022e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1ef      	bne.n	80022ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 80a6 	beq.w	8002448 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fc:	2300      	movs	r3, #0
 80022fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002300:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10d      	bne.n	8002328 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230c:	4b27      	ldr	r3, [pc, #156]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800230e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002310:	4a26      	ldr	r2, [pc, #152]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002316:	6593      	str	r3, [r2, #88]	; 0x58
 8002318:	4b24      	ldr	r3, [pc, #144]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800231a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002324:	2301      	movs	r3, #1
 8002326:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002328:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <HAL_RCC_OscConfig+0x508>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d118      	bne.n	8002366 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002334:	4b1e      	ldr	r3, [pc, #120]	; (80023b0 <HAL_RCC_OscConfig+0x508>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1d      	ldr	r2, [pc, #116]	; (80023b0 <HAL_RCC_OscConfig+0x508>)
 800233a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002340:	f7fe ff70 	bl	8001224 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002348:	f7fe ff6c 	bl	8001224 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e17a      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <HAL_RCC_OscConfig+0x508>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d108      	bne.n	8002380 <HAL_RCC_OscConfig+0x4d8>
 800236e:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002374:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800237e:	e029      	b.n	80023d4 <HAL_RCC_OscConfig+0x52c>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b05      	cmp	r3, #5
 8002386:	d115      	bne.n	80023b4 <HAL_RCC_OscConfig+0x50c>
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	4a07      	ldr	r2, [pc, #28]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 800239a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800239e:	4a03      	ldr	r2, [pc, #12]	; (80023ac <HAL_RCC_OscConfig+0x504>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023a8:	e014      	b.n	80023d4 <HAL_RCC_OscConfig+0x52c>
 80023aa:	bf00      	nop
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40007000 	.word	0x40007000
 80023b4:	4b9c      	ldr	r3, [pc, #624]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ba:	4a9b      	ldr	r2, [pc, #620]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c4:	4b98      	ldr	r3, [pc, #608]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80023c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ca:	4a97      	ldr	r2, [pc, #604]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d016      	beq.n	800240a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023dc:	f7fe ff22 	bl	8001224 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e4:	f7fe ff1e 	bl	8001224 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e12a      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023fa:	4b8b      	ldr	r3, [pc, #556]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d0ed      	beq.n	80023e4 <HAL_RCC_OscConfig+0x53c>
 8002408:	e015      	b.n	8002436 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800240a:	f7fe ff0b 	bl	8001224 <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002410:	e00a      	b.n	8002428 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002412:	f7fe ff07 	bl	8001224 <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002420:	4293      	cmp	r3, r2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e113      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002428:	4b7f      	ldr	r3, [pc, #508]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ed      	bne.n	8002412 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002436:	7ffb      	ldrb	r3, [r7, #31]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d105      	bne.n	8002448 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800243c:	4b7a      	ldr	r3, [pc, #488]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 800243e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002440:	4a79      	ldr	r2, [pc, #484]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 8002442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002446:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	2b00      	cmp	r3, #0
 800244e:	f000 80fe 	beq.w	800264e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	2b02      	cmp	r3, #2
 8002458:	f040 80d0 	bne.w	80025fc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800245c:	4b72      	ldr	r3, [pc, #456]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f003 0203 	and.w	r2, r3, #3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	429a      	cmp	r2, r3
 800246e:	d130      	bne.n	80024d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	3b01      	subs	r3, #1
 800247c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d127      	bne.n	80024d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d11f      	bne.n	80024d2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800249c:	2a07      	cmp	r2, #7
 800249e:	bf14      	ite	ne
 80024a0:	2201      	movne	r2, #1
 80024a2:	2200      	moveq	r2, #0
 80024a4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d113      	bne.n	80024d2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b4:	085b      	lsrs	r3, r3, #1
 80024b6:	3b01      	subs	r3, #1
 80024b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d109      	bne.n	80024d2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	085b      	lsrs	r3, r3, #1
 80024ca:	3b01      	subs	r3, #1
 80024cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d06e      	beq.n	80025b0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b0c      	cmp	r3, #12
 80024d6:	d069      	beq.n	80025ac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80024d8:	4b53      	ldr	r3, [pc, #332]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80024e4:	4b50      	ldr	r3, [pc, #320]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e0ad      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80024f4:	4b4c      	ldr	r3, [pc, #304]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a4b      	ldr	r2, [pc, #300]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80024fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024fe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002500:	f7fe fe90 	bl	8001224 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002508:	f7fe fe8c 	bl	8001224 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e09a      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251a:	4b43      	ldr	r3, [pc, #268]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002526:	4b40      	ldr	r3, [pc, #256]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	4b40      	ldr	r3, [pc, #256]	; (800262c <HAL_RCC_OscConfig+0x784>)
 800252c:	4013      	ands	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002536:	3a01      	subs	r2, #1
 8002538:	0112      	lsls	r2, r2, #4
 800253a:	4311      	orrs	r1, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002540:	0212      	lsls	r2, r2, #8
 8002542:	4311      	orrs	r1, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002548:	0852      	lsrs	r2, r2, #1
 800254a:	3a01      	subs	r2, #1
 800254c:	0552      	lsls	r2, r2, #21
 800254e:	4311      	orrs	r1, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002554:	0852      	lsrs	r2, r2, #1
 8002556:	3a01      	subs	r2, #1
 8002558:	0652      	lsls	r2, r2, #25
 800255a:	4311      	orrs	r1, r2
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002560:	0912      	lsrs	r2, r2, #4
 8002562:	0452      	lsls	r2, r2, #17
 8002564:	430a      	orrs	r2, r1
 8002566:	4930      	ldr	r1, [pc, #192]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 8002568:	4313      	orrs	r3, r2
 800256a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800256c:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a2d      	ldr	r2, [pc, #180]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 8002572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002576:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4a2a      	ldr	r2, [pc, #168]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 800257e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002582:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002584:	f7fe fe4e 	bl	8001224 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258c:	f7fe fe4a 	bl	8001224 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e058      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800259e:	4b22      	ldr	r3, [pc, #136]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025aa:	e050      	b.n	800264e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e04f      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d148      	bne.n	800264e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025bc:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a19      	ldr	r2, [pc, #100]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80025c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025c8:	4b17      	ldr	r3, [pc, #92]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a16      	ldr	r2, [pc, #88]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80025ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025d4:	f7fe fe26 	bl	8001224 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7fe fe22 	bl	8001224 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e030      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ee:	4b0e      	ldr	r3, [pc, #56]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x734>
 80025fa:	e028      	b.n	800264e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d023      	beq.n	800264a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a08      	ldr	r2, [pc, #32]	; (8002628 <HAL_RCC_OscConfig+0x780>)
 8002608:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800260c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7fe fe09 	bl	8001224 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002614:	e00c      	b.n	8002630 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002616:	f7fe fe05 	bl	8001224 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d905      	bls.n	8002630 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e013      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
 8002628:	40021000 	.word	0x40021000
 800262c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_RCC_OscConfig+0x7b0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1ec      	bne.n	8002616 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_RCC_OscConfig+0x7b0>)
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	4905      	ldr	r1, [pc, #20]	; (8002658 <HAL_RCC_OscConfig+0x7b0>)
 8002642:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_RCC_OscConfig+0x7b4>)
 8002644:	4013      	ands	r3, r2
 8002646:	60cb      	str	r3, [r1, #12]
 8002648:	e001      	b.n	800264e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3720      	adds	r7, #32
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40021000 	.word	0x40021000
 800265c:	feeefffc 	.word	0xfeeefffc

08002660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0e7      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002674:	4b75      	ldr	r3, [pc, #468]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d910      	bls.n	80026a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b72      	ldr	r3, [pc, #456]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 0207 	bic.w	r2, r3, #7
 800268a:	4970      	ldr	r1, [pc, #448]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b6e      	ldr	r3, [pc, #440]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0cf      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d010      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	4b66      	ldr	r3, [pc, #408]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026bc:	429a      	cmp	r2, r3
 80026be:	d908      	bls.n	80026d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c0:	4b63      	ldr	r3, [pc, #396]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4960      	ldr	r1, [pc, #384]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d04c      	beq.n	8002778 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d107      	bne.n	80026f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e6:	4b5a      	ldr	r3, [pc, #360]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d121      	bne.n	8002736 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e0a6      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d107      	bne.n	800270e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fe:	4b54      	ldr	r3, [pc, #336]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d115      	bne.n	8002736 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e09a      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d107      	bne.n	8002726 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002716:	4b4e      	ldr	r3, [pc, #312]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e08e      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002726:	4b4a      	ldr	r3, [pc, #296]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e086      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002736:	4b46      	ldr	r3, [pc, #280]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f023 0203 	bic.w	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	4943      	ldr	r1, [pc, #268]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002744:	4313      	orrs	r3, r2
 8002746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002748:	f7fe fd6c 	bl	8001224 <HAL_GetTick>
 800274c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274e:	e00a      	b.n	8002766 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002750:	f7fe fd68 	bl	8001224 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e06e      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002766:	4b3a      	ldr	r3, [pc, #232]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 020c 	and.w	r2, r3, #12
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	429a      	cmp	r2, r3
 8002776:	d1eb      	bne.n	8002750 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d010      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	4b31      	ldr	r3, [pc, #196]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002790:	429a      	cmp	r2, r3
 8002792:	d208      	bcs.n	80027a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	492b      	ldr	r1, [pc, #172]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a6:	4b29      	ldr	r3, [pc, #164]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d210      	bcs.n	80027d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b4:	4b25      	ldr	r3, [pc, #148]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 0207 	bic.w	r2, r3, #7
 80027bc:	4923      	ldr	r1, [pc, #140]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c4:	4b21      	ldr	r3, [pc, #132]	; (800284c <HAL_RCC_ClockConfig+0x1ec>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e036      	b.n	8002844 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e2:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	4918      	ldr	r1, [pc, #96]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002800:	4b13      	ldr	r3, [pc, #76]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4910      	ldr	r1, [pc, #64]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 8002810:	4313      	orrs	r3, r2
 8002812:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002814:	f000 f824 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 8002818:	4602      	mov	r2, r0
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <HAL_RCC_ClockConfig+0x1f0>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	091b      	lsrs	r3, r3, #4
 8002820:	f003 030f 	and.w	r3, r3, #15
 8002824:	490b      	ldr	r1, [pc, #44]	; (8002854 <HAL_RCC_ClockConfig+0x1f4>)
 8002826:	5ccb      	ldrb	r3, [r1, r3]
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
 8002830:	4a09      	ldr	r2, [pc, #36]	; (8002858 <HAL_RCC_ClockConfig+0x1f8>)
 8002832:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <HAL_RCC_ClockConfig+0x1fc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe fca3 	bl	8001184 <HAL_InitTick>
 800283e:	4603      	mov	r3, r0
 8002840:	72fb      	strb	r3, [r7, #11]

  return status;
 8002842:	7afb      	ldrb	r3, [r7, #11]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40022000 	.word	0x40022000
 8002850:	40021000 	.word	0x40021000
 8002854:	080083ec 	.word	0x080083ec
 8002858:	20000030 	.word	0x20000030
 800285c:	20000034 	.word	0x20000034

08002860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800286e:	4b3e      	ldr	r3, [pc, #248]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002878:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f003 0303 	and.w	r3, r3, #3
 8002880:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x34>
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d121      	bne.n	80028d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d11e      	bne.n	80028d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002894:	4b34      	ldr	r3, [pc, #208]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0308 	and.w	r3, r3, #8
 800289c:	2b00      	cmp	r3, #0
 800289e:	d107      	bne.n	80028b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028a0:	4b31      	ldr	r3, [pc, #196]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a6:	0a1b      	lsrs	r3, r3, #8
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	e005      	b.n	80028bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028b0:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	091b      	lsrs	r3, r3, #4
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80028bc:	4a2b      	ldr	r2, [pc, #172]	; (800296c <HAL_RCC_GetSysClockFreq+0x10c>)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10d      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028d0:	e00a      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d102      	bne.n	80028de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028d8:	4b25      	ldr	r3, [pc, #148]	; (8002970 <HAL_RCC_GetSysClockFreq+0x110>)
 80028da:	61bb      	str	r3, [r7, #24]
 80028dc:	e004      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028e4:	4b23      	ldr	r3, [pc, #140]	; (8002974 <HAL_RCC_GetSysClockFreq+0x114>)
 80028e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	2b0c      	cmp	r3, #12
 80028ec:	d134      	bne.n	8002958 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ee:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d003      	beq.n	8002906 <HAL_RCC_GetSysClockFreq+0xa6>
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d003      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0xac>
 8002904:	e005      	b.n	8002912 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002906:	4b1a      	ldr	r3, [pc, #104]	; (8002970 <HAL_RCC_GetSysClockFreq+0x110>)
 8002908:	617b      	str	r3, [r7, #20]
      break;
 800290a:	e005      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800290c:	4b19      	ldr	r3, [pc, #100]	; (8002974 <HAL_RCC_GetSysClockFreq+0x114>)
 800290e:	617b      	str	r3, [r7, #20]
      break;
 8002910:	e002      	b.n	8002918 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	617b      	str	r3, [r7, #20]
      break;
 8002916:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002918:	4b13      	ldr	r3, [pc, #76]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	3301      	adds	r3, #1
 8002924:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	fb03 f202 	mul.w	r2, r3, r2
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_RCC_GetSysClockFreq+0x108>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	0e5b      	lsrs	r3, r3, #25
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	3301      	adds	r3, #1
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	fbb2 f3f3 	udiv	r3, r2, r3
 8002956:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002958:	69bb      	ldr	r3, [r7, #24]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40021000 	.word	0x40021000
 800296c:	08008404 	.word	0x08008404
 8002970:	00f42400 	.word	0x00f42400
 8002974:	007a1200 	.word	0x007a1200

08002978 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800297c:	4b03      	ldr	r3, [pc, #12]	; (800298c <HAL_RCC_GetHCLKFreq+0x14>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	20000030 	.word	0x20000030

08002990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002994:	f7ff fff0 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8002998:	4602      	mov	r2, r0
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	0a1b      	lsrs	r3, r3, #8
 80029a0:	f003 0307 	and.w	r3, r3, #7
 80029a4:	4904      	ldr	r1, [pc, #16]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029a6:	5ccb      	ldrb	r3, [r1, r3]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	080083fc 	.word	0x080083fc

080029bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029c0:	f7ff ffda 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	0adb      	lsrs	r3, r3, #11
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4904      	ldr	r1, [pc, #16]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029d2:	5ccb      	ldrb	r3, [r1, r3]
 80029d4:	f003 031f 	and.w	r3, r3, #31
 80029d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029dc:	4618      	mov	r0, r3
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000
 80029e4:	080083fc 	.word	0x080083fc

080029e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029f4:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a00:	f7ff f9ee 	bl	8001de0 <HAL_PWREx_GetVoltageRange>
 8002a04:	6178      	str	r0, [r7, #20]
 8002a06:	e014      	b.n	8002a32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a08:	4b25      	ldr	r3, [pc, #148]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a0c:	4a24      	ldr	r2, [pc, #144]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6593      	str	r3, [r2, #88]	; 0x58
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002a20:	f7ff f9de 	bl	8001de0 <HAL_PWREx_GetVoltageRange>
 8002a24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2a:	4a1d      	ldr	r2, [pc, #116]	; (8002aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a38:	d10b      	bne.n	8002a52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d919      	bls.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2ba0      	cmp	r3, #160	; 0xa0
 8002a44:	d902      	bls.n	8002a4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a46:	2302      	movs	r3, #2
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	e013      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	e010      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b80      	cmp	r3, #128	; 0x80
 8002a56:	d902      	bls.n	8002a5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a58:	2303      	movs	r3, #3
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	e00a      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b80      	cmp	r3, #128	; 0x80
 8002a62:	d102      	bne.n	8002a6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a64:	2302      	movs	r3, #2
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	e004      	b.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b70      	cmp	r3, #112	; 0x70
 8002a6e:	d101      	bne.n	8002a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a70:	2301      	movs	r3, #1
 8002a72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f023 0207 	bic.w	r2, r3, #7
 8002a7c:	4909      	ldr	r1, [pc, #36]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d001      	beq.n	8002a96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40022000 	.word	0x40022000

08002aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d041      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002acc:	d02a      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ace:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ad2:	d824      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ad4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ada:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ade:	d81e      	bhi.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00a      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae8:	d010      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002aea:	e018      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aec:	4b86      	ldr	r3, [pc, #536]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4a85      	ldr	r2, [pc, #532]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002af8:	e015      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	3304      	adds	r3, #4
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f000 fabb 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002b06:	4603      	mov	r3, r0
 8002b08:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b0a:	e00c      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3320      	adds	r3, #32
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fba6 	bl	8003264 <RCCEx_PLLSAI2_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b1c:	e003      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	74fb      	strb	r3, [r7, #19]
      break;
 8002b22:	e000      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10b      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b2c:	4b76      	ldr	r3, [pc, #472]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b3a:	4973      	ldr	r1, [pc, #460]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b42:	e001      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d041      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b5c:	d02a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b5e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b62:	d824      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b68:	d008      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b6e:	d81e      	bhi.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b78:	d010      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b7a:	e018      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b7c:	4b62      	ldr	r3, [pc, #392]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4a61      	ldr	r2, [pc, #388]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b86:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b88:	e015      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2100      	movs	r1, #0
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 fa73 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b9a:	e00c      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3320      	adds	r3, #32
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fb5e 	bl	8003264 <RCCEx_PLLSAI2_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002bac:	e003      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	74fb      	strb	r3, [r7, #19]
      break;
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10b      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bbc:	4b52      	ldr	r3, [pc, #328]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bca:	494f      	ldr	r1, [pc, #316]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bd2:	e001      	b.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd4:	7cfb      	ldrb	r3, [r7, #19]
 8002bd6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 80a0 	beq.w	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bea:	4b47      	ldr	r3, [pc, #284]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00d      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c00:	4b41      	ldr	r3, [pc, #260]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c04:	4a40      	ldr	r2, [pc, #256]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0c:	4b3e      	ldr	r3, [pc, #248]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c14:	60bb      	str	r3, [r7, #8]
 8002c16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c1c:	4b3b      	ldr	r3, [pc, #236]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a3a      	ldr	r2, [pc, #232]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c26:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c28:	f7fe fafc 	bl	8001224 <HAL_GetTick>
 8002c2c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c2e:	e009      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c30:	f7fe faf8 	bl	8001224 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d902      	bls.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	74fb      	strb	r3, [r7, #19]
        break;
 8002c42:	e005      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c44:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0ef      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d15c      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c56:	4b2c      	ldr	r3, [pc, #176]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c60:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01f      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d019      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c74:	4b24      	ldr	r3, [pc, #144]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c80:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c86:	4a20      	ldr	r2, [pc, #128]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	4a1c      	ldr	r2, [pc, #112]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ca0:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d016      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb2:	f7fe fab7 	bl	8001224 <HAL_GetTick>
 8002cb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb8:	e00b      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cba:	f7fe fab3 	bl	8001224 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d902      	bls.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	74fb      	strb	r3, [r7, #19]
            break;
 8002cd0:	e006      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ec      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf6:	4904      	ldr	r1, [pc, #16]	; (8002d08 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cfe:	e009      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d00:	7cfb      	ldrb	r3, [r7, #19]
 8002d02:	74bb      	strb	r3, [r7, #18]
 8002d04:	e006      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	7cfb      	ldrb	r3, [r7, #19]
 8002d12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d14:	7c7b      	ldrb	r3, [r7, #17]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d105      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d1a:	4b9e      	ldr	r3, [pc, #632]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	4a9d      	ldr	r2, [pc, #628]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d32:	4b98      	ldr	r3, [pc, #608]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	f023 0203 	bic.w	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	4994      	ldr	r1, [pc, #592]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0302 	and.w	r3, r3, #2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d54:	4b8f      	ldr	r3, [pc, #572]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f023 020c 	bic.w	r2, r3, #12
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	498c      	ldr	r1, [pc, #560]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d76:	4b87      	ldr	r3, [pc, #540]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	4983      	ldr	r1, [pc, #524]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d98:	4b7e      	ldr	r3, [pc, #504]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	497b      	ldr	r1, [pc, #492]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0310 	and.w	r3, r3, #16
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002dba:	4b76      	ldr	r3, [pc, #472]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc8:	4972      	ldr	r1, [pc, #456]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ddc:	4b6d      	ldr	r3, [pc, #436]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	496a      	ldr	r1, [pc, #424]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dfe:	4b65      	ldr	r3, [pc, #404]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e0c:	4961      	ldr	r1, [pc, #388]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e20:	4b5c      	ldr	r3, [pc, #368]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2e:	4959      	ldr	r1, [pc, #356]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e42:	4b54      	ldr	r3, [pc, #336]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e50:	4950      	ldr	r1, [pc, #320]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e64:	4b4b      	ldr	r3, [pc, #300]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	4948      	ldr	r1, [pc, #288]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e86:	4b43      	ldr	r3, [pc, #268]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e94:	493f      	ldr	r1, [pc, #252]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d028      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ea8:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eb6:	4937      	ldr	r1, [pc, #220]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec8:	4b32      	ldr	r3, [pc, #200]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a31      	ldr	r2, [pc, #196]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed2:	60d3      	str	r3, [r2, #12]
 8002ed4:	e011      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ede:	d10c      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f8c8 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ef6:	7cfb      	ldrb	r3, [r7, #19]
 8002ef8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d028      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f06:	4b23      	ldr	r3, [pc, #140]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f14:	491f      	ldr	r1, [pc, #124]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f24:	d106      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f26:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	4a1a      	ldr	r2, [pc, #104]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f30:	60d3      	str	r3, [r2, #12]
 8002f32:	e011      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3304      	adds	r3, #4
 8002f42:	2101      	movs	r1, #1
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 f899 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f54:	7cfb      	ldrb	r3, [r7, #19]
 8002f56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d02b      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f72:	4908      	ldr	r1, [pc, #32]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f82:	d109      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f84:	4b03      	ldr	r3, [pc, #12]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	4a02      	ldr	r2, [pc, #8]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f8e:	60d3      	str	r3, [r2, #12]
 8002f90:	e014      	b.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 f867 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fb2:	7cfb      	ldrb	r3, [r7, #19]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d02f      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002fc8:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd6:	4928      	ldr	r1, [pc, #160]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fe6:	d10d      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	3304      	adds	r3, #4
 8002fec:	2102      	movs	r1, #2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 f844 	bl	800307c <RCCEx_PLLSAI1_Config>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ff8:	7cfb      	ldrb	r3, [r7, #19]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d014      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ffe:	7cfb      	ldrb	r3, [r7, #19]
 8003000:	74bb      	strb	r3, [r7, #18]
 8003002:	e011      	b.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800300c:	d10c      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3320      	adds	r3, #32
 8003012:	2102      	movs	r1, #2
 8003014:	4618      	mov	r0, r3
 8003016:	f000 f925 	bl	8003264 <RCCEx_PLLSAI2_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800301e:	7cfb      	ldrb	r3, [r7, #19]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d00a      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003034:	4b10      	ldr	r3, [pc, #64]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800303a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003042:	490d      	ldr	r1, [pc, #52]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003044:	4313      	orrs	r3, r2
 8003046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003066:	4904      	ldr	r1, [pc, #16]	; (8003078 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800306e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40021000 	.word	0x40021000

0800307c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800308a:	4b75      	ldr	r3, [pc, #468]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d018      	beq.n	80030c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003096:	4b72      	ldr	r3, [pc, #456]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	f003 0203 	and.w	r2, r3, #3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d10d      	bne.n	80030c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
       ||
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80030ae:	4b6c      	ldr	r3, [pc, #432]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	091b      	lsrs	r3, r3, #4
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	1c5a      	adds	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
       ||
 80030be:	429a      	cmp	r2, r3
 80030c0:	d047      	beq.n	8003152 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	73fb      	strb	r3, [r7, #15]
 80030c6:	e044      	b.n	8003152 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d018      	beq.n	8003102 <RCCEx_PLLSAI1_Config+0x86>
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d825      	bhi.n	8003120 <RCCEx_PLLSAI1_Config+0xa4>
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d002      	beq.n	80030de <RCCEx_PLLSAI1_Config+0x62>
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d009      	beq.n	80030f0 <RCCEx_PLLSAI1_Config+0x74>
 80030dc:	e020      	b.n	8003120 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030de:	4b60      	ldr	r3, [pc, #384]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d11d      	bne.n	8003126 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ee:	e01a      	b.n	8003126 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030f0:	4b5b      	ldr	r3, [pc, #364]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d116      	bne.n	800312a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003100:	e013      	b.n	800312a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003102:	4b57      	ldr	r3, [pc, #348]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d10f      	bne.n	800312e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800310e:	4b54      	ldr	r3, [pc, #336]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d109      	bne.n	800312e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800311e:	e006      	b.n	800312e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      break;
 8003124:	e004      	b.n	8003130 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003126:	bf00      	nop
 8003128:	e002      	b.n	8003130 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800312a:	bf00      	nop
 800312c:	e000      	b.n	8003130 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800312e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10d      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003136:	4b4a      	ldr	r3, [pc, #296]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	430b      	orrs	r3, r1
 800314c:	4944      	ldr	r1, [pc, #272]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800314e:	4313      	orrs	r3, r2
 8003150:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d17d      	bne.n	8003254 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003158:	4b41      	ldr	r3, [pc, #260]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a40      	ldr	r2, [pc, #256]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800315e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003164:	f7fe f85e 	bl	8001224 <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800316a:	e009      	b.n	8003180 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800316c:	f7fe f85a 	bl	8001224 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d902      	bls.n	8003180 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	73fb      	strb	r3, [r7, #15]
        break;
 800317e:	e005      	b.n	800318c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003180:	4b37      	ldr	r3, [pc, #220]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1ef      	bne.n	800316c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d160      	bne.n	8003254 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d111      	bne.n	80031bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003198:	4b31      	ldr	r3, [pc, #196]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6892      	ldr	r2, [r2, #8]
 80031a8:	0211      	lsls	r1, r2, #8
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	0912      	lsrs	r2, r2, #4
 80031b0:	0452      	lsls	r2, r2, #17
 80031b2:	430a      	orrs	r2, r1
 80031b4:	492a      	ldr	r1, [pc, #168]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	610b      	str	r3, [r1, #16]
 80031ba:	e027      	b.n	800320c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d112      	bne.n	80031e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031c2:	4b27      	ldr	r3, [pc, #156]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80031ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6892      	ldr	r2, [r2, #8]
 80031d2:	0211      	lsls	r1, r2, #8
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6912      	ldr	r2, [r2, #16]
 80031d8:	0852      	lsrs	r2, r2, #1
 80031da:	3a01      	subs	r2, #1
 80031dc:	0552      	lsls	r2, r2, #21
 80031de:	430a      	orrs	r2, r1
 80031e0:	491f      	ldr	r1, [pc, #124]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	610b      	str	r3, [r1, #16]
 80031e6:	e011      	b.n	800320c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6892      	ldr	r2, [r2, #8]
 80031f8:	0211      	lsls	r1, r2, #8
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6952      	ldr	r2, [r2, #20]
 80031fe:	0852      	lsrs	r2, r2, #1
 8003200:	3a01      	subs	r2, #1
 8003202:	0652      	lsls	r2, r2, #25
 8003204:	430a      	orrs	r2, r1
 8003206:	4916      	ldr	r1, [pc, #88]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003208:	4313      	orrs	r3, r2
 800320a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800320c:	4b14      	ldr	r3, [pc, #80]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a13      	ldr	r2, [pc, #76]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003212:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003216:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003218:	f7fe f804 	bl	8001224 <HAL_GetTick>
 800321c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800321e:	e009      	b.n	8003234 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003220:	f7fe f800 	bl	8001224 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d902      	bls.n	8003234 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	73fb      	strb	r3, [r7, #15]
          break;
 8003232:	e005      	b.n	8003240 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003234:	4b0a      	ldr	r3, [pc, #40]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0ef      	beq.n	8003220 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d106      	bne.n	8003254 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003246:	4b06      	ldr	r3, [pc, #24]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	4904      	ldr	r1, [pc, #16]	; (8003260 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003250:	4313      	orrs	r3, r2
 8003252:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000

08003264 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003272:	4b6a      	ldr	r3, [pc, #424]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d018      	beq.n	80032b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800327e:	4b67      	ldr	r3, [pc, #412]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f003 0203 	and.w	r2, r3, #3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	429a      	cmp	r2, r3
 800328c:	d10d      	bne.n	80032aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
       ||
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003296:	4b61      	ldr	r3, [pc, #388]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	091b      	lsrs	r3, r3, #4
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	1c5a      	adds	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
       ||
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d047      	beq.n	800333a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
 80032ae:	e044      	b.n	800333a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d018      	beq.n	80032ea <RCCEx_PLLSAI2_Config+0x86>
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d825      	bhi.n	8003308 <RCCEx_PLLSAI2_Config+0xa4>
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d002      	beq.n	80032c6 <RCCEx_PLLSAI2_Config+0x62>
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d009      	beq.n	80032d8 <RCCEx_PLLSAI2_Config+0x74>
 80032c4:	e020      	b.n	8003308 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80032c6:	4b55      	ldr	r3, [pc, #340]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d11d      	bne.n	800330e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d6:	e01a      	b.n	800330e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80032d8:	4b50      	ldr	r3, [pc, #320]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d116      	bne.n	8003312 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e8:	e013      	b.n	8003312 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032ea:	4b4c      	ldr	r3, [pc, #304]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10f      	bne.n	8003316 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032f6:	4b49      	ldr	r3, [pc, #292]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d109      	bne.n	8003316 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003306:	e006      	b.n	8003316 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
      break;
 800330c:	e004      	b.n	8003318 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800330e:	bf00      	nop
 8003310:	e002      	b.n	8003318 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003316:	bf00      	nop
    }

    if(status == HAL_OK)
 8003318:	7bfb      	ldrb	r3, [r7, #15]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10d      	bne.n	800333a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800331e:	4b3f      	ldr	r3, [pc, #252]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6819      	ldr	r1, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	430b      	orrs	r3, r1
 8003334:	4939      	ldr	r1, [pc, #228]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003336:	4313      	orrs	r3, r2
 8003338:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d167      	bne.n	8003410 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003340:	4b36      	ldr	r3, [pc, #216]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a35      	ldr	r2, [pc, #212]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800334c:	f7fd ff6a 	bl	8001224 <HAL_GetTick>
 8003350:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003352:	e009      	b.n	8003368 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003354:	f7fd ff66 	bl	8001224 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d902      	bls.n	8003368 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	73fb      	strb	r3, [r7, #15]
        break;
 8003366:	e005      	b.n	8003374 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003368:	4b2c      	ldr	r3, [pc, #176]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1ef      	bne.n	8003354 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d14a      	bne.n	8003410 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d111      	bne.n	80033a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003380:	4b26      	ldr	r3, [pc, #152]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6892      	ldr	r2, [r2, #8]
 8003390:	0211      	lsls	r1, r2, #8
 8003392:	687a      	ldr	r2, [r7, #4]
 8003394:	68d2      	ldr	r2, [r2, #12]
 8003396:	0912      	lsrs	r2, r2, #4
 8003398:	0452      	lsls	r2, r2, #17
 800339a:	430a      	orrs	r2, r1
 800339c:	491f      	ldr	r1, [pc, #124]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	614b      	str	r3, [r1, #20]
 80033a2:	e011      	b.n	80033c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033a4:	4b1d      	ldr	r3, [pc, #116]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80033ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6892      	ldr	r2, [r2, #8]
 80033b4:	0211      	lsls	r1, r2, #8
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6912      	ldr	r2, [r2, #16]
 80033ba:	0852      	lsrs	r2, r2, #1
 80033bc:	3a01      	subs	r2, #1
 80033be:	0652      	lsls	r2, r2, #25
 80033c0:	430a      	orrs	r2, r1
 80033c2:	4916      	ldr	r1, [pc, #88]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80033c8:	4b14      	ldr	r3, [pc, #80]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a13      	ldr	r2, [pc, #76]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d4:	f7fd ff26 	bl	8001224 <HAL_GetTick>
 80033d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033da:	e009      	b.n	80033f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033dc:	f7fd ff22 	bl	8001224 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d902      	bls.n	80033f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	73fb      	strb	r3, [r7, #15]
          break;
 80033ee:	e005      	b.n	80033fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033f0:	4b0a      	ldr	r3, [pc, #40]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ef      	beq.n	80033dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003404:	695a      	ldr	r2, [r3, #20]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	4904      	ldr	r1, [pc, #16]	; (800341c <RCCEx_PLLSAI2_Config+0x1b8>)
 800340c:	4313      	orrs	r3, r2
 800340e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40021000 	.word	0x40021000

08003420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e049      	b.n	80034c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fd fd26 	bl	8000e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3304      	adds	r3, #4
 800345c:	4619      	mov	r1, r3
 800345e:	4610      	mov	r0, r2
 8003460:	f000 fa9a 	bl	8003998 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d001      	beq.n	80034e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e04f      	b.n	8003588 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a23      	ldr	r2, [pc, #140]	; (8003594 <HAL_TIM_Base_Start_IT+0xc4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d01d      	beq.n	8003546 <HAL_TIM_Base_Start_IT+0x76>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003512:	d018      	beq.n	8003546 <HAL_TIM_Base_Start_IT+0x76>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a1f      	ldr	r2, [pc, #124]	; (8003598 <HAL_TIM_Base_Start_IT+0xc8>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d013      	beq.n	8003546 <HAL_TIM_Base_Start_IT+0x76>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1e      	ldr	r2, [pc, #120]	; (800359c <HAL_TIM_Base_Start_IT+0xcc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00e      	beq.n	8003546 <HAL_TIM_Base_Start_IT+0x76>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1c      	ldr	r2, [pc, #112]	; (80035a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d009      	beq.n	8003546 <HAL_TIM_Base_Start_IT+0x76>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1b      	ldr	r2, [pc, #108]	; (80035a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d004      	beq.n	8003546 <HAL_TIM_Base_Start_IT+0x76>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a19      	ldr	r2, [pc, #100]	; (80035a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d115      	bne.n	8003572 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	4b17      	ldr	r3, [pc, #92]	; (80035ac <HAL_TIM_Base_Start_IT+0xdc>)
 800354e:	4013      	ands	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2b06      	cmp	r3, #6
 8003556:	d015      	beq.n	8003584 <HAL_TIM_Base_Start_IT+0xb4>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355e:	d011      	beq.n	8003584 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003570:	e008      	b.n	8003584 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	e000      	b.n	8003586 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003584:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	40012c00 	.word	0x40012c00
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800
 80035a0:	40000c00 	.word	0x40000c00
 80035a4:	40013400 	.word	0x40013400
 80035a8:	40014000 	.word	0x40014000
 80035ac:	00010007 	.word	0x00010007

080035b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d020      	beq.n	8003614 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01b      	beq.n	8003614 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f06f 0202 	mvn.w	r2, #2
 80035e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f9ad 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 8003600:	e005      	b.n	800360e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 f99f 	bl	8003946 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 f9b0 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	d020      	beq.n	8003660 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	d01b      	beq.n	8003660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0204 	mvn.w	r2, #4
 8003630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2202      	movs	r2, #2
 8003636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f987 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f979 	bl	8003946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f98a 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d020      	beq.n	80036ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f003 0308 	and.w	r3, r3, #8
 8003670:	2b00      	cmp	r3, #0
 8003672:	d01b      	beq.n	80036ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f06f 0208 	mvn.w	r2, #8
 800367c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2204      	movs	r2, #4
 8003682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 0303 	and.w	r3, r3, #3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d003      	beq.n	800369a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f961 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 8003698:	e005      	b.n	80036a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f953 	bl	8003946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f964 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d020      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01b      	beq.n	80036f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0210 	mvn.w	r2, #16
 80036c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2208      	movs	r2, #8
 80036ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f93b 	bl	800395a <HAL_TIM_IC_CaptureCallback>
 80036e4:	e005      	b.n	80036f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f92d 	bl	8003946 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f93e 	bl	800396e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00c      	beq.n	800371c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f003 0301 	and.w	r3, r3, #1
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f06f 0201 	mvn.w	r2, #1
 8003714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd f9b4 	bl	8000a84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00c      	beq.n	8003740 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 faf2 	bl	8003d24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00c      	beq.n	8003764 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003750:	2b00      	cmp	r3, #0
 8003752:	d007      	beq.n	8003764 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800375c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 faea 	bl	8003d38 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00c      	beq.n	8003788 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f8fd 	bl	8003982 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00c      	beq.n	80037ac <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	d007      	beq.n	80037ac <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0220 	mvn.w	r2, #32
 80037a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fab2 	bl	8003d10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_TIM_ConfigClockSource+0x1c>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e0b6      	b.n	800393e <HAL_TIM_ConfigClockSource+0x18a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380c:	d03e      	beq.n	800388c <HAL_TIM_ConfigClockSource+0xd8>
 800380e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003812:	f200 8087 	bhi.w	8003924 <HAL_TIM_ConfigClockSource+0x170>
 8003816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381a:	f000 8086 	beq.w	800392a <HAL_TIM_ConfigClockSource+0x176>
 800381e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003822:	d87f      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
 8003824:	2b70      	cmp	r3, #112	; 0x70
 8003826:	d01a      	beq.n	800385e <HAL_TIM_ConfigClockSource+0xaa>
 8003828:	2b70      	cmp	r3, #112	; 0x70
 800382a:	d87b      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
 800382c:	2b60      	cmp	r3, #96	; 0x60
 800382e:	d050      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0x11e>
 8003830:	2b60      	cmp	r3, #96	; 0x60
 8003832:	d877      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
 8003834:	2b50      	cmp	r3, #80	; 0x50
 8003836:	d03c      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0xfe>
 8003838:	2b50      	cmp	r3, #80	; 0x50
 800383a:	d873      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	d058      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0x13e>
 8003840:	2b40      	cmp	r3, #64	; 0x40
 8003842:	d86f      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
 8003844:	2b30      	cmp	r3, #48	; 0x30
 8003846:	d064      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0x15e>
 8003848:	2b30      	cmp	r3, #48	; 0x30
 800384a:	d86b      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
 800384c:	2b20      	cmp	r3, #32
 800384e:	d060      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0x15e>
 8003850:	2b20      	cmp	r3, #32
 8003852:	d867      	bhi.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
 8003854:	2b00      	cmp	r3, #0
 8003856:	d05c      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0x15e>
 8003858:	2b10      	cmp	r3, #16
 800385a:	d05a      	beq.n	8003912 <HAL_TIM_ConfigClockSource+0x15e>
 800385c:	e062      	b.n	8003924 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800386e:	f000 f9a7 	bl	8003bc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003880:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68ba      	ldr	r2, [r7, #8]
 8003888:	609a      	str	r2, [r3, #8]
      break;
 800388a:	e04f      	b.n	800392c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800389c:	f000 f990 	bl	8003bc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ae:	609a      	str	r2, [r3, #8]
      break;
 80038b0:	e03c      	b.n	800392c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038be:	461a      	mov	r2, r3
 80038c0:	f000 f904 	bl	8003acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2150      	movs	r1, #80	; 0x50
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 f95d 	bl	8003b8a <TIM_ITRx_SetConfig>
      break;
 80038d0:	e02c      	b.n	800392c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038de:	461a      	mov	r2, r3
 80038e0:	f000 f923 	bl	8003b2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2160      	movs	r1, #96	; 0x60
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f94d 	bl	8003b8a <TIM_ITRx_SetConfig>
      break;
 80038f0:	e01c      	b.n	800392c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fe:	461a      	mov	r2, r3
 8003900:	f000 f8e4 	bl	8003acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2140      	movs	r1, #64	; 0x40
 800390a:	4618      	mov	r0, r3
 800390c:	f000 f93d 	bl	8003b8a <TIM_ITRx_SetConfig>
      break;
 8003910:	e00c      	b.n	800392c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4619      	mov	r1, r3
 800391c:	4610      	mov	r0, r2
 800391e:	f000 f934 	bl	8003b8a <TIM_ITRx_SetConfig>
      break;
 8003922:	e003      	b.n	800392c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
      break;
 8003928:	e000      	b.n	800392c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800392a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a40      	ldr	r2, [pc, #256]	; (8003aac <TIM_Base_SetConfig+0x114>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d013      	beq.n	80039d8 <TIM_Base_SetConfig+0x40>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b6:	d00f      	beq.n	80039d8 <TIM_Base_SetConfig+0x40>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a3d      	ldr	r2, [pc, #244]	; (8003ab0 <TIM_Base_SetConfig+0x118>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00b      	beq.n	80039d8 <TIM_Base_SetConfig+0x40>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a3c      	ldr	r2, [pc, #240]	; (8003ab4 <TIM_Base_SetConfig+0x11c>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d007      	beq.n	80039d8 <TIM_Base_SetConfig+0x40>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a3b      	ldr	r2, [pc, #236]	; (8003ab8 <TIM_Base_SetConfig+0x120>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_Base_SetConfig+0x40>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a3a      	ldr	r2, [pc, #232]	; (8003abc <TIM_Base_SetConfig+0x124>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d108      	bne.n	80039ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2f      	ldr	r2, [pc, #188]	; (8003aac <TIM_Base_SetConfig+0x114>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01f      	beq.n	8003a32 <TIM_Base_SetConfig+0x9a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f8:	d01b      	beq.n	8003a32 <TIM_Base_SetConfig+0x9a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a2c      	ldr	r2, [pc, #176]	; (8003ab0 <TIM_Base_SetConfig+0x118>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d017      	beq.n	8003a32 <TIM_Base_SetConfig+0x9a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a2b      	ldr	r2, [pc, #172]	; (8003ab4 <TIM_Base_SetConfig+0x11c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <TIM_Base_SetConfig+0x9a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a2a      	ldr	r2, [pc, #168]	; (8003ab8 <TIM_Base_SetConfig+0x120>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00f      	beq.n	8003a32 <TIM_Base_SetConfig+0x9a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a29      	ldr	r2, [pc, #164]	; (8003abc <TIM_Base_SetConfig+0x124>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00b      	beq.n	8003a32 <TIM_Base_SetConfig+0x9a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a28      	ldr	r2, [pc, #160]	; (8003ac0 <TIM_Base_SetConfig+0x128>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d007      	beq.n	8003a32 <TIM_Base_SetConfig+0x9a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a27      	ldr	r2, [pc, #156]	; (8003ac4 <TIM_Base_SetConfig+0x12c>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d003      	beq.n	8003a32 <TIM_Base_SetConfig+0x9a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a26      	ldr	r2, [pc, #152]	; (8003ac8 <TIM_Base_SetConfig+0x130>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d108      	bne.n	8003a44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a10      	ldr	r2, [pc, #64]	; (8003aac <TIM_Base_SetConfig+0x114>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00f      	beq.n	8003a90 <TIM_Base_SetConfig+0xf8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a12      	ldr	r2, [pc, #72]	; (8003abc <TIM_Base_SetConfig+0x124>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00b      	beq.n	8003a90 <TIM_Base_SetConfig+0xf8>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a11      	ldr	r2, [pc, #68]	; (8003ac0 <TIM_Base_SetConfig+0x128>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d007      	beq.n	8003a90 <TIM_Base_SetConfig+0xf8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a10      	ldr	r2, [pc, #64]	; (8003ac4 <TIM_Base_SetConfig+0x12c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d003      	beq.n	8003a90 <TIM_Base_SetConfig+0xf8>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a0f      	ldr	r2, [pc, #60]	; (8003ac8 <TIM_Base_SetConfig+0x130>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d103      	bne.n	8003a98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	615a      	str	r2, [r3, #20]
}
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40012c00 	.word	0x40012c00
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40000800 	.word	0x40000800
 8003ab8:	40000c00 	.word	0x40000c00
 8003abc:	40013400 	.word	0x40013400
 8003ac0:	40014000 	.word	0x40014000
 8003ac4:	40014400 	.word	0x40014400
 8003ac8:	40014800 	.word	0x40014800

08003acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f023 0201 	bic.w	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f023 030a 	bic.w	r3, r3, #10
 8003b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	621a      	str	r2, [r3, #32]
}
 8003b1e:	bf00      	nop
 8003b20:	371c      	adds	r7, #28
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b087      	sub	sp, #28
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	f023 0210 	bic.w	r2, r3, #16
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	031b      	lsls	r3, r3, #12
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	621a      	str	r2, [r3, #32]
}
 8003b7e:	bf00      	nop
 8003b80:	371c      	adds	r7, #28
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	b085      	sub	sp, #20
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
 8003b92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ba2:	683a      	ldr	r2, [r7, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f043 0307 	orr.w	r3, r3, #7
 8003bac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	609a      	str	r2, [r3, #8]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b087      	sub	sp, #28
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	021a      	lsls	r2, r3, #8
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	431a      	orrs	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	609a      	str	r2, [r3, #8]
}
 8003bf4:	bf00      	nop
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e068      	b.n	8003cea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a2e      	ldr	r2, [pc, #184]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a2d      	ldr	r2, [pc, #180]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d108      	bne.n	8003c5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a1e      	ldr	r2, [pc, #120]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01d      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c8a:	d018      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1b      	ldr	r2, [pc, #108]	; (8003d00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1a      	ldr	r2, [pc, #104]	; (8003d04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00e      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d009      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a13      	ldr	r2, [pc, #76]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a14      	ldr	r2, [pc, #80]	; (8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40012c00 	.word	0x40012c00
 8003cfc:	40013400 	.word	0x40013400
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40000800 	.word	0x40000800
 8003d08:	40000c00 	.word	0x40000c00
 8003d0c:	40014000 	.word	0x40014000

08003d10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d40:	bf00      	nop
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e040      	b.n	8003de0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd f8b8 	bl	8000ee4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0201 	bic.w	r2, r2, #1
 8003d88:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 fdea 	bl	800496c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fb2f 	bl	80043fc <UART_SetConfig>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e01b      	b.n	8003de0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0201 	orr.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fe69 	bl	8004ab0 <UART_CheckIdleState>
 8003dde:	4603      	mov	r3, r0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b0ba      	sub	sp, #232	; 0xe8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003e12:	f640 030f 	movw	r3, #2063	; 0x80f
 8003e16:	4013      	ands	r3, r2
 8003e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003e1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d115      	bne.n	8003e50 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00f      	beq.n	8003e50 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e34:	f003 0320 	and.w	r3, r3, #32
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d009      	beq.n	8003e50 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 82ae 	beq.w	80043a2 <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	4798      	blx	r3
      }
      return;
 8003e4e:	e2a8      	b.n	80043a2 <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8117 	beq.w	8004088 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d106      	bne.n	8003e74 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003e66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003e6a:	4b85      	ldr	r3, [pc, #532]	; (8004080 <HAL_UART_IRQHandler+0x298>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 810a 	beq.w	8004088 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d011      	beq.n	8003ea4 <HAL_UART_IRQHandler+0xbc>
 8003e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d00b      	beq.n	8003ea4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2201      	movs	r2, #1
 8003e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e9a:	f043 0201 	orr.w	r2, r3, #1
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d011      	beq.n	8003ed4 <HAL_UART_IRQHandler+0xec>
 8003eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00b      	beq.n	8003ed4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eca:	f043 0204 	orr.w	r2, r3, #4
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d011      	beq.n	8003f04 <HAL_UART_IRQHandler+0x11c>
 8003ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00b      	beq.n	8003f04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003efa:	f043 0202 	orr.w	r2, r3, #2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f08:	f003 0308 	and.w	r3, r3, #8
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d017      	beq.n	8003f40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00b      	beq.n	8003f40 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f36:	f043 0208 	orr.w	r2, r3, #8
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d012      	beq.n	8003f72 <HAL_UART_IRQHandler+0x18a>
 8003f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00c      	beq.n	8003f72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f68:	f043 0220 	orr.w	r2, r3, #32
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8214 	beq.w	80043a6 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00d      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d005      	beq.n	8003fca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003fc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d04f      	beq.n	800406a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fe7f 	bl	8004cce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fda:	2b40      	cmp	r3, #64	; 0x40
 8003fdc:	d141      	bne.n	8004062 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	3308      	adds	r3, #8
 8004006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800400a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800400e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1d9      	bne.n	8003fde <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402e:	2b00      	cmp	r3, #0
 8004030:	d013      	beq.n	800405a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004036:	4a13      	ldr	r2, [pc, #76]	; (8004084 <HAL_UART_IRQHandler+0x29c>)
 8004038:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd fc98 	bl	8001974 <HAL_DMA_Abort_IT>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d017      	beq.n	800407a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004054:	4610      	mov	r0, r2
 8004056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004058:	e00f      	b.n	800407a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9b8 	bl	80043d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	e00b      	b.n	800407a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f9b4 	bl	80043d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	e007      	b.n	800407a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f9b0 	bl	80043d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004078:	e195      	b.n	80043a6 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800407a:	bf00      	nop
    return;
 800407c:	e193      	b.n	80043a6 <HAL_UART_IRQHandler+0x5be>
 800407e:	bf00      	nop
 8004080:	04000120 	.word	0x04000120
 8004084:	08004d97 	.word	0x08004d97

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800408c:	2b01      	cmp	r3, #1
 800408e:	f040 814e 	bne.w	800432e <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 8147 	beq.w	800432e <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80040a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8140 	beq.w	800432e <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2210      	movs	r2, #16
 80040b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c0:	2b40      	cmp	r3, #64	; 0x40
 80040c2:	f040 80b8 	bne.w	8004236 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	f000 8167 	beq.w	80043aa <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040e6:	429a      	cmp	r2, r3
 80040e8:	f080 815f 	bcs.w	80043aa <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80040f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0320 	and.w	r3, r3, #32
 8004102:	2b00      	cmp	r3, #0
 8004104:	f040 8086 	bne.w	8004214 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004110:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800411c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004124:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	461a      	mov	r2, r3
 800412e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004132:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004136:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800413e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800414a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1da      	bne.n	8004108 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3308      	adds	r3, #8
 8004158:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3308      	adds	r3, #8
 8004172:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004176:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800417a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800417e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1e1      	bne.n	8004152 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3308      	adds	r3, #8
 8004194:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800419e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3308      	adds	r3, #8
 80041ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80041b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80041b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80041c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e3      	bne.n	800418e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80041e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041e4:	f023 0310 	bic.w	r3, r3, #16
 80041e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	461a      	mov	r2, r3
 80041f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80041f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e4      	bne.n	80041d4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800420e:	4618      	mov	r0, r3
 8004210:	f7fd fb72 	bl	80018f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004226:	b29b      	uxth	r3, r3
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	b29b      	uxth	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f8d8 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004234:	e0b9      	b.n	80043aa <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004242:	b29b      	uxth	r3, r3
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 80ab 	beq.w	80043ae <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004258:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80a6 	beq.w	80043ae <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800426a:	e853 3f00 	ldrex	r3, [r3]
 800426e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004272:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004276:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	461a      	mov	r2, r3
 8004280:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004284:	647b      	str	r3, [r7, #68]	; 0x44
 8004286:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800428a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e4      	bne.n	8004262 <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	3308      	adds	r3, #8
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	e853 3f00 	ldrex	r3, [r3]
 80042a6:	623b      	str	r3, [r7, #32]
   return(result);
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3308      	adds	r3, #8
 80042b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80042bc:	633a      	str	r2, [r7, #48]	; 0x30
 80042be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c4:	e841 2300 	strex	r3, r2, [r1]
 80042c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1e3      	bne.n	8004298 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f023 0310 	bic.w	r3, r3, #16
 80042f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004306:	61fb      	str	r3, [r7, #28]
 8004308:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	69b9      	ldr	r1, [r7, #24]
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	617b      	str	r3, [r7, #20]
   return(result);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e4      	bne.n	80042e4 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004320:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004324:	4619      	mov	r1, r3
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f85c 	bl	80043e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800432c:	e03f      	b.n	80043ae <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800432e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00e      	beq.n	8004358 <HAL_UART_IRQHandler+0x570>
 800433a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800433e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d008      	beq.n	8004358 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800434e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fd60 	bl	8004e16 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004356:	e02d      	b.n	80043b4 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800435c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00e      	beq.n	8004382 <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436c:	2b00      	cmp	r3, #0
 800436e:	d008      	beq.n	8004382 <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01c      	beq.n	80043b2 <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	4798      	blx	r3
    }
    return;
 8004380:	e017      	b.n	80043b2 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	d012      	beq.n	80043b4 <HAL_UART_IRQHandler+0x5cc>
 800438e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00c      	beq.n	80043b4 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fd11 	bl	8004dc2 <UART_EndTransmit_IT>
    return;
 80043a0:	e008      	b.n	80043b4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80043a2:	bf00      	nop
 80043a4:	e006      	b.n	80043b4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80043a6:	bf00      	nop
 80043a8:	e004      	b.n	80043b4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80043aa:	bf00      	nop
 80043ac:	e002      	b.n	80043b4 <HAL_UART_IRQHandler+0x5cc>
      return;
 80043ae:	bf00      	nop
 80043b0:	e000      	b.n	80043b4 <HAL_UART_IRQHandler+0x5cc>
    return;
 80043b2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80043b4:	37e8      	adds	r7, #232	; 0xe8
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop

080043bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043f0:	bf00      	nop
 80043f2:	370c      	adds	r7, #12
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004400:	b08a      	sub	sp, #40	; 0x28
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	431a      	orrs	r2, r3
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	431a      	orrs	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	4313      	orrs	r3, r2
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	4ba4      	ldr	r3, [pc, #656]	; (80046bc <UART_SetConfig+0x2c0>)
 800442c:	4013      	ands	r3, r2
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004434:	430b      	orrs	r3, r1
 8004436:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a99      	ldr	r2, [pc, #612]	; (80046c0 <UART_SetConfig+0x2c4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d004      	beq.n	8004468 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004464:	4313      	orrs	r3, r2
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004478:	430a      	orrs	r2, r1
 800447a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a90      	ldr	r2, [pc, #576]	; (80046c4 <UART_SetConfig+0x2c8>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d126      	bne.n	80044d4 <UART_SetConfig+0xd8>
 8004486:	4b90      	ldr	r3, [pc, #576]	; (80046c8 <UART_SetConfig+0x2cc>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448c:	f003 0303 	and.w	r3, r3, #3
 8004490:	2b03      	cmp	r3, #3
 8004492:	d81b      	bhi.n	80044cc <UART_SetConfig+0xd0>
 8004494:	a201      	add	r2, pc, #4	; (adr r2, 800449c <UART_SetConfig+0xa0>)
 8004496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449a:	bf00      	nop
 800449c:	080044ad 	.word	0x080044ad
 80044a0:	080044bd 	.word	0x080044bd
 80044a4:	080044b5 	.word	0x080044b5
 80044a8:	080044c5 	.word	0x080044c5
 80044ac:	2301      	movs	r3, #1
 80044ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b2:	e116      	b.n	80046e2 <UART_SetConfig+0x2e6>
 80044b4:	2302      	movs	r3, #2
 80044b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ba:	e112      	b.n	80046e2 <UART_SetConfig+0x2e6>
 80044bc:	2304      	movs	r3, #4
 80044be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c2:	e10e      	b.n	80046e2 <UART_SetConfig+0x2e6>
 80044c4:	2308      	movs	r3, #8
 80044c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ca:	e10a      	b.n	80046e2 <UART_SetConfig+0x2e6>
 80044cc:	2310      	movs	r3, #16
 80044ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044d2:	e106      	b.n	80046e2 <UART_SetConfig+0x2e6>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a7c      	ldr	r2, [pc, #496]	; (80046cc <UART_SetConfig+0x2d0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d138      	bne.n	8004550 <UART_SetConfig+0x154>
 80044de:	4b7a      	ldr	r3, [pc, #488]	; (80046c8 <UART_SetConfig+0x2cc>)
 80044e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e4:	f003 030c 	and.w	r3, r3, #12
 80044e8:	2b0c      	cmp	r3, #12
 80044ea:	d82d      	bhi.n	8004548 <UART_SetConfig+0x14c>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0xf8>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004529 	.word	0x08004529
 80044f8:	08004549 	.word	0x08004549
 80044fc:	08004549 	.word	0x08004549
 8004500:	08004549 	.word	0x08004549
 8004504:	08004539 	.word	0x08004539
 8004508:	08004549 	.word	0x08004549
 800450c:	08004549 	.word	0x08004549
 8004510:	08004549 	.word	0x08004549
 8004514:	08004531 	.word	0x08004531
 8004518:	08004549 	.word	0x08004549
 800451c:	08004549 	.word	0x08004549
 8004520:	08004549 	.word	0x08004549
 8004524:	08004541 	.word	0x08004541
 8004528:	2300      	movs	r3, #0
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800452e:	e0d8      	b.n	80046e2 <UART_SetConfig+0x2e6>
 8004530:	2302      	movs	r3, #2
 8004532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004536:	e0d4      	b.n	80046e2 <UART_SetConfig+0x2e6>
 8004538:	2304      	movs	r3, #4
 800453a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453e:	e0d0      	b.n	80046e2 <UART_SetConfig+0x2e6>
 8004540:	2308      	movs	r3, #8
 8004542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004546:	e0cc      	b.n	80046e2 <UART_SetConfig+0x2e6>
 8004548:	2310      	movs	r3, #16
 800454a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454e:	e0c8      	b.n	80046e2 <UART_SetConfig+0x2e6>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a5e      	ldr	r2, [pc, #376]	; (80046d0 <UART_SetConfig+0x2d4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d125      	bne.n	80045a6 <UART_SetConfig+0x1aa>
 800455a:	4b5b      	ldr	r3, [pc, #364]	; (80046c8 <UART_SetConfig+0x2cc>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004560:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004564:	2b30      	cmp	r3, #48	; 0x30
 8004566:	d016      	beq.n	8004596 <UART_SetConfig+0x19a>
 8004568:	2b30      	cmp	r3, #48	; 0x30
 800456a:	d818      	bhi.n	800459e <UART_SetConfig+0x1a2>
 800456c:	2b20      	cmp	r3, #32
 800456e:	d00a      	beq.n	8004586 <UART_SetConfig+0x18a>
 8004570:	2b20      	cmp	r3, #32
 8004572:	d814      	bhi.n	800459e <UART_SetConfig+0x1a2>
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <UART_SetConfig+0x182>
 8004578:	2b10      	cmp	r3, #16
 800457a:	d008      	beq.n	800458e <UART_SetConfig+0x192>
 800457c:	e00f      	b.n	800459e <UART_SetConfig+0x1a2>
 800457e:	2300      	movs	r3, #0
 8004580:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004584:	e0ad      	b.n	80046e2 <UART_SetConfig+0x2e6>
 8004586:	2302      	movs	r3, #2
 8004588:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458c:	e0a9      	b.n	80046e2 <UART_SetConfig+0x2e6>
 800458e:	2304      	movs	r3, #4
 8004590:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004594:	e0a5      	b.n	80046e2 <UART_SetConfig+0x2e6>
 8004596:	2308      	movs	r3, #8
 8004598:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459c:	e0a1      	b.n	80046e2 <UART_SetConfig+0x2e6>
 800459e:	2310      	movs	r3, #16
 80045a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a4:	e09d      	b.n	80046e2 <UART_SetConfig+0x2e6>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a4a      	ldr	r2, [pc, #296]	; (80046d4 <UART_SetConfig+0x2d8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d125      	bne.n	80045fc <UART_SetConfig+0x200>
 80045b0:	4b45      	ldr	r3, [pc, #276]	; (80046c8 <UART_SetConfig+0x2cc>)
 80045b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045ba:	2bc0      	cmp	r3, #192	; 0xc0
 80045bc:	d016      	beq.n	80045ec <UART_SetConfig+0x1f0>
 80045be:	2bc0      	cmp	r3, #192	; 0xc0
 80045c0:	d818      	bhi.n	80045f4 <UART_SetConfig+0x1f8>
 80045c2:	2b80      	cmp	r3, #128	; 0x80
 80045c4:	d00a      	beq.n	80045dc <UART_SetConfig+0x1e0>
 80045c6:	2b80      	cmp	r3, #128	; 0x80
 80045c8:	d814      	bhi.n	80045f4 <UART_SetConfig+0x1f8>
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <UART_SetConfig+0x1d8>
 80045ce:	2b40      	cmp	r3, #64	; 0x40
 80045d0:	d008      	beq.n	80045e4 <UART_SetConfig+0x1e8>
 80045d2:	e00f      	b.n	80045f4 <UART_SetConfig+0x1f8>
 80045d4:	2300      	movs	r3, #0
 80045d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045da:	e082      	b.n	80046e2 <UART_SetConfig+0x2e6>
 80045dc:	2302      	movs	r3, #2
 80045de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045e2:	e07e      	b.n	80046e2 <UART_SetConfig+0x2e6>
 80045e4:	2304      	movs	r3, #4
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ea:	e07a      	b.n	80046e2 <UART_SetConfig+0x2e6>
 80045ec:	2308      	movs	r3, #8
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f2:	e076      	b.n	80046e2 <UART_SetConfig+0x2e6>
 80045f4:	2310      	movs	r3, #16
 80045f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fa:	e072      	b.n	80046e2 <UART_SetConfig+0x2e6>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a35      	ldr	r2, [pc, #212]	; (80046d8 <UART_SetConfig+0x2dc>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d12a      	bne.n	800465c <UART_SetConfig+0x260>
 8004606:	4b30      	ldr	r3, [pc, #192]	; (80046c8 <UART_SetConfig+0x2cc>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004610:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004614:	d01a      	beq.n	800464c <UART_SetConfig+0x250>
 8004616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800461a:	d81b      	bhi.n	8004654 <UART_SetConfig+0x258>
 800461c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004620:	d00c      	beq.n	800463c <UART_SetConfig+0x240>
 8004622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004626:	d815      	bhi.n	8004654 <UART_SetConfig+0x258>
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <UART_SetConfig+0x238>
 800462c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004630:	d008      	beq.n	8004644 <UART_SetConfig+0x248>
 8004632:	e00f      	b.n	8004654 <UART_SetConfig+0x258>
 8004634:	2300      	movs	r3, #0
 8004636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800463a:	e052      	b.n	80046e2 <UART_SetConfig+0x2e6>
 800463c:	2302      	movs	r3, #2
 800463e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004642:	e04e      	b.n	80046e2 <UART_SetConfig+0x2e6>
 8004644:	2304      	movs	r3, #4
 8004646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800464a:	e04a      	b.n	80046e2 <UART_SetConfig+0x2e6>
 800464c:	2308      	movs	r3, #8
 800464e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004652:	e046      	b.n	80046e2 <UART_SetConfig+0x2e6>
 8004654:	2310      	movs	r3, #16
 8004656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800465a:	e042      	b.n	80046e2 <UART_SetConfig+0x2e6>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a17      	ldr	r2, [pc, #92]	; (80046c0 <UART_SetConfig+0x2c4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d13a      	bne.n	80046dc <UART_SetConfig+0x2e0>
 8004666:	4b18      	ldr	r3, [pc, #96]	; (80046c8 <UART_SetConfig+0x2cc>)
 8004668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800466c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004670:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004674:	d01a      	beq.n	80046ac <UART_SetConfig+0x2b0>
 8004676:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800467a:	d81b      	bhi.n	80046b4 <UART_SetConfig+0x2b8>
 800467c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004680:	d00c      	beq.n	800469c <UART_SetConfig+0x2a0>
 8004682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004686:	d815      	bhi.n	80046b4 <UART_SetConfig+0x2b8>
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <UART_SetConfig+0x298>
 800468c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004690:	d008      	beq.n	80046a4 <UART_SetConfig+0x2a8>
 8004692:	e00f      	b.n	80046b4 <UART_SetConfig+0x2b8>
 8004694:	2300      	movs	r3, #0
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800469a:	e022      	b.n	80046e2 <UART_SetConfig+0x2e6>
 800469c:	2302      	movs	r3, #2
 800469e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046a2:	e01e      	b.n	80046e2 <UART_SetConfig+0x2e6>
 80046a4:	2304      	movs	r3, #4
 80046a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046aa:	e01a      	b.n	80046e2 <UART_SetConfig+0x2e6>
 80046ac:	2308      	movs	r3, #8
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046b2:	e016      	b.n	80046e2 <UART_SetConfig+0x2e6>
 80046b4:	2310      	movs	r3, #16
 80046b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ba:	e012      	b.n	80046e2 <UART_SetConfig+0x2e6>
 80046bc:	efff69f3 	.word	0xefff69f3
 80046c0:	40008000 	.word	0x40008000
 80046c4:	40013800 	.word	0x40013800
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40004400 	.word	0x40004400
 80046d0:	40004800 	.word	0x40004800
 80046d4:	40004c00 	.word	0x40004c00
 80046d8:	40005000 	.word	0x40005000
 80046dc:	2310      	movs	r3, #16
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a9f      	ldr	r2, [pc, #636]	; (8004964 <UART_SetConfig+0x568>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d17a      	bne.n	80047e2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d824      	bhi.n	800473e <UART_SetConfig+0x342>
 80046f4:	a201      	add	r2, pc, #4	; (adr r2, 80046fc <UART_SetConfig+0x300>)
 80046f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046fa:	bf00      	nop
 80046fc:	08004721 	.word	0x08004721
 8004700:	0800473f 	.word	0x0800473f
 8004704:	08004729 	.word	0x08004729
 8004708:	0800473f 	.word	0x0800473f
 800470c:	0800472f 	.word	0x0800472f
 8004710:	0800473f 	.word	0x0800473f
 8004714:	0800473f 	.word	0x0800473f
 8004718:	0800473f 	.word	0x0800473f
 800471c:	08004737 	.word	0x08004737
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004720:	f7fe f936 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 8004724:	61f8      	str	r0, [r7, #28]
        break;
 8004726:	e010      	b.n	800474a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004728:	4b8f      	ldr	r3, [pc, #572]	; (8004968 <UART_SetConfig+0x56c>)
 800472a:	61fb      	str	r3, [r7, #28]
        break;
 800472c:	e00d      	b.n	800474a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800472e:	f7fe f897 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 8004732:	61f8      	str	r0, [r7, #28]
        break;
 8004734:	e009      	b.n	800474a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473a:	61fb      	str	r3, [r7, #28]
        break;
 800473c:	e005      	b.n	800474a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004748:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80fb 	beq.w	8004948 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	4613      	mov	r3, r2
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	4413      	add	r3, r2
 800475c:	69fa      	ldr	r2, [r7, #28]
 800475e:	429a      	cmp	r2, r3
 8004760:	d305      	bcc.n	800476e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	429a      	cmp	r2, r3
 800476c:	d903      	bls.n	8004776 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004774:	e0e8      	b.n	8004948 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	2200      	movs	r2, #0
 800477a:	461c      	mov	r4, r3
 800477c:	4615      	mov	r5, r2
 800477e:	f04f 0200 	mov.w	r2, #0
 8004782:	f04f 0300 	mov.w	r3, #0
 8004786:	022b      	lsls	r3, r5, #8
 8004788:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800478c:	0222      	lsls	r2, r4, #8
 800478e:	68f9      	ldr	r1, [r7, #12]
 8004790:	6849      	ldr	r1, [r1, #4]
 8004792:	0849      	lsrs	r1, r1, #1
 8004794:	2000      	movs	r0, #0
 8004796:	4688      	mov	r8, r1
 8004798:	4681      	mov	r9, r0
 800479a:	eb12 0a08 	adds.w	sl, r2, r8
 800479e:	eb43 0b09 	adc.w	fp, r3, r9
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	603b      	str	r3, [r7, #0]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047b0:	4650      	mov	r0, sl
 80047b2:	4659      	mov	r1, fp
 80047b4:	f7fb fd08 	bl	80001c8 <__aeabi_uldivmod>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4613      	mov	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047c6:	d308      	bcc.n	80047da <UART_SetConfig+0x3de>
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ce:	d204      	bcs.n	80047da <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	60da      	str	r2, [r3, #12]
 80047d8:	e0b6      	b.n	8004948 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047e0:	e0b2      	b.n	8004948 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ea:	d15e      	bne.n	80048aa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80047ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d828      	bhi.n	8004846 <UART_SetConfig+0x44a>
 80047f4:	a201      	add	r2, pc, #4	; (adr r2, 80047fc <UART_SetConfig+0x400>)
 80047f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fa:	bf00      	nop
 80047fc:	08004821 	.word	0x08004821
 8004800:	08004829 	.word	0x08004829
 8004804:	08004831 	.word	0x08004831
 8004808:	08004847 	.word	0x08004847
 800480c:	08004837 	.word	0x08004837
 8004810:	08004847 	.word	0x08004847
 8004814:	08004847 	.word	0x08004847
 8004818:	08004847 	.word	0x08004847
 800481c:	0800483f 	.word	0x0800483f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004820:	f7fe f8b6 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 8004824:	61f8      	str	r0, [r7, #28]
        break;
 8004826:	e014      	b.n	8004852 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004828:	f7fe f8c8 	bl	80029bc <HAL_RCC_GetPCLK2Freq>
 800482c:	61f8      	str	r0, [r7, #28]
        break;
 800482e:	e010      	b.n	8004852 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004830:	4b4d      	ldr	r3, [pc, #308]	; (8004968 <UART_SetConfig+0x56c>)
 8004832:	61fb      	str	r3, [r7, #28]
        break;
 8004834:	e00d      	b.n	8004852 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004836:	f7fe f813 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 800483a:	61f8      	str	r0, [r7, #28]
        break;
 800483c:	e009      	b.n	8004852 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004842:	61fb      	str	r3, [r7, #28]
        break;
 8004844:	e005      	b.n	8004852 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004850:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d077      	beq.n	8004948 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	005a      	lsls	r2, r3, #1
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	441a      	add	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b0f      	cmp	r3, #15
 8004872:	d916      	bls.n	80048a2 <UART_SetConfig+0x4a6>
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487a:	d212      	bcs.n	80048a2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	b29b      	uxth	r3, r3
 8004880:	f023 030f 	bic.w	r3, r3, #15
 8004884:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	b29b      	uxth	r3, r3
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	b29a      	uxth	r2, r3
 8004892:	8afb      	ldrh	r3, [r7, #22]
 8004894:	4313      	orrs	r3, r2
 8004896:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	8afa      	ldrh	r2, [r7, #22]
 800489e:	60da      	str	r2, [r3, #12]
 80048a0:	e052      	b.n	8004948 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048a8:	e04e      	b.n	8004948 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048ae:	2b08      	cmp	r3, #8
 80048b0:	d827      	bhi.n	8004902 <UART_SetConfig+0x506>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <UART_SetConfig+0x4bc>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048e5 	.word	0x080048e5
 80048c0:	080048ed 	.word	0x080048ed
 80048c4:	08004903 	.word	0x08004903
 80048c8:	080048f3 	.word	0x080048f3
 80048cc:	08004903 	.word	0x08004903
 80048d0:	08004903 	.word	0x08004903
 80048d4:	08004903 	.word	0x08004903
 80048d8:	080048fb 	.word	0x080048fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048dc:	f7fe f858 	bl	8002990 <HAL_RCC_GetPCLK1Freq>
 80048e0:	61f8      	str	r0, [r7, #28]
        break;
 80048e2:	e014      	b.n	800490e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048e4:	f7fe f86a 	bl	80029bc <HAL_RCC_GetPCLK2Freq>
 80048e8:	61f8      	str	r0, [r7, #28]
        break;
 80048ea:	e010      	b.n	800490e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048ec:	4b1e      	ldr	r3, [pc, #120]	; (8004968 <UART_SetConfig+0x56c>)
 80048ee:	61fb      	str	r3, [r7, #28]
        break;
 80048f0:	e00d      	b.n	800490e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048f2:	f7fd ffb5 	bl	8002860 <HAL_RCC_GetSysClockFreq>
 80048f6:	61f8      	str	r0, [r7, #28]
        break;
 80048f8:	e009      	b.n	800490e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048fe:	61fb      	str	r3, [r7, #28]
        break;
 8004900:	e005      	b.n	800490e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800490c:	bf00      	nop
    }

    if (pclk != 0U)
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d019      	beq.n	8004948 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	085a      	lsrs	r2, r3, #1
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	441a      	add	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	fbb2 f3f3 	udiv	r3, r2, r3
 8004926:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b0f      	cmp	r3, #15
 800492c:	d909      	bls.n	8004942 <UART_SetConfig+0x546>
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004934:	d205      	bcs.n	8004942 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004936:	69bb      	ldr	r3, [r7, #24]
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60da      	str	r2, [r3, #12]
 8004940:	e002      	b.n	8004948 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004954:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004958:	4618      	mov	r0, r3
 800495a:	3728      	adds	r7, #40	; 0x28
 800495c:	46bd      	mov	sp, r7
 800495e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004962:	bf00      	nop
 8004964:	40008000 	.word	0x40008000
 8004968:	00f42400 	.word	0x00f42400

0800496c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004978:	f003 0308 	and.w	r3, r3, #8
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00a      	beq.n	8004996 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	430a      	orrs	r2, r1
 8004994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	430a      	orrs	r2, r1
 80049b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00a      	beq.n	80049da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00a      	beq.n	80049fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	f003 0320 	and.w	r3, r3, #32
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00a      	beq.n	8004a40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01a      	beq.n	8004a82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a6a:	d10a      	bne.n	8004a82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	605a      	str	r2, [r3, #4]
  }
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b098      	sub	sp, #96	; 0x60
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ac0:	f7fc fbb0 	bl	8001224 <HAL_GetTick>
 8004ac4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d12e      	bne.n	8004b32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004adc:	2200      	movs	r2, #0
 8004ade:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f88c 	bl	8004c00 <UART_WaitOnFlagUntilTimeout>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d021      	beq.n	8004b32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b02:	653b      	str	r3, [r7, #80]	; 0x50
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e6      	bne.n	8004aee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e062      	b.n	8004bf8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d149      	bne.n	8004bd4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f856 	bl	8004c00 <UART_WaitOnFlagUntilTimeout>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d03c      	beq.n	8004bd4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	623b      	str	r3, [r7, #32]
   return(result);
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b78:	633b      	str	r3, [r7, #48]	; 0x30
 8004b7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e6      	bne.n	8004b5a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3308      	adds	r3, #8
 8004baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bac:	61fa      	str	r2, [r7, #28]
 8004bae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	69b9      	ldr	r1, [r7, #24]
 8004bb2:	69fa      	ldr	r2, [r7, #28]
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e5      	bne.n	8004b8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e011      	b.n	8004bf8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2200      	movs	r2, #0
 8004bec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3758      	adds	r7, #88	; 0x58
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c10:	e049      	b.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d045      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1a:	f7fc fb03 	bl	8001224 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d302      	bcc.n	8004c30 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e048      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d031      	beq.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d110      	bne.n	8004c72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2208      	movs	r2, #8
 8004c56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f838 	bl	8004cce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2208      	movs	r2, #8
 8004c62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e029      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c80:	d111      	bne.n	8004ca6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f81e 	bl	8004cce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e00f      	b.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	69da      	ldr	r2, [r3, #28]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4013      	ands	r3, r2
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	bf0c      	ite	eq
 8004cb6:	2301      	moveq	r3, #1
 8004cb8:	2300      	movne	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	79fb      	ldrb	r3, [r7, #7]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d0a6      	beq.n	8004c12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b095      	sub	sp, #84	; 0x54
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cde:	e853 3f00 	ldrex	r3, [r3]
 8004ce2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cf4:	643b      	str	r3, [r7, #64]	; 0x40
 8004cf6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004cfc:	e841 2300 	strex	r3, r2, [r1]
 8004d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1e6      	bne.n	8004cd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	e853 3f00 	ldrex	r3, [r3]
 8004d16:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f023 0301 	bic.w	r3, r3, #1
 8004d1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3308      	adds	r3, #8
 8004d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d30:	e841 2300 	strex	r3, r2, [r1]
 8004d34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1e5      	bne.n	8004d08 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d118      	bne.n	8004d76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	e853 3f00 	ldrex	r3, [r3]
 8004d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f023 0310 	bic.w	r3, r3, #16
 8004d58:	647b      	str	r3, [r7, #68]	; 0x44
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d62:	61bb      	str	r3, [r7, #24]
 8004d64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d66:	6979      	ldr	r1, [r7, #20]
 8004d68:	69ba      	ldr	r2, [r7, #24]
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e6      	bne.n	8004d44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d8a:	bf00      	nop
 8004d8c:	3754      	adds	r7, #84	; 0x54
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f7ff fb0b 	bl	80043d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b088      	sub	sp, #32
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	e853 3f00 	ldrex	r3, [r3]
 8004dd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dde:	61fb      	str	r3, [r7, #28]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	6979      	ldr	r1, [r7, #20]
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	e841 2300 	strex	r3, r2, [r1]
 8004df4:	613b      	str	r3, [r7, #16]
   return(result);
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1e6      	bne.n	8004dca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff fad7 	bl	80043bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e0e:	bf00      	nop
 8004e10:	3720      	adds	r7, #32
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <memset>:
 8004e2a:	4402      	add	r2, r0
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d100      	bne.n	8004e34 <memset+0xa>
 8004e32:	4770      	bx	lr
 8004e34:	f803 1b01 	strb.w	r1, [r3], #1
 8004e38:	e7f9      	b.n	8004e2e <memset+0x4>
	...

08004e3c <__libc_init_array>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	4d0d      	ldr	r5, [pc, #52]	; (8004e74 <__libc_init_array+0x38>)
 8004e40:	4c0d      	ldr	r4, [pc, #52]	; (8004e78 <__libc_init_array+0x3c>)
 8004e42:	1b64      	subs	r4, r4, r5
 8004e44:	10a4      	asrs	r4, r4, #2
 8004e46:	2600      	movs	r6, #0
 8004e48:	42a6      	cmp	r6, r4
 8004e4a:	d109      	bne.n	8004e60 <__libc_init_array+0x24>
 8004e4c:	4d0b      	ldr	r5, [pc, #44]	; (8004e7c <__libc_init_array+0x40>)
 8004e4e:	4c0c      	ldr	r4, [pc, #48]	; (8004e80 <__libc_init_array+0x44>)
 8004e50:	f000 f818 	bl	8004e84 <_init>
 8004e54:	1b64      	subs	r4, r4, r5
 8004e56:	10a4      	asrs	r4, r4, #2
 8004e58:	2600      	movs	r6, #0
 8004e5a:	42a6      	cmp	r6, r4
 8004e5c:	d105      	bne.n	8004e6a <__libc_init_array+0x2e>
 8004e5e:	bd70      	pop	{r4, r5, r6, pc}
 8004e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e64:	4798      	blx	r3
 8004e66:	3601      	adds	r6, #1
 8004e68:	e7ee      	b.n	8004e48 <__libc_init_array+0xc>
 8004e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6e:	4798      	blx	r3
 8004e70:	3601      	adds	r6, #1
 8004e72:	e7f2      	b.n	8004e5a <__libc_init_array+0x1e>
 8004e74:	0800843c 	.word	0x0800843c
 8004e78:	0800843c 	.word	0x0800843c
 8004e7c:	0800843c 	.word	0x0800843c
 8004e80:	08008440 	.word	0x08008440

08004e84 <_init>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr

08004e90 <_fini>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	bf00      	nop
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr
